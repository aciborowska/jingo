This problem can be demontrated by org.apache.camel.processor.InterceptWithoutProceedRouteTest
    protected RouteBuilder createRouteBuilder() {
        return new RouteBuilder() {
            public void configure() 
{
                // we will disable the output to 'mock:a' since we never proceed()
                intercept().filter(header("foo").isEqualTo("bar")).to("mock:b");

                from("direct:start").to("mock:a");
            }
        };
    }
If I slightly modify the testSendMatchingMessage() to make sure that my message was not proceeded to "mock:a", it fails.
    public void testSendMatchingMessage() throws Exception 
{
        b.expectedMessageCount(1);
        a.expectedMessageCount(0);  // added by me

        template.sendBodyAndHeader("direct:start", "<matched/>", "foo", "bar");

        assertMockEndpointsSatisifed();
    }

The problem can be observed in org.apache.camel.processor.InterceptRouteTest.
    protected RouteBuilder createRouteBuilder() {
        return new RouteBuilder() {
            public void configure() 
{
                intercept().choice().
                        when(header("foo").isEqualTo("bar")).to("mock:b").
                        otherwise().proceed();

                from("direct:start").to("mock:a");
            }
        };
    }
  public void testSendMatchingMessage() throws Exception 
{
        a.expectedMessageCount(0);  //   I don't expect mock:a to receive my message, but it did.

        b.expectedMessageCount(1);

        template.sendBodyAndHeader("direct:start", "<matched/>", "foo", "bar");

        assertMockEndpointsSatisifed();
    }