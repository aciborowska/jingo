There is an inconsistency in exchange properties propagation. To show few examples:


code
test property value at mock:test 
 due to 



from("direct:start")
    .setProperty("test", "inStart")
    .to("direct:subflow")
    .to("mock:test");
from("direct:subflow")
    .setBody("test")
    .setProperty("test", "inSubflow");

 
 inStart 
 properties are not propagated  back if they were set in super flow 



from("direct:start")
    .setProperty("test", "inStart")
    .to("direct:subflow")
    .to("mock:test");
from("direct:subflow")
    .setProperty("test", "inSubflow")
    .setBody("test");

 
 inSubflow 
 property is set to new value as  pipeline sends original  exchange to first step of pipeline 



from("direct:start")
    .to("direct:subflow")
    .to("mock:test");
from("direct:subflow")
    .setBody("test")
    .setProperty("test", "inSubflow");

 
 inSubflow 
 properties are propagated  back by default 


I believe we should clearly define how properties should be propagated:

should they be kept for the whole flow and every change is visible to sub/super flows, or
should they be visible only in scope of current flow and interaction with sub-flows (invoked by and endpoint) should be done with headers.

I believe that first is easier for users as they have a way to hold some data for further processing (while they are not exposed as protocol specific headers).
If you have another ideas - please advice.