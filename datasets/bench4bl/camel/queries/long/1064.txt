If the ActiveMQ broker is shut down and then started again while a Camel ActiveMQ endpoint based program is listening on its queue, the program does not pick the queue back up for consuming when ActiveMQ is back up. Anything subsequently posted to the new broker becomes available only when the Camel program is restarted.
This is a problem in production style scenarios where the broker has to be restarted for some reason e.g. so that modifications to its configuration can be made.
I have been able to observe the above behaviour with the camel-example-jms-file project and attach a modified version of the CamelJmsToFileExample.java file. My modifications bind to the broker at tcp://localhost:61616 and cause the example to pause for 20s before sending out any messages. In this time, if the broker (which has to be started externally prior to executing the example) is shutdown and then started again, no messages are received.
Here are the actual recommended steps to reproduce the problem:
1. Start the ActiveMQ broker in one terminal window
2. Run the example via mvn compile exec:java
3. When the message displays stating that you have 20s, Ctrl-C the broker in the broker terminal window
4. When the broker stops, start it again
At this point no messages are displayed - you would expect them to be - they have actually been sent out. This can be verified also:
5. Type mvn compile exec:java again
6. Let the example continue without interfering with the broker.
You will now see the messages posted previously prior while the program waits for 20 seconds (remember no messages have been posted at this point). Letting the example continue demonstrates that after the 20 seconds, the messages are sent out and then received quickly given that we have not touched the broker.
The original thread posting can be found at:
http://www.nabble.com/Camel-ActiveMQ-service-not-recovering-from-lost-broker-to20379163s22882.html