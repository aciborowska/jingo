I have a simple class 'A' defined as follows:
======================================
public class A 
{

  int p1;

  String p2;

  B b;

}
======================================
While I execute the following instructions:
ToStringBuilder builder = new ReflectionToStringBuilder(a);
System.out.println(builder.toString());
The output is:
A@3ea981ca[p1=0,p2=<null>,b=B@1ee7b241]
that's normal, without recursion
So, I defined my own style, for recursive toString-ing display:
======================================
class MyStyle extends ToStringStyle {
  private final static ToStringStyle instance = new MyStyle();
  public MyStyle() 
{

    setArrayContentDetail(true);

    setUseShortClassName(true);

    setUseClassName(true);

    setUseIdentityHashCode(true);

    setFieldSeparator(", ");

  }

  public static ToStringStyle getInstance() 
{

    return instance;

  }
;
  @Override
  public void appendDetail(final StringBuffer buffer, final String fieldName, final Object value) {
    if (!value.getClass().getName().startsWith("java")) 
{

      buffer.append(ReflectionToStringBuilder.toString(value, instance));

    }
 else 
{

      super.appendDetail(buffer, fieldName, value);

    }
  }
  @Override
  public void appendDetail(final StringBuffer buffer, final String fieldName, final Collection value) 
{

    appendDetail(buffer, fieldName, value.toArray());

  }

}
======================================
When I use my custom MyStyle:
String s = ReflectionToStringBuilder.toString(a, MyStyle.getInstance());
System.out.println(s);
The output is:
A@3ea981ca[p1=0, p2=<null>, b=byte@1ee7b241[p4=234]]
So, the name of the class 'B' is not displayed.
I expected something like: b=B@1ee7b241[p4=234]
Instead, the name of the class 'B' is replaced with 'byte'.
I don't know why.