When AbstractPreAuthenticatedProcessingFilter invalidates a session after it detected a principal change, it does not create a new session which prevents the new security context from being stored (for a longer explanation why, look at http://forum.springsource.org/showthread.php?113171-Improper-use-of-SessionFixationProtectionStrategy-in-SessionManagementFilter).
AbstractPreAuthenticatedProcessingFilter should probably recreate the session after invalidating it when the principal changes. This will not trick developers new to Spring Security to come up with workarounds (like turning off session invalidation at principal change) that would currently enable a session fixation attack (since the session fixation protection strategy plugged into the default session management filter would not be called under these circumstances).