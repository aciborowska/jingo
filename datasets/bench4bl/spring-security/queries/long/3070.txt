The problem is that the HttpSessionSecurityContextRepository has:






if (httpSession != null && !contextObject.equals(contextBeforeExecution)) {




    // SEC-1587 A non-anonymous context may still be in the session




    // SEC-1735 remove if the contextBeforeExecution was not anonymous




    httpSession.removeAttribute(springSecurityContextKey);




}






When using SecurityContextHolder.getContext().setAuthentication(null) it means that contextObject.equals(contextBeforeExecution) will return true so the attribute is not removed from session.
In a default servlet environment this is unnoticed since the HttpSession is stored in memory. This means the setAuthentication(null)) updates the object in HttpSession.
In Spring Session (or any external HttpSession implementation) the session is stored externally, so it will only be updated if the setAttribute is called.
A workaround is to invoke:






SecurityContextHolder.clearContext();






*NOTE* The invocation of setAuthentication(null) is unnecessary to log out when using standard Servlet HttpSession. This is invoked to work around SEC-1735 and SEC-2025. We will need to account for the Authentication being removed as well.