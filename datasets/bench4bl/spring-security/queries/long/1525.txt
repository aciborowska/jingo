Given the code :
@PostAuthorize(hasPermission(returnObject.field, 'admin'))
MyObject someMethod();
when someMethod throws an exception, the PostAuthorize processing throws an exception :
org.springframework.expression.spel.SpelEvaluation Exception: EL1007Epos 27): Field or property 'field' cannot be found on null
IMHO, the PostAuthorize should not be evaluated when returnObject is null (exactly like PostFilter)
This is possible if we consider that PostAuthorize is a nonsense if you do not use the returnObject inside the expression (and IMHO this consideration is true because if you do not use returnObject in the expression then you could have use PreAuthorize...)
By code inspection, the problem comes from ExpressionBasedPostInvocationAdvice :
when you do : 
if (postAuthorize != null && !ExpressionUtils.evaluateAsBoolean(postAuthorize, ctx)) 
you should have done : 
if (postAuthorize != null && returnedObject != null && !ExpressionUtils.evaluateAsBoolean(postAuthorize, ctx)) 
BTW, this is exactly what you do in PostFilter 10 lines above...