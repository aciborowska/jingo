Is there a good reason for not returning MutableUser.delegate in the  InMemoryUserDetailsManager.loadUserByUsername() method?  What I have run into is I want to provide my own user details, so I pass them to the create() method but when I get them back from authentication.getPrincipal() its been replaced with the vanilla spring security User object since apparently rather then just returning the UserDetails that we already have it takes the delegate and  creates a new org.springframework.security.core.userdetails.User.
What I am proposing is a something different then the MutableUserDetails interface. The MutableUser object would need to expose its delegate so that it could be returned if it exists.  Currently the only way to get what I want is to create my own version of InMemoryUserDetailsManager and InMemoryUserDetailsManagerConfigurer unless I am missing something.  It just seems that by exposing a create(UserDetails) method it is implied that we would get the UserDetails provided and not something different.  I see this bit of the API as confusing and bit misleading.  There is nothing in the Java Doc implying that that underlying implementation will be changed.