A friend who's looking at integrating another SSO system sent me the the following mail:
The bug is in CasProcessingFilterEntryPoint (I'm looking at the RC2
release, havent checked nightly):
    public void commence(ServletRequest request, ServletResponse response,
        AuthenticationException authenticationException)
        throws IOException, ServletException {
        String url;
        if (serviceProperties.isSendRenew()) 
{
            url = loginUrl + "?renew=true" + "&service="
                + serviceProperties.getService();
        }
 else 
{
            url = loginUrl + "?service="
                + URLEncoder.encode(serviceProperties.getService(), "UTF-8");
        }

        ((HttpServletResponse) response).sendRedirect(url);
    }
There are two bugs here.
The first is that serviceProperties.getService() is the URL of the
login handler (eg
https://www.mycompany.com/application/j_acegi_cas_security_check).
However, since this URL doesn't get encoded with the session id, so
when CAS redirects back to you and cookies are off, the user gets a
new session - and I presume they are taken to a default page rather
than the page they wanted? This might seem obtuse, since CAS SSO
relies on cookies, but using CAS as a single point of authentication
doesn't; you just log into CAS for each resource you want.
The second bug is even more obvious: service is encoded in the 'login'
URL but not encoded in the 'renew' URL. The 'renew' one is clearly
wrong.
I havent tested these, but they sure look wrong.