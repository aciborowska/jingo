See http://forum.springframework.org/viewtopic.php?t=7104
Basically if more than one request comes into a web container for the same browser, both requests will be for the same jsessionid. If the requests finish in a different order from which they are received, any authentication action that occurs in the faster-to-complete request will be overwritten by the slower-to-complete request.
The fix is to only ever write to HttpSession if the SecurityContextHolder.getContext() has actually changed during the request. As such, in the above case the slower-to-complete request will not have changed its SecurityContextHolder and therefore would not have overwritten the faster-to-complete request's modification of SecurityContextHolder and thus persistence in HttpSession.
I have no problem with this change, it makes sense, we just need to ensure test coverage carefully checks its correct operation.