OpenIDAuthenticationProcessingFilter when parsing the returnToUrl assumes port 80 even https is used.  There should be some logic to utilize port 443, the default port for https if url.getPort equals -1.
if (mapping == null) {
            try {
                URL url = new URL(returnToUrl);
                int port = (url.getPort() == -1) ? 80 : url.getPort();
Workaround is to utilize realmMapping property to make a hard map between returnToUrl and the existing returnToUrl bypassing the flawed logic.  i.e.,
<b:bean id="openIdFilter" class="org.springframework.security.ui.openid.OpenIDAuthenticationProcessingFilter">
        <custom-filter position="AUTHENTICATION_PROCESSING_FILTER"/>
        <b:property name="authenticationManager" ref="authenticationManager"/>
        <b:property name="defaultTargetUrl" value="/index.jsp"/>
        <b:property name="authenticationFailureUrl" value="/openidlogin.jsp?login_error=true"/>
        <!-- the realmMapping property allows mapping through apache's mod proxy -->
        <b:property name="realmMapping">
            <b:map>
                <b:entry key="https://sitename/j_spring_openid_security_check"
                         value="https://sitename/j_spring_openid_security_check"/>
            </b:map>
        </b:property>
    </b:bean>
I also found that putting a debug statement in helped doing the realmMapping i.e.
protected String lookupRealm(String returnToUrl) {
        String mapping = (String) realmMapping.get(returnToUrl);
        log.debug("returnToUrl value = " + returnToUrl);