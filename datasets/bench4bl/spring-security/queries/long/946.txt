When an unauthenticated user attempts to access a protected resource, AuthenticationProcessingFilter (actually AbstractProcessingFilter) saves the target URL to the session and then redirects to the login page.  If the user decides not to complete the login at that point in time, the target URL remains on the session.  If the user later decides to directly access a Login link (i.e. they hit the login page directly rather than indirectly via interception), the user will be redirected to the saved request URL rather than the default target URL.  It would seem that the default target URL is the intended target in this scenario.
Besides causing some weirdness when users login, it also makes it unreliable to use the presence of a target URL to differentiate direct logins from interception-based logins.  It is useful to distinguish the two when rendering the login form.  In the case of an interception, I'd like to be able to include some explanatory text (e.g. "You must sign in to access the requested page.") just so the user isn't wondering why a login page just appeared.
I've devised an app-level workaround though ultimately this probably should be a framework level fix.  In the workaround, suppose I set the login URL to /login.jsp.  In the JSP I will use a URL like this: login.jsp?direct=true.  Then inside login.jsp I'll have this:
<c:if test="$
{not empty param.direct}
">
	<c:remove scope="session" var="SPRING_SECURITY_SAVED_REQUEST_KEY"/>
</c:if>
I posted a message about this here as well: [url]http://forum.springframework.org/showthread.php?t=58243[/url]