We're using version 1.0.0-RC1 of acegi-security.
During our development cycle everyone is logging into the system with the same userid and password.  We've configured Acegi to use a user-cache as shown in the spring config exerpt below.  The issue we ran into is that if 3 or 4 of us all try to log in at the same time (one, two, three, go), and with the same username / password; we often see two or more clients obtain the same user object from the cache.  When one person changes the user object in their session the other person also see's the change.  There are in fact two sessions created (or one per client), but the same instance of the User object is stored in both sessions.  With only slight differences in login times we see the proper and expected behaviour that each logged in user gets a unique copy of the user from the userCache; yet the problem exists that for a small time-frame (perhaps a second?) it is possible for more than one user to get the same in-memory copy of the user in their session when both people login with the same credentials.
As a short term workaround we've disabled use of the user-cache and it seems to resolve the issue.
    <bean id="daoAuthenticationProvider" class="com.clickbank.dao.security.CBDaoAuthenticationProvider ">
         <property name="userDetailsService" ref="userDAO"/>
         <Unable to render embedded object: File (-- <property name="userCache" ref="userCache"/> --> <) not found.-- TODO: turned off due to issue with same user hitting cache at same time. -->
         <property name="passwordEncoder" ref="passwordEncoder"/>
         <property name="saltSource">
            <bean class="org.acegisecurity.providers.dao.salt.ReflectionSaltSource ">
                <property name="userPropertyToUse">
                    <value>getUserName</value>
                </property>
            </bean>
        </property>
    </bean>
    <bean id="userCache" class="org.acegisecurity.providers.dao.cache.EhCacheBasedUserCache">
        <property name="cache">
            <bean class=" org.springframework.cache.ehcache.EhCacheFactoryBean">
                <property name="cacheManager">
                    <bean class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean "/>
                </property>
                <property name="cacheName" value="userCache"/>
            </bean>
        </property>
    </bean>