Hi. My Application contains Spring MVC , Security and Websocket. before i add Spring Websocket , HttpSession timeout was working good. unfortunately , when i add Spring Websocket into appication , timeout is not working..! (my WebServer is Weblogic 12.1.3)
I test application with this scenario to receive this problem :
==> before start application (I set session-timeout 2 min and set weblogic.websocket.tyrus.session-max-idle-timeout with 30 sec into web.xml). after start application (user login to application , then create a Websocket connection , after 30 sec Websocket timeout fire , and must be in 1 min and 30 sec later HttpSession timeout fire and user login again, but HttpSession is not working!)
This Is my Configuration :
0) dependencies in POM.xml






 <properties>




    	<spring.version>4.2.0.RELEASE</spring.version>




    	<spring.sec.version>4.0.2.RELEASE</spring.sec.version>




    </properties>




    




    <dependencies>




    	<!-- Spring dependencies -->




    	<dependency>




    		<groupId>org.springframework</groupId>




    		<artifactId>spring-aop</artifactId>




    		<version>${spring.version}</version>




    	</dependency>




    	<dependency>




    		<groupId>org.springframework</groupId>




    		<artifactId>spring-beans</artifactId>




    		<version>${spring.version}</version>




    	</dependency>




    	<dependency>




    		<groupId>org.springframework</groupId>




    		<artifactId>spring-core</artifactId>




    		<version>${spring.version}</version>




    	</dependency>




    	<dependency>




    		<groupId>org.springframework</groupId>




    		<artifactId>spring-webmvc</artifactId>




    		<version>${spring.version}</version>




    	</dependency>




    	<dependency>




    		<groupId>org.springframework</groupId>




    		<artifactId>spring-web</artifactId>




    		<version>${spring.version}</version>




    	</dependency>




    	<dependency>




    		<groupId>org.springframework</groupId>




    		<artifactId>spring-context</artifactId>




    		<version>${spring.version}</version>




    	</dependency>




    	<dependency>




    		<groupId>org.springframework</groupId>




    		<artifactId>spring-context-support</artifactId>




    		<version>${spring.version}</version>




    	</dependency>




    	<dependency>




    		<groupId>org.springframework</groupId>




    		<artifactId>spring-websocket</artifactId>




    		<version>${spring.version}</version>




    	</dependency>




    




    	<!-- Spring Security -->




    	<dependency>




    		<groupId>org.springframework.security</groupId>




    		<artifactId>spring-security-core</artifactId>




    		<version>${spring.sec.version}</version>




    	</dependency>




    	<dependency>




    		<groupId>org.springframework.security</groupId>




    		<artifactId>spring-security-web</artifactId>




    		<version>${spring.sec.version}</version>




    	</dependency>




    	<dependency>




    		<groupId>org.springframework.security</groupId>




    		<artifactId>spring-security-config</artifactId>




    		<version>${spring.sec.version}</version>




    	</dependency>




    	<dependency>




    		<groupId>org.springframework.security</groupId>




    		<artifactId>spring-security-taglibs</artifactId>




    		<version>${spring.sec.version}</version>




    	</dependency>




     




        ... and other dependencies




    




    <dependencies>






1) web.xml






 <?xml version="1.0" encoding="UTF-8"?>




    <web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"




    xmlns="http://java.sun.com/xml/ns/javaee"




    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee




    http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" version="3.0">




    




    	<!-- WebSocket Idle Timeout -->




    	<context-param>




    		<param-name>weblogic.websocket.tyrus.session-max-idle-timeout</param-name>




    		<param-value>30000</param-value>




    	</context-param>




    




    	<session-config>




    		<session-timeout>2</session-timeout>




    	</session-config>




    




    	<!--start Spring MVC -->




    	<servlet>




    		<servlet-name>mvc-dispatcher</servlet-name>




    		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>




    		<load-on-startup>1</load-on-startup>




    		<async-supported>true</async-supported>




    	</servlet>




    	<servlet-mapping>




    		<servlet-name>mvc-dispatcher</servlet-name>




    		<url-pattern>/rest/*</url-pattern>




    	</servlet-mapping>




    




    	<listener>




    		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>




    	</listener>




    




    	<listener>




    		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>




    	</listener>




    




    	<context-param>




    		<param-name>contextConfigLocation</param-name>




    		<param-value>




    			/WEB-INF/mvc-dispatcher-servlet.xml,




    			/WEB-INF/spring/spring-security.xml




    		</param-value>




    	</context-param>




    	<!--end Spring MVC -->




    




    	<!-- start Spring Security -->




    	<filter>




    		<filter-name>springSecurityFilterChain</filter-name>




    		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>




    		<async-supported>true</async-supported>




    	</filter>




    	<filter-mapping>




    		<filter-name>springSecurityFilterChain</filter-name>




    		<url-pattern>/*</url-pattern>




    	</filter-mapping>




    




    	<!-- To use concurrent session support -->




    	<listener>




            <listener-class>org.springframework.security.web.session.HttpSessionEventPublisher</listener-class>




	    </listener>




    	<!--end Spring Security -->




 




        ....... and other config




 




    </web-app>






2) in mvc-dispatcher-servlet.xml:






<beans xmlns="http://www.springframework.org/schema/beans"




    	xmlns:context="http://www.springframework.org/schema/context"




    	xmlns:mvc="http://www.springframework.org/schema/mvc"




        xmlns:websocket="http://www.springframework.org/schema/websocket" 




        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"




    	xsi:schemaLocation="




            http://www.springframework.org/schema/beans




            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd




            http://www.springframework.org/schema/context




            http://www.springframework.org/schema/context/spring-context-3.0.xsd




            http://www.springframework.org/schema/mvc




            http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd




            http://www.springframework.org/schema/websocket




            http://www.springframework.org/schema/websocket/spring-websocket-4.1.xsd">




    




    	<context:component-scan base-package="org" />




    	<mvc:annotation-driven />




    




    	<bean class="org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping" />




 




        <websocket:handlers>




		     <websocket:mapping path="/myHandler" handler="springNotification" />




		     <websocket:handshake-interceptors>




		          <bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor" />




		     </websocket:handshake-interceptors>




	    </websocket:handlers>




    




         ..... and other config




 




    </beans>






3) in spring-security.xml :






 <?xml version="1.0" encoding="UTF-8"?>




    <beans:beans xmlns="http://www.springframework.org/schema/security" xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"




    	xmlns:p="http://www.springframework.org/schema/p"




    	xsi:schemaLocation="http://cxf.apache.org/configuration/beans




    		http://www.springframework.org/schema/security




    		http://www.springframework.org/schema/security/spring-security-4.0.xsd




    		http://www.springframework.org/schema/beans




    		http://www.springframework.org/schema/beans/spring-beans-4.2.xsd">




    




    	<http auto-config="false" entry-point-ref="authenticationEntryPoint" disable-url-rewriting="false" use-expressions="true">




    		<intercept-url pattern="/Login.jsp*" access="permitAll" />




    		<intercept-url pattern="/**" access="hasRole('USER')" />




    




    		<logout success-handler-ref="logoutSuccessHandler" logout-url="/j_spring_security_logout" />




    




    		<custom-filter ref="concurrencyFilter" position="CONCURRENT_SESSION_FILTER" />




    		<custom-filter ref="authenticationFilter" position="FORM_LOGIN_FILTER" />




    




    		<session-management session-authentication-strategy-ref="sas">




    		</session-management>




    




    		<csrf disabled="true" />




    		<headers disabled="true" />




    	</http>




    	<global-method-security pre-post-annotations="enabled" secured-annotations="enabled" proxy-target-class="true" />




    




    




    	<beans:bean id="concurrencyFilter" class="org.springframework.security.web.session.ConcurrentSessionFilter">




    		<beans:constructor-arg name="sessionRegistry" ref="sessionRegistry"></beans:constructor-arg>




    		<beans:constructor-arg name="expiredUrl" value="/Login.jsp"></beans:constructor-arg>




    	</beans:bean>




    




    	<beans:bean id="authenticationFilter" class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter" 




                           p:sessionAuthenticationStrategy-ref="sas"		




                           p:authenticationManager-ref="authenticationManager"




                           p:authenticationFailureHandler-ref="AuthenticationFailureHandler"




                           p:authenticationSuccessHandler-ref="AuthenticationSuccessHandler" />




    




    	<!-- Maintains a registry of SessionInformation instances -->




    	<beans:bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl" />




    




    	<beans:bean id="userDetailsService" class="org.***.security.CustomUserDetailsService">




    	</beans:bean>




    




    	<beans:bean id="AuthenticationSuccessHandler" class="org.***.security.CustomAuthenticationSuccessHandler">




    	</beans:bean>




    




    	<beans:bean id="LogoutSuccessHandler" class="org.***.security.CustomLogoutSuccessHandler">




    	</beans:bean>




    




    	<beans:bean id="AuthenticationFailureHandler" class="org.***.security.CustomAuthenticationFailureHandler">




    	</beans:bean>




    




    	<beans:bean id="authenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">




    		<beans:constructor-arg name="loginFormUrl" value="/Login.jsp"></beans:constructor-arg>




    	</beans:bean>




    




    	<beans:bean id="sas" class="org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy">




    		<beans:constructor-arg>




    			<beans:list>




    				<beans:bean class="org.springframework.security.web.authentication.session.ConcurrentSessionControlAuthenticationStrategy">




    					<beans:constructor-arg ref="sessionRegistry" />




    					<beans:property name="maximumSessions" value="1" />




    					<beans:property name="exceptionIfMaximumExceeded" value="true" />




    				</beans:bean>




    				<beans:bean class="org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy">




    				</beans:bean>




    				<beans:bean class="org.springframework.security.web.authentication.session.RegisterSessionAuthenticationStrategy">




    					<beans:constructor-arg ref="sessionRegistry" />




    				</beans:bean>




    			</beans:list>




    		</beans:constructor-arg>




    	</beans:bean>




    




    	<authentication-manager alias="authenticationManager">




    		<authentication-provider user-service-ref="userDetailsService">




    			<password-encoder hash="sha" />




    		</authentication-provider>




    	</authentication-manager>




    </beans:beans>




 






4) SpringNotification Class (my websocket Endpoint) :






  @Component("springNotification")




    public class SpringNotification extends TextWebSocketHandler {




    




    	@Override




    	public void afterConnectionEstablished(WebSocketSession session) throws Exception {




    		System.out.println("spring websocket is open");




    		super.afterConnectionEstablished(session);




    	}




    




    	@Override




    	public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {




    		System.out.println("spring websocket is closed");




    		super.afterConnectionClosed(session, status);




    	}




    




    	@Override




    	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {




    		// TODO Auto-generated method stub




    		super.handleMessage(session, message);




    	}




    }




 






i think maybe `HttpSessionEventPublisher` and `SessionRegistryImpl` could not sense to call sessionDestroyed method..!
with this configuration when one user login to application, in weblogic console into Session Monitoring of application i see one session created. when user establish websocket connection , in Session Monitoring , one Column of session that named TimeLastAccessed change value of that, then after handshaking , in 30 sec later websocket connection closed (that is true) but , HttpSession timeout is not working in 1 min and 30 sec later...!
if i don't creating connection with websocket everything is ok and `HttpSessionEventPublisher` and `SessionRegistryImpl` work good.
can any one tell what is my problem?