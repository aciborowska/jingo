Since VirtualFilterChain.resetWrapper breaks on the first FirewalledRequest it doesn't handle nested FilterChainProxy's (i.e. new RequestWrapper(new RequestWrapper(originalRequest)) ). My current thought on fixing this is to pass in the actual FirewalledRequest into the constructor of the VirtualFilterChain and call reset on it. This would ensure the correct one gets called. It also eliminates the need for looping.
A workaround is to place a Filter that calls the following reset method as the first filter for forwarded requests.
public void doFilter(ServletRequest request, ServletResponse response) throws IOException, ServletException {
  while (request instanceof ServletRequestWrapper) {
    if (request instanceof FirewalledRequest) 
{
      ((FirewalledRequest)request).reset();
    }
    request = ((ServletRequestWrapper)request).getRequest();
  }
}
Example Mapping 
    <filter-mapping>
        <filter-name>fixSSFilter</filter-name>
        <url-pattern>/*</url-pattern>
        <dispatcher>FORWARD</dispatcher>
    </filter-mapping>