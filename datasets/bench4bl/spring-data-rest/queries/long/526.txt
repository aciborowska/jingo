I have a working spring-data-rest project with the following maven dependencies:






<dependency>




	<groupId>org.springframework.data</groupId>




	<artifactId>spring-data-commons</artifactId>




	<version>1.9.0.RELEASE</version>




</dependency>




<dependency>




	<groupId>org.springframework.data</groupId>




	<artifactId>spring-data-jpa</artifactId>




	<version>1.7.0.RELEASE</version>




</dependency>




<dependency>




	<groupId>org.springframework.data</groupId>




	<artifactId>spring-data-rest-webmvc</artifactId>




	<version>2.2.1.RELEASE</version>




</dependency>




<dependency>




	<groupId>org.springframework.data</groupId>




	<artifactId>spring-data-rest-core</artifactId>




	<version>2.2.1.RELEASE</version>




</dependency>






I decided to upgrade spring-data-jpa to the latest 1.8.0.RELEASE version, which required that I also upgrade spring-data-commons to 1.10.0.RELEASE.
Doing just that, some errors started to show up in the application. PUT 'ing or PATCH 'ing entities began failing with the following exceptions

With PUT operations:







curl -X PUT "http://localhost:8090/campaign-bo-api/api/foos/2175" -d '{"status": {"id": 3}}' -H "Content-Type: application/json"




{"cause":null,"message":"Can not set java.lang.Long field ar.com.contenta.campaign.model.Campaign.id to java.lang.String"}







With PATCH operations:







curl -X PATCH "http://localhost:8090/campaign-bo-api/api/campaigns/2175" -d '{"status": {"id": 3}}' -H "Content-Type: application/json"




 




org.springframework.orm.jpa.JpaSystemException: identifier of an instance of ar.com.contenta.campaign.model.Status was altered from 1 to 3; nested exception is org.hibernate.HibernateException: identifier of an instance of ar.com.contenta.campaign.model.Status was altered from 1 to 3






Here, what I'm trying to do is changing the status, which is an inline attribute, of a Foo instance.
The model is very simple:






Foo.java






@Entity




@Table(name = "campaign")




public class Foo {




 




	@Id




	@GeneratedValue(strategy = GenerationType.IDENTITY)




	private Long id;




 




	@ManyToOne(optional = false)




	@JoinColumn(name = "status_id", nullable = false)




	@RestResource(exported = false)




	private Status status;




 




	// getters and setters omitted




}












Status.java






@Entity




@Table(name = "status")




public class Status {




	@Id




	private Integer id;




	private String description;




 




	// getters and setters omitted




}






At first, I thought that the version of spring-data-rest I was using was incompatible with the latest spring-data-jpa, so I upgraded those dependencies as well to 2.3.0.RELEASE. Things got worse. Now, both PUT and PATCH threw the same JpaSystemException shown above.
Needless to say, if I revert every version to what I originally had, everything works as expected.
Not sure if there were some changes made to the way the framework is configured or if there has been any API change that I need to address. Perhaps, this is not a bug in spring-data-rest, but in spring-data-jpa. Or not a bug at all.
Any comments?