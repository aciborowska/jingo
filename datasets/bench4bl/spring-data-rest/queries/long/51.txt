In a existing Spring MVC application, I'd like to prefix all my exported repositories with a "/api/crud" prefix.
I've overridden the standard REST configuration as:
import br.com.fromtis.fidc.report.rest.controller.CustomJsonSchemaController;
import br.com.fromtis.fidc.report.rest.controller.CustomRepositoryRestController;
import org.springframework.context.annotation.Bean;
import org.springframework.data.rest.webmvc.RepositoryRestMvcConfiguration;
public class CustomRepositoryRestMvcConfiguration extends RepositoryRestMvcConfiguration {
    @Bean
    @Override
    public CustomRepositoryRestController repositoryRestController() throws Exception 
{
        return new CustomRepositoryRestController();
    }

    @Bean
    @Override
    public CustomJsonSchemaController jsonSchemaController() 
{
        return new CustomJsonSchemaController();
    }
}
And then created controllers like this:
import org.springframework.data.rest.webmvc.RepositoryRestController;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
@RequestMapping(value = "/api/crud", method = RequestMethod.GET)
public class CustomRepositoryRestController extends RepositoryRestController {
}
and also
import org.springframework.data.rest.webmvc.json.JsonSchemaController;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
@RequestMapping(value = "/api/crud", method = RequestMethod.GET)
public class CustomJsonSchemaController extends JsonSchemaController {
}
I am aware of the "baseUri" property in "RepositoryRestConfig", but the server URL and port is unknown.
Using the above configuration, I have my repositories exposed.  Then Spring MVC says that there are ambiguous mappings.
java.lang.IllegalStateException: Ambiguous handler methods mapped for HTTP path 'http://localhost:8080/webservices/api/crud/pessoaDao/1': 
{public org.springframework.http.ResponseEntity org.springframework.data.rest.webmvc.RepositoryRestController.entity(org.springframework.http.server.ServletServerHttpRequest,java.net.URI,java.lang.String,java.lang.String) throws java.io.IOException, public org.springframework.http.ResponseEntity org.springframework.data.rest.webmvc.RepositoryRestController.createOrUpdate(org.springframework.http.server.ServletServerHttpRequest,java.net.URI,java.lang.String,java.lang.String) throws java.io.IOException,java.lang.IllegalAccessException,java.lang.InstantiationException}
    org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(AbstractHandlerMethodMapping.java:262)
    org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:212)
    org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:1)
    org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:288)
    org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1063)
    org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1048)
    org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:886)
    org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:852)
    org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)
    org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)
    javax.servlet.http.HttpServlet.service(HttpServlet.java:621)
    javax.servlet.http.HttpServlet.service(HttpServlet.java:722)
        ...