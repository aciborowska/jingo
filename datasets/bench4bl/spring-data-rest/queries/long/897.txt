Hello,
I have the following JPA entity which I want to expose via rest:






 




@Entity




public class ProductEntity {




 




 




    @ElementCollection(targetClass = LobValue.class)




    @CollectionTable(name = "s_name_lv", joinColumns = @JoinColumn(name = "s_pk"))




    @MapKeyColumn(name = "locale")




    private Map<String, LobValue> s;




    




    //getters/setters




 




}












where the LobValue is an embeddable:






 




@Embeddable




@Access(AccessType.FIELD)




public class LobValue {




 




    private String s;




 




    public String getS() {




        return s;




    }




 




    public void setS(String s) {




        this.s = s;




    }




}












However when I try to access http://localhost:8080/rest/productEntities from the browser I get the following exception:






Caused by: org.hibernate.LazyInitializationException: failed to lazily initialize a collection, could not initialize proxy - no Session




	at org.hibernate.collection.internal.AbstractPersistentCollection.throwLazyInitializationException(AbstractPersistentCollection.java:579)




	at org.hibernate.collection.internal.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:203)




	at org.hibernate.collection.internal.AbstractPersistentCollection.initialize(AbstractPersistentCollection.java:558)




	at org.hibernate.collection.internal.PersistentMap.put(PersistentMap.java:163)




	at org.springframework.data.rest.webmvc.json.PersistentEntityJackson2Module$NestedEntitySerializer.serialize(PersistentEntityJackson2Module.java:362)




	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:693)




	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:690)




	... 140 more







which happens when the PersistentEntityJackson2Module tries to serialize the json.
This code works perfectly fine with Gosling-SR4 but the exception happens with Hopper or Ingals.
Here's a sample repository that reproduces this behavioud:
http://github.com/ptahchiev/demo-rest-problem
Just start the project with mvn spring-boot:run and then navigate to http://localhost:8080/rest/productEntities.
P.S. I mark this with blocker because it blocks me to update to Hopper or Ingalls.