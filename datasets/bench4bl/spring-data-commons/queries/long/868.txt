Presently, any Spring Data module (e.g. Spring Data GemFire) that supports and extends Spring Data Commons' Repository abstraction and specifically provides data store support for Repository query methods will be forced to run on a Java 8 runtime.
Due to the recent feature support in SD Commons for Java 8's Stream class as a query method return type along with Java's class loading mechanics and class validation at load time, the presence of Java 8 types in the SD Commons' ResultProcessor (and more specifically, here) requires a Java 8 runtime to load the class.
Typically store support in a SD module for the SD Commons' Repository abstraction query methods extend the SD Commons' QueryMethod abstract class (e.g. GemfireQueryMethod).  When the SD Repository infrastructure is initialized by the Spring container on startup, instances of the QueryMethod class are created for any application specific Repository interface extensions on the CLASSPATH during the Repository component scan that define query methods.  As a result, when the QueryMethod instances are created, and the QueryMethod constructor is invoked, the instantiation of the ResultProcessor leads to a NoClassDefFoundError/ClassNotFoundException when running an application on JRE less than 1.8 (e.g. 1.7 or earlier).