ProjectingMethodInterceptor.getProjection(Object, Class<?>) assumes the first param to be non-null, but it may be null if there is a Map with a null value, e.g. a Collections.createSingletonMap("key", null).
That means that returning such map from a @Projection, e.g.:






public interface MyProjection {




    Map<String, Object> getData();




}







results in an exception.
A kind of a workaround is to remove nulls from a projected map, e.g.:






public interface MyProjection {




    @Value("#{T(...).mapWithoutNulls(target.getData())}")




    Map<String, Object> getData();




}




 




...




 




public static <K, V> Map<K, V> mapWithoutNulls(Map<K, V> map) {




    return map.entrySet().stream()




            .filter(entry -> entry.getValue() != null)




            .collect(Collectors.toMap(




                    Map.Entry::getKey,




                    Map.Entry::getValue));




}






