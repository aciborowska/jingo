Commit 8d2933f1091230cf22aef9ce41aa7851be49607d caused the Spring Boot to fail with the following exception: 






java.lang.NoClassDefFoundError: com/mysema/query/types/EntityPath




    at java.lang.Class.getDeclaredMethods0(Native Method)




    at java.lang.Class.privateGetDeclaredMethods(Class.java:2688)




    at java.lang.Class.getDeclaredMethods(Class.java:1962)




    at org.springframework.util.ReflectionUtils.getDeclaredMethods(ReflectionUtils.java:606)




    at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:518)




    at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:504)




    at org.springframework.util.ReflectionUtils.getUniqueDeclaredMethods(ReflectionUtils.java:564)




    at org.springframework.context.event.EventListenerMethodProcessor.processBean(EventListenerMethodProcessor.java:106)




    at org.springframework.context.event.EventListenerMethodProcessor.afterSingletonsInstantiated(EventListenerMethodProcessor.java:92)




    at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:792)




    at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:834)




    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:537)




    at org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfigurationTests.load(RepositoryRestMvcAutoConfigurationTests.java:120)




    at org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfigurationTests.testDefaultRepositoryConfiguration(RepositoryRestMvcAutoConfigurationTests.java:67)




    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)




    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)




    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)




    at java.lang.reflect.Method.invoke(Method.java:483)




    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)




    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)




    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)




    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)




    at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)




    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)




    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)




    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)




    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)




    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)




    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)




    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)




    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)




    at org.junit.runners.ParentRunner.run(ParentRunner.java:363)




    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)




    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)




    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)




    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)




    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)




    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)




Caused by: java.lang.ClassNotFoundException: com.mysema.query.types.EntityPath




    at java.net.URLClassLoader$1.run(URLClassLoader.java:372)




    at java.net.URLClassLoader$1.run(URLClassLoader.java:361)




    at java.security.AccessController.doPrivileged(Native Method)




    at java.net.URLClassLoader.findClass(URLClassLoader.java:360)




    at java.lang.ClassLoader.loadClass(ClassLoader.java:424)




    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)




    at java.lang.ClassLoader.loadClass(ClassLoader.java:357)




    ... 38 more






The root cause seems to be that SpringDataWebConfiguration now always registers a querydslBindingsFactory bean. This bean is scanned by Spring 4.2's EventListenerMethodProcessor which triggers the exception.
One possible fix would be to only register QueryDSL beans if it is on the classpath (perhaps by using an ImportBeanDefinitionRegistrar). A fix could also go into Spring but this won't be ready before we want to release Spring Boot 1.3.M3