Working with custom implementations can lead to uninitialized access to the repository factory causing a NullPointerException in RepositoryFactoryBeanSupport.  The reason is the following: assume we have two bean definitions, one for the factory, and one for the custom implementation class. The factory bean definition has a reference to the custom implementation. Now further assume the custom implementation introduces a reference to the bean the factory creates as follows:






 




interface PersonRepositoryCustom { … }




 




interface PersonRepository implements PersonRepositoryCustom, Repository<Person, Long> { … }




 




class PersonRepositoryImpl implements PersonRepositoryCustom {




 




  @Autowired




  PersonRepository repository;




}






We effectively deal with a cyclic dependency here. Now there are essentially two options of ordering the instantiation. If the contain starts with the factory bean definition it discovers the reference to the custom implementation definition. The instance gets created and the autowiring kicks in, discovering the factory being in creation and now eagerly invokes getObject() as it needs the actual PersonRepository to inject it without the factory actually populated with the necessary additional properties.
If we start the other way round things work out nicely. The implementation is discovered first, an instance is created, we discover the dependency to the factory. It get's instantiated and the property value population now uses the implementation instance in creation.
We can enforce the latter orde by explicitly adding a depends-on wiring from the factory to the custom implementation. It's still weird that this is not automatically discovered from the plain reference of the factory to the custom implementation which is already in place.