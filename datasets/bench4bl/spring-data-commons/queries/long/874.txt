Unwrapping an empty Scala Option causes a NullPointerException. The passed argument is a function which is accessed during the orNull(â€¦) call.
A solution would look like:






Option.empty().getOrElse(new AbstractFunction0<Object>() {




			@Override




			public Object apply() {




				return null;




			}




		});







Exception:






java.lang.NullPointerException




	at scala.Option$$anonfun$orNull$1.apply(Option.scala:132)




	at scala.Option.getOrElse(Option.scala:121)




	at scala.Option.orNull(Option.scala:132)




	at org.springframework.data.repository.util.QueryExecutionConverters$ScalOptionUnwrapper.convert(QueryExecutionConverters.java:431)




	at org.springframework.data.repository.util.QueryExecutionConverters.unwrap(QueryExecutionConverters.java:154)




	at org.springframework.data.repository.query.ParametersParameterAccessor.<init>(ParametersParameterAccessor.java:55)







Repository:






public interface PersonRepository extends CrudRepository<Person, Long> {




	List<Person> findByFirstname(Option<String> gender);




}







Invocation:






repository.findByFirstname(Option.empty());






