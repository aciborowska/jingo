Currently RepositoryInterfaceAwareBeanPostProcessor does not implement any of the Ordered interfaces Spring provides. This causes it to be in the last group of actually instantiated BeanPostProcessors. If other BeanPostProcessors are registered that have a dependency on a Spring Data repository, these references cannot be resolved correctly as the type prediction implemented in RIABPP does not kick in.
Implementing PriorityOrdered should solve this problem as none of the default BeanPostProcessors really use dependency injection or lookups of types that get repositories injected.