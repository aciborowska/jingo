I have a controller that simply inherits it's request handler methods from a base class.






@RestController




@ExposesResourceFor(AddressTypeCodeResource.class)




@RequestMapping(value = AddressTypeCodeController.REQUEST_MAPPING_PATH, produces = {"application/json"})




public class AddressTypeCodeController extends SimpleCodedItemController<AddressTypeCodeResource, UpdateSimpleCodedItemResource> {




    public static final String REQUEST_MAPPING_PATH = "/addressTypeCodes";




 




    @Autowired




    public AddressTypeCodeController(@Qualifier(AddressTypeCodeResource.NAME) ReferenceableResourceFacade<AddressTypeCodeResource, UUID> facade) {




        super(facade);




    }




}






The base class has no @RequestMapping on the class, only methods have them.






public class SimpleCodedItemController<R extends SimpleCodedItemResource, U extends UpdateSimpleCodedItemResource> {




    private ReferenceableResourceFacade<R, UUID> facade;




 




    @RequestMapping(method = RequestMethod.GET)




    public PagedResources<R> findAll(@NonNull Pageable pageable, @NonNull PagedResourcesAssembler pagedResourcesAssembler) {




        return facade.findAll(pageable, pagedResourcesAssembler);




    }






When the ControllerLinkBuilder is invoked for building the links it is trying to find the @RequestMapping annotation from the base class - and failing. The method passed into linkTo is for example SimpleCodedItemController.findAll (...)
PagedResourcesAssemblerArgumentResolver should be modified to pass on the runtime class of the targeted controller.






	@Override




	public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer,




			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {




 




		Link linkToMethod = linkBuilderFactory.linkTo(parameter.getMethod(), new Object[0]).withSelfRel();




		UriComponents fromUriString = UriComponentsBuilder.fromUriString(linkToMethod.getHref()).build();




 




		return new PagedResourcesAssembler<Object>(resolver, fromUriString);




	}






It looks that spring-web already provides the runtime class of the controller class (org.springframework.web.method.HandlerMethod.HandlerMethodParameter#getContainingClass) and that should be used rather than the class where the method was implemented.