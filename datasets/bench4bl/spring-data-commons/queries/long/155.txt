spring-data-commons-core-1.1.0.RELEASE.jar
PROBLEM:
Class AbstractConstructorEntityInstantiator line 39:
The code 
  throw new IllegalArgumentException(e.getTargetException());
Translates the OutOfMemoryError into an IllegalArgumentException.
After that the IllegalArgumentException makes it all the way up the application layers. 
As a result the Error will likely be caught and logged somewhere instead of letting it terminate the program.
Maybe this concept has been wisely chosen, and has been discussed before. I could not find 
anything about it, and consider it to be wrong.
SUGGESTED SOLUTION:
replace old:
    throw new IllegalArgumentException(e.getTargetException());
with new:
    throw translateOrThrow( (InvocationTargetException)e );
    private RuntimeException translateOrThrow(InvocationTargetException e) {
        Throwable targetEx = e.getTargetException();
        if (targetEx instanceof Error) 
{ //or VirtualMachineError
            throw (Error)targetEx;
        }
 else if (targetEx instanceof RuntimeException) 
{
            throw (RuntimeException)targetEx;
        }
 else 
{
            //either keep, but i consider it wrong
            //return new IllegalArgumentException(targetEx);
            //or better:
            return new RuntimeException(targetEx);
            //or maybe:
            //return new CustomRuntimeException(targetEx);
        }
    }
OTHER PLACES:
There are many places in spring data jdbc that look like 
  catch (Throwable ex) 
{
    logger.debug("Could not do this or that", ex);
  }

These completely swallow the out of memory situation in case it happens right there.
So if there's going to be a change then maybe it should be applied in multiple places.
