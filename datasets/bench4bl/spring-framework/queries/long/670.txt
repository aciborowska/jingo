WebSphereNativeJdbcExtractor failed to extract the native jdbc connection on websphere 5 server that is using datasource type of websphere 4.
Websphere 5 supports 2 kinds of datasource - version 5 and version 4. The version 4 datasource will be used for backward compatible. I found the above problem when trying to migrate our websphere 4.x app into websphere 5 server - we have to keep using the version 4 datasource because version 5 datasource is not supported in J2EE 1.2 mode and we don't have time to rebuild all the legacies.
I therefore modified the implementation of WebSphereNativeJdbcExtractor as following, which works in all situations.
--------------
import java.lang.reflect.Method;
import java.sql.Connection;
import java.sql.SQLException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.dao.DataAccessResourceFailureException;
import org.springframework.dao.InvalidDataAccessApiUsageException;
import org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractorAdapter;
/**

Implementation of the NativeJdbcExtractor interface for WebSphere.
Returns the underlying native Connection to application code instead
of WebSphere's wrapper implementation; unwraps the Connection for
native statements. The returned JDBC classes can then safely be cast,
e.g. to OracleConnection.
 *
<p>This NativeJdbcExtractor can be set just to <i>allow</i> working
with a WebSphere DataSource: If a given object is not a WebSphere
Connection wrapper, it will be returned as-is.
 *
<p>Supports both WebSphere 5 and WebSphere 4. Currently just tested with
IBM WebSphere 5.1.0 and 4.0.6. Thanks to Dave Keller and Victor for
figuring out how to do the unwrapping on WebSphere 5 respectively 4!
 *
@author Juergen Hoeller
@since 08.06.2004
@see com.ibm.ws.rsadapter.jdbc.WSJdbcConnection
@see com.ibm.ws.rsadapter.jdbc.WSJdbcUtil#getNativeConnection
@see com.ibm.ejs.cm.proxy.ConnectionProxy#getPhysicalConnection
 */
public class WebSphereNativeJdbcExtractor extends NativeJdbcExtractorAdapter
{

	private static final String JDBC_ADAPTER_CONNECTION_NAME_5 =
		"com.ibm.ws.rsadapter.jdbc.WSJdbcConnection";
	private static final String JDBC_ADAPTER_UTIL_NAME_5 =
		"com.ibm.ws.rsadapter.jdbc.WSJdbcUtil";
	private static final String CONNECTION_PROXY_NAME_4 =
		"com.ibm.ejs.cm.proxy.ConnectionProxy";
	protected final Log logger = LogFactory.getLog(getClass());
	private Class webSphere5ConnectionClass;
	private Class webSphere4ConnectionClass;
	private Method getNative5ConnectionMethod;
	private Method getNative4ConnectionMethod;
	/**

This constructor retrieves WebSphere JDBC adapter classes,
so we can get the underlying vendor connection using reflection.
	 */
	public WebSphereNativeJdbcExtractor()
		throws InvalidDataAccessApiUsageException
	{
		try
		Unknown macro: {			logger.debug(				"Trying WebSphere 5 Connection} 
		catch (Exception ex)
		{
			logger.debug(
				"Could not find WebSphere 5 connection pool classes",
				ex);
		}

		try
		{
			logger.debug(
				"Trying WebSphere 4 Connection: " + CONNECTION_PROXY_NAME_4);
			this.webSphere4ConnectionClass =
				getClass().getClassLoader().loadClass(CONNECTION_PROXY_NAME_4);
			this.getNative4ConnectionMethod =
				this.webSphere4ConnectionClass.getMethod(
					"getPhysicalConnection",
					(Class[]) null);
		}
		catch (Exception ex2)
		{
			logger.debug(
				"Could not find WebSphere 4 connection pool classes",
				ex2);
			throw new InvalidDataAccessApiUsageException("Could neither find WebSphere 5 nor WebSphere 4 connection pool classes");
		}
	}
	/**

Return true, as WebSphere returns wrapped Statements.
	 */
	public boolean isNativeConnectionNecessaryForNativeStatements()
	{
		return true;
	}

	/**
	 * Return true, as WebSphere returns wrapped PreparedStatements.
	 */
	public boolean isNativeConnectionNecessaryForNativePreparedStatements()
	{		return true;	}

	/**

Return true, as WebSphere returns wrapped CallableStatements.
	 */
	public boolean isNativeConnectionNecessaryForNativeCallableStatements()
	{
		return true;
	}

	/**

Retrieve the Connection via WebSphere's <code>getNativeConnection</code> method.
	 */
	protected Connection doGetNativeConnection(Connection con)
		throws SQLException
	{
		if (this.webSphere5ConnectionClass != null
			&& this.webSphere5ConnectionClass.isAssignableFrom(con.getClass()))
		{
			try
			Unknown macro: {				return (Connection) this.getNative5ConnectionMethod.invoke(					null,					new Object[] { con });			} 
			catch (Exception ex)
			{
				throw new DataAccessResourceFailureException(
					"Could not invoke WebSphere5's getNativeConnection method",
					ex);
			}
		}
		else if (
			this.webSphere4ConnectionClass != null
				&& this.webSphere4ConnectionClass.isAssignableFrom(
					con.getClass()))
Unknown macro: {			try			{
				// WebSphere 4's connectionProxy.getPhysicalConnection()
				return (Connection) this.getNative4ConnectionMethod.invoke(
					con,
					(Object[]) null);
			}			catch (Exception ex)			{
				throw new DataAccessResourceFailureException(
					"Could not invoke WebSphere4's getPhysicalConnection method",
					ex);
			}		} 

		logger.debug("It's not a websphere 4/5 connection, return as is.");
		return con;
	}
}