If an SqlFunction object is created "bean style" with the default constructor followed by calls to the appropriate setters, attempts to evaluate the function with run may lead to a ClassCastException.  The SQL expression used to produce the problem was
  SELECT COUNT FROM SOME_TABLE WHERE SOME_COL = ?
and the exception is thrown when the result is cast as an Integer.
Creating the object with a "fat" constructor works fine.  The culprit turns out to be this member variable declaration in SqlFunction:
  /** The SQL return type of the function */
  private int retType;
The variable is given the appropriate value, e.g. java.sql.Types.INTEGER in the fat constructors, but not in the default.  Furthermore, no accessors for the variable are defined.  The proposed solution is to initialize retType thusly:
  private int retType = Types.INTEGER;
Incidentally, the default constructor doesn't call setRowsExpected(1), which the other constructors do, but that is somewhat less serious.
Cheers,
SÃ¸ren Larsen