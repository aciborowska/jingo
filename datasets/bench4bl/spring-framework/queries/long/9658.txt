If a default is specified for @Value-annotated field or attribute, PropertyPlaceholderHelper.parseStringValue assigns the default property value just after the search for the property fails with the first location but before all property locations are examined. As a result, the the field ends up with the default value instead of the value defined in a properties file.
How to reproduce:
 <bean id="propertyConfigurer1" 
            class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
 <property name="locations">
            <list>
                <value>classpath:file1.properties</value>
		...
 <bean id="propertyConfigurer2" 
            class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
 <property name="locations">
            <list>
                <value>classpath:file2.properties</value>
		...
file1.properties: property "prop" undefined
file2.properties: 
prop=value of prop
public class PropHolder {
@Value("$
{prop:defaultValue}
")
private String propValue;
// ...
}
If propertyConfigurer1 is looked up first, the property "prop" is not found in "file1.properties" file, resulting in immediately assigning the default "defaultValue" to the propValue instance variable. Spring then looks up propertyConfigurer2. However, it's not going to read the prop value which is defined in its location(s), because it already has the default value and uses it as a key for further search.
It looks like the following resolution order for @Value is more sane:
1. look up all locations in all property placeholders
2. use the default specified in the annotation only when look-up in all locations fails
