JdbcTemplate.queryForObject() throws IncorrectResultSizeDataAccessException in two cases: if rows count is not 1 and when columns count is not 1.
Wrong number of rows and columns are completely different situations. Example:
Wrong number of columns means that there is error in query, or in some DB structure. It is server error. This exception should not be handled, maybe user should see error 500: Internal Server Error, please contact administrator, bla-bla-bla.
No columns is normal situation. For example, user not found, or document not found. In this case site user should see expected page, with some message marked in red.
The one place where IncorrectResultSizeDataAccessException is used for wrong number of columns is SingleColumnRowMapper. I think SingleColumnRowMapper should throw other subclass of DataRetrievalFailureException, ex. WrongColumnsCountException.
Also because of similar reasons there should be subclass EmptyResultException of class IncorrectResultSizeException although the method IncorrectResultSizeException.getActualSize() exists. So if I write
try {
    return getJdbcTemplate().queryForObject("select path from documents where docnumber = 15");
} catch (EmptyResultException e) {
    // here I want to be sure that document not exists, and there is no error in query, and no error in data when two documents have id 15.
    throw new DocumentNotExistsException();
}
This is typical situation of using queryForObject().
However this feature request is not important and maybe even is not to be implemented. In the most cases it's enough to catch IncorrectResultSizeException. Also both situations can be easily handled in my code by subclassing JdbcTemplate and SingleColumnRowMapper.