Application deployment fails with the following stack trace:
ERROR [resin-36] (ContextLoader.java:205) - Context initialization failed
java.lang.NullPointerException
        at org.springframework.core.io.support.PathMatchingResourcePatternResolver.doFindPathMatchingJarResources(PathMatchingResourcePatternResolver.java:390)
        at org.springframework.core.io.support.PathMatchingResourcePatternResolver.findPathMatchingResources(PathMatchingResourcePatternResolver.java:318)
        at org.springframework.core.io.support.PathMatchingResourcePatternResolver.getResources(PathMatchingResourcePatternResolver.java:242)
        at org.springframework.context.support.AbstractApplicationContext.getResources(AbstractApplicationContext.java:770)
        at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:141)
        at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:123)
        at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:91)
        at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:94)
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:292)
        at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:156)
        at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:246)
        at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:184)
        at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:49)
        at com.caucho.server.webapp.Application.start(Application.java:1647)
        at com.caucho.server.deploy.DeployController.startImpl(DeployController.java:621)
        at com.caucho.server.deploy.DeployController.restartImpl(DeployController.java:584)
        at com.caucho.server.deploy.StartAutoRedeployAutoStrategy.alarm(StartAutoRedeployAutoStrategy.java:176)
        at com.caucho.server.deploy.DeployController.handleAlarm(DeployController.java:742)
        at com.caucho.util.Alarm.handleAlarm(Alarm.java:339)
        at com.caucho.util.Alarm.run(Alarm.java:309)
        at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:516)
        at com.caucho.util.ThreadPool.run(ThreadPool.java:442)
        at java.lang.Thread.run(Thread.java:595)
The code looks like (exception on marked line):
	protected Set doFindPathMatchingJarResources(Resource rootDirResource, String subPattern) throws IOException {
		URLConnection con = rootDirResource.getURL().openConnection();
		JarFile jarFile = null;
		String jarFileUrl = null;
		String rootEntryPath = null;
		if (con instanceof JarURLConnection) 
{
			// Should usually be the case for traditional JAR files.
			JarURLConnection jarCon = (JarURLConnection) con;
			jarFile = jarCon.getJarFile();
			jarFileUrl = jarCon.getJarFileURL().toExternalForm();
>>>>>		rootEntryPath = jarCon.getJarEntry().getName();
		}
		else {
			// No JarURLConnection -> need to resort to URL file parsing.
JavaDoc for JarURLConnection.getJarEntry() says:
Returns:
    the JAR entry object for this connection, or null if the JAR URL for this connection points to a JAR file.
Connecting with a debugger reveals that the classpath component that is being inspected when exception is thrown indeed is a jar file, namely <RESIN_HOME>/lib/activation.jar!/
Changing the marked line to the folowing code (a kludge, I know) fixes the problem:
                        if (jarCon.getJarEntry() == null)
                                rootEntryPath = jarFileUrl + "!";
                        else
                                rootEntryPath = jarCon.getJarEntry().getName();
regards,
Marcin