I use the annotations for most transactionality, but I've got a safety check on my update* and delete* methods of anything extending my base DAO class that gives them PROPAGATION_MANDATORY so an exception will  be thrown if you get there without a transaction. Right now I do this:
 <!-- Transaction Interceptor set up to do PROPAGATION_MANDATORY on save and delere methods -->
    <bean id="matchDaoMethodsSource"
        class="org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource ">
        <description>Defines mappings between method names and transaction attributes</description>
        <property name="properties">
            <props>
                <prop key="update*">PROPAGATION_MANDATORY</prop>
                <prop key="delete*">PROPAGATION_MANDATORY</prop>
            </props>
        </property>
    </bean>
    <bean id="matchDaoMethodsTxInterceptor"
        class="org.springframework.transaction.interceptor.TransactionInterceptor">
        <description>AOP interceptor which uses the method name transaction attribute mapping defined above.</description>
        <property name="transactionManager" ref="transactionManager">
        </property>
        <property name="transactionAttributeSource" ref="matchDaoMethodsSource">
        </property>
    </bean>
    <bean id="daoClassFilter" class="org.springframework.aop.support.RootClassFilter">
        <description>Class filter which will pick up all subclasses of AbstractHibernateDao</description>
        <constructor-arg type="java.lang.Class"
                         value="com.eplus.lib.util.hibernate.GenericHibernateDao"></constructor-arg>
    </bean>
    <bean id="daoTransactionAdvisor" class=" org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor">
        <description>Advisor which pairs the dao class filter with the transaction interceptor to automatically proxy Dao classes with transactional behavior.</description>
        <constructor-arg ref="matchDaoMethodsTxInterceptor"></constructor-arg>
        <property name="classFilter" ref="daoClassFilter"></property>
    </bean>
But somewhere between 2.0 M2 and 2.0 M4 the classFilter property of the TransactionAttributeSourceAdvisor disappeared, so I this doesn't work. 