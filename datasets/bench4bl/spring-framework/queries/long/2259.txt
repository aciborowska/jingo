I was using ActiveMQ 4.0.1 wirh Spring Framework 1.2.8 - it was working just perfectly.
Lastly i upgraded my system to SF 2.0RC2 and experience java.lang.IllegalArgumentException when my application is staring on Tomcat 5.5.17.
Whole stack trace:
2006-07-08 20:08:56,877 ERROR [org.springframework.web.context.ContextLoader:205] - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'activeMQBroker' defined in class path resource [activeMQContext.xml]: Invocation of init method failed; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from class path resource [activeMQ.cfg.xml]; nested exception is java.lang.IllegalArgumentException: ClassLoader must not be null
Caused by: 
org.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from class path resource [activeMQ.cfg.xml]; nested exception is java.lang.IllegalArgumentException: ClassLoader must not be null
Caused by: 
java.lang.IllegalArgumentException: ClassLoader must not be null
	at org.springframework.util.Assert.notNull(Assert.java:113)
	at org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver.<init>(DefaultNamespaceHandlerResolver.java:82)
	at org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver.<init>(DefaultNamespaceHandlerResolver.java:74)
	at org.apache.xbean.spring.context.v2.XBeanNamespaceHandlerResolver.<init>(XBeanNamespaceHandlerResolver.java:26)
	at org.apache.xbean.spring.context.v2.XBeanXmlBeanDefinitionReader.createDefaultNamespaceHandlerResolver(XBeanXmlBeanDefinitionReader.java:81)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.createReaderContext(XmlBeanDefinitionReader.java:496)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:476)
	at org.apache.xbean.spring.context.v2.XBeanXmlBeanDefinitionReader.registerBeanDefinitions(XBeanXmlBeanDefinitionReader.java:77)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:386)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:340)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:315)
	at org.apache.xbean.spring.context.ResourceXmlApplicationContext.loadBeanDefinitions(ResourceXmlApplicationContext.java:106)
	at org.apache.xbean.spring.context.ResourceXmlApplicationContext.loadBeanDefinitions(ResourceXmlApplicationContext.java:99)
	at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:89)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:283)
	at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:65)
	at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:53)
	at org.apache.activemq.xbean.BrokerFactoryBean.afterPropertiesSet(BrokerFactoryBean.java:76)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:908)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:875)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:396)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:240)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:132)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:237)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:153)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:248)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:337)
	at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:156)
	at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:246)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:184)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:49)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3729)
	at org.apache.catalina.core.StandardContext.start(StandardContext.java:4187)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:759)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:739)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:524)
	at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:809)
	at org.apache.catalina.startup.HostConfig.deployWARs(HostConfig.java:698)
	at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:472)
	at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1122)
	at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:310)
	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)
	at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1021)
	at org.apache.catalina.core.StandardHost.start(StandardHost.java:718)
	at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1013)
	at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:442)
	at org.apache.catalina.core.StandardService.start(StandardService.java:450)
	at org.apache.catalina.core.StandardServer.start(StandardServer.java:709)
	at org.apache.catalina.startup.Catalina.start(Catalina.java:551)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:294)
	at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:432)
activeMQBroker:
	<bean id="activeMQBroker"
		class="org.apache.activemq.xbean.BrokerFactoryBean">
		<description>JMS Broker</description>
		<property name="config" value="classpath:activeMQ.cfg.xml" />
		<property name="start" value="true" />
	</bean>
activeMQ.cfg.xml:
<?xml version="1.0" encoding="UTF-8"?>
<!-- Communications suite - http://sourceforge.net/projects/comsuite -->
<beans xmlns="http://activemq.org/config/1.0">
	<!-- 
		WARNING:
		Remeber to add <code>-Dorg.apache.activeio.journal.active.DisableLocking=true</code> to JVM startup options.
		See: http://issues.apache.org/activemq/browse/AMQ-704 for further details on the bug it resolve.
	-->
	<broker useJmx="false">
		<!--  Use the following to set the broker memory limit (in bytes)
			<memoryManager>  
			<usageManager id="memory-manager" limit="1048576"/>
			</memoryManager>
		-->
		<persistenceAdapter>
			<journaledJDBC useJournal="true" journalLogFiles="5"
				dataDirectory="../var/CS_activeMQ40/journal"
 				dataSource="#postgresql-ds" adapter="#postgresql-adapter" />
		</persistenceAdapter>
		<transportConnectors>
			<transportConnector name="default"
				uri="tcp://localhost:61616?connectionTimeout=0" discoveryUri="multicast://default" />
		</transportConnectors>
		<networkConnectors>
			<!-- by default just auto discover the other brokers -->
			<networkConnector name="default" uri="multicast://default" />
		</networkConnectors>
	</broker>
<!-- PostgreSQL DataSource Configurations: -->
 	<bean id="postgresql-adapter"
		class="org.apache.activemq.store.jdbc.adapter.PostgresqlJDBCAdapter" />
	<bean id="postgresql-ds"
		class="org.postgresql.ds.PGPoolingDataSource"
		>
		<property name="serverName" value="localhost" />
		<property name="databaseName" value="csjms" />
		<property name="portNumber" value="5432" />
		<property name="user" value="cs" />
		<property name="password" value="cs" />
		<property name="dataSourceName" value="CSActiveMQ40PostgreSQL" />
		<property name="initialConnections" value="1" />
		<property name="maxConnections" value="10" />
	</bean>
</beans>