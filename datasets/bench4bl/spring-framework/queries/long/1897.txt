BeanWrapperImpl.doTypeConversionIfNecessary is converting null to be a single array element with a null in it. From the simple test case below:
    beanWrapper.setPropertyValue("data", null);
    assertEquals(null, beanWrapper.getPropertyValue("data"));
In the branch of that method that mutates the value when setting the property, there is the comment "A plain value: convert it to an array with a single component." so it's being done on purpose, but it's a very bad thing when you set a property to a value and then it is not equal to that value.
Test case:
  public static class MyClass {
    private MyDataClass[] data;
    public MyDataClass[] getData() 
{
      return data;
    }

    public void setData(MyDataClass[] data) 
{
      this.data = data;
    }
  }
  public static class MyDataClass {
  }
  public void testBeanWrapper() throws Exception 
{
    MyClass myClass = new MyClass();
    BeanWrapperImpl beanWrapper = new BeanWrapperImpl(myClass);
    beanWrapper.setPropertyValue("data", null);
    assertEquals(null, beanWrapper.getPropertyValue("data"));
    assertEquals(null, myClass.getData());  // both fail
  }