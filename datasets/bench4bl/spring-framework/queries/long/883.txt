I think I've found a spring 1.2rc1 bug in the method replacement feature. The bug occurs in some cases when using type matching on overloaded 
methods. The problem lies in the code that creates the cglib proxy when the bean is initialized: this code uses a simple algorithm in
order to decide if the method is overloaded: if it has already met it, then it considers the method overloaded. The problem is that 
upon the first time the method is met, it is always treated as if it was not overloaded, so - even if the first method is not the one that
is intended to be treated by the following typed method replacement - at bean creation it is considered as to be replaced (because
it is not seen as overloaded, and then the type matching is not done). When executing the method that should not be replaced, nevertheless,
the cglib created proxy thinks the method is replaced, passes it to the replacer, but the matching code does reject the method because at 
this point type matching is performed: no MethodReplacement is returned and a NullPointerException returns.
<code>
java.lang.NullPointerException
	at org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$CglibSubclassCreator$ReplaceOverrideMethodInterceptor.intercept(CglibSubclassingInstantiationStrategy.java:168)
	at it.stratosfera.java.spring.A$$EnhancerByCGLIB$$52d52fd4.a(<generated>)
	at it.stratosfera.java.spring.TestSpringBug.testSpringBug(TestSpringBug.java:21)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at com.intellij.rt.execution.junit2.JUnitStarter.main(JUnitStarter.java:31)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:86)
</code>
The attached test case shows the bug.