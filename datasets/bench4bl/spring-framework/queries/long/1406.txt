Binding errors aren't shown when you use single quotes around map key values.  All other binding functionality works, however.
Relevant JSP Snippet:
<spring:bind path="entries['somevalue']"> <%-- Note the single quotes. --%>
    <input type="text" name="$
{status.expression}
" value="$
{status.value}
" />
    <c:if test="$
{status.error}">(error)</c:if>
</spring:bind>

Relevant Java Controller Snippet:

protected void initBinder(RequestContext context, DataBinder binder) {
    // Force all entriees to be converted to type Long when bound.
    binder.registerCustomEditor(Long.class, "entries", new CustomNumberEditor(Long.class, false));
}

Relevant Java Command:

public class Command {
    private SortedMap<String, Long> entries = new TreeMap<String, Long>(String.CASE_INSENSITIVE_ORDER);
    // Getters, setters and other method removed
}

Behavior:

If you submit the form with empty values, this causes a binding error for each empty text field, as it should.  If the single quotes are in place around the key name, ${status.error}
 will be false.  If the quotes are removed, then $
{status.error}
 will be true.  All other aspects of binding seem to work regardless of the single quotes though.
It's important to note that if there is an associated Validator, it too must add field errors using the exact name as bound in the JSP.  If the JSP binds to entries['foomatic'] then the Validator must use errors.rejectValue("entries['foomatic']", ...).
It seems like the single quotes should not be considered part of the field name.  They're there only to demark the key name, they're not part of the field name itself.  The usefullness of the single quotes is questionable, but would be useful is SPR-1274 is implemented.  Though you could argue that regardless of SPR-1274, the single quotes should not have an effect on binding or validation since they're ingored in some respects already (as the existing unit tests reflect).
Regards,
Christian