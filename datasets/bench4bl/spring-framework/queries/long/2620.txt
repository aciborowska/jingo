We have a situation of needing to dynamically create  mbeans for log files.  I have created a class that takes a a property an instance of the MBeanExportOperations interface (i.e. a MBeanExporter bean), so that I can reuse its functionality.  Plus when the web app is shut down it will automatically remove the mbeans.  The implementation of the MBeanExportOperations interface
	public void registerManagedResource(Object managedResource, ObjectName objectName) throws MBeanExportException {
		Object mbean = createAndConfigureMBean(managedResource, managedResource.getClass().getName());
		try 
{
			doRegister(mbean, objectName);
		}
		catch (JMException ex) 
{
			throw new UnableToRegisterMBeanException(
					"Unable to register MBean [" + managedResource + "] with object name [" + objectName + "]", ex);
		}
	}
does not use the following check that is used in the registerBeanInstance(Object bean, String beanKey).  This is a blocking issue for use and our mbeans are completely usesless.
		if (JmxUtils.isMBean(bean.getClass())) {
			if (logger.isDebugEnabled()) 
{
				logger.debug("Located MBean under key [" + beanKey + "]: registering with JMX server");
			}
			return registerMBean(bean, beanKey);
		}
