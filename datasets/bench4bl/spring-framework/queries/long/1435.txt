I am having problems with (re)deploying my EAR appication with WebLogic 8.1 SP4 and SP5 in both Windows XP and Linux environment as sometimes there are exceptions while reading the contents of the WAR.
I may get different exceptions depending on the application I deploy, though it's always related to reading a file in the WAR. Exception says that the file in the WAR is either missing or corrupt, though it's not true. The hardest part is that usually my EAR gets deployed while sometimes I must restart WebLogic to do do that â€“ there's almost no rule when will it happen.
It was hard for me to track down the cause, but I managed to create a simple test-case that most likely produces the effect while trying to read a configuration XML file. It says that the XML file is invalid, though it's quite there and all XML files are saved in UTF-8.
I also tested creating Hibernate configuration similar to the test-case but without Spring. However, I didn't get this problem any more.
Stacktrace I receive on WebLogic's console is following:
org.dom4j.DocumentException: invalid stored block lengths Nested exception: invalid stored block lengths
        at org.dom4j.io.SAXReader.read(SAXReader.java:484)
        at org.hibernate.cfg.Configuration.addInputStream(Configuration.java:398)
        at org.springframework.orm.hibernate3.LocalSessionFactoryBean.afterPropertiesSet(LocalSessionFactoryBean.java:631)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1058)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:363)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:226)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:147)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:269)
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:318)
        at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:134)
        at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:230)
        at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:156)
        at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:48)
        at weblogic.servlet.internal.WebAppServletContext$FireContextListenerAction.run(WebAppServletContext.java:7044)
        at weblogic.security.acl.internal.AuthenticatedSubject.doAs(AuthenticatedSubject.java:321)
        at weblogic.security.service.SecurityManager.runAs(SecurityManager.java:121)
        at weblogic.servlet.internal.WebAppServletContext.notifyCreated(WebAppServletContext.java:1753)
        at weblogic.servlet.internal.WebAppServletContext.preloadResources(WebAppServletContext.java:3352)
        at weblogic.servlet.internal.WebAppServletContext.setStarted(WebAppServletContext.java:6208)
        at weblogic.servlet.internal.WebAppModule.start(WebAppModule.java:864)
        at weblogic.j2ee.J2EEApplicationContainer.start(J2EEApplicationContainer.java:2134)
        at weblogic.j2ee.J2EEApplicationContainer.activate(J2EEApplicationContainer.java:2175)
        at weblogic.management.deploy.slave.SlaveDeployer$ComponentActivateTask.activateContainer(SlaveDeployer.java:2520)
        at weblogic.management.deploy.slave.SlaveDeployer$ActivateTask.doCommit(SlaveDeployer.java:2438)
        at weblogic.management.deploy.slave.SlaveDeployer$Task.commit(SlaveDeployer.java:2155)
        at weblogic.management.deploy.slave.SlaveDeployer$Task.checkAutoCommit(SlaveDeployer.java:2254)
        at weblogic.management.deploy.slave.SlaveDeployer$Task.prepare(SlaveDeployer.java:2149)
        at weblogic.management.deploy.slave.SlaveDeployer$ActivateTask.prepare(SlaveDeployer.java:2401)
        at weblogic.management.deploy.slave.SlaveDeployer.processPrepareTask(SlaveDeployer.java:883)
        at weblogic.management.deploy.slave.SlaveDeployer.prepareDelta(SlaveDeployer.java:591)
        at weblogic.management.deploy.slave.SlaveDeployer.prepareUpdate(SlaveDeployer.java:500)
        at weblogic.drs.internal.SlaveCallbackHandler$1.execute(SlaveCallbackHandler.java:25)
        at weblogic.kernel.ExecuteThread.execute(ExecuteThread.java:224)
        at weblogic.kernel.ExecuteThread.run(ExecuteThread.java:183)
Nested exception:
java.util.zip.ZipException: invalid stored block lengths
        at java.util.zip.InflaterInputStream.read(InflaterInputStream.java:140)
        at java.util.zip.InflaterInputStream.read(InflaterInputStream.java:105)
        at java.io.FilterInputStream.read(FilterInputStream.java:66)
        at weblogic.apache.xerces.impl.XMLEntityManager$RewindableInputStream.read(XMLEntityManager.java:3494)
        at weblogic.apache.xerces.impl.XMLEntityManager.startEntity(XMLEntityManager.java:847)
        at weblogic.apache.xerces.impl.XMLEntityManager.startDocumentEntity(XMLEntityManager.java:782)
        at weblogic.apache.xerces.impl.XMLDocumentScannerImpl.setInputSource(XMLDocumentScannerImpl.java:260)
        at weblogic.apache.xerces.parsers.DTDConfiguration.parse(DTDConfiguration.java:499)
        at weblogic.apache.xerces.parsers.DTDConfiguration.parse(DTDConfiguration.java:581)
        at weblogic.apache.xerces.parsers.XMLParser.parse(XMLParser.java:152)
        at weblogic.apache.xerces.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1175)
        at weblogic.xml.jaxp.WebLogicXMLReader.parse(WebLogicXMLReader.java:135)
        at weblogic.xml.jaxp.RegistryXMLReader.parse(RegistryXMLReader.java:152)
        at org.dom4j.io.SAXReader.read(SAXReader.java:465)
        at org.hibernate.cfg.Configuration.addInputStream(Configuration.java:398)
        at org.springframework.orm.hibernate3.LocalSessionFactoryBean.afterPropertiesSet(LocalSessionFactoryBean.java:631)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1058)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:363)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:226)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:147)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:269)
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:318)
        at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:134)
        at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:230)
        at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:156)
        at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:48)
        at weblogic.servlet.internal.WebAppServletContext$FireContextListenerAction.run(WebAppServletContext.java:7044)
        at weblogic.security.acl.internal.AuthenticatedSubject.doAs(AuthenticatedSubject.java:321)
        at weblogic.security.service.SecurityManager.runAs(SecurityManager.java:121)
        at weblogic.servlet.internal.WebAppServletContext.notifyCreated(WebAppServletContext.java:1753)
        at weblogic.servlet.internal.WebAppServletContext.preloadResources(WebAppServletContext.java:3352)
        at weblogic.servlet.internal.WebAppServletContext.setStarted(WebAppServletContext.java:6208)
        at weblogic.servlet.internal.WebAppModule.start(WebAppModule.java:864)
        at weblogic.j2ee.J2EEApplicationContainer.start(J2EEApplicationContainer.java:2134)
        at weblogic.j2ee.J2EEApplicationContainer.activate(J2EEApplicationContainer.java:2175)
        at weblogic.management.deploy.slave.SlaveDeployer$ComponentActivateTask.activateContainer(SlaveDeployer.java:2520)
        at weblogic.management.deploy.slave.SlaveDeployer$ActivateTask.doCommit(SlaveDeployer.java:2438)
        at weblogic.management.deploy.slave.SlaveDeployer$Task.commit(SlaveDeployer.java:2155)
        at weblogic.management.deploy.slave.SlaveDeployer$Task.checkAutoCommit(SlaveDeployer.java:2254)
        at weblogic.management.deploy.slave.SlaveDeployer$Task.prepare(SlaveDeployer.java:2149)
        at weblogic.management.deploy.slave.SlaveDeployer$ActivateTask.prepare(SlaveDeployer.java:2401)
        at weblogic.management.deploy.slave.SlaveDeployer.processPrepareTask(SlaveDeployer.java:883)
        at weblogic.management.deploy.slave.SlaveDeployer.prepareDelta(SlaveDeployer.java:591)
        at weblogic.management.deploy.slave.SlaveDeployer.prepareUpdate(SlaveDeployer.java:500)
        at weblogic.drs.internal.SlaveCallbackHandler$1.execute(SlaveCallbackHandler.java:25)
        at weblogic.kernel.ExecuteThread.execute(ExecuteThread.java:224)
        at weblogic.kernel.ExecuteThread.run(ExecuteThread.java:183)
From the log I can also see that Spring can successfully find the Test.hbm.xml file and all settings, but the problem starts when Hibernate's org.hibernate.cfg.Configuration class starts to use these settings and begins to read this Test.hbm.cfg file.
Business effect for the issue: since this behaviour occurs in development and production mode, it's a cause for development slowdown and customer dissatisfaction.
Does anybody have an idea? Is Spring doing anything with the JAR files like mapping-files or could it be connected with how WebLogic handles compressed files during deploy time?
Thanks for any help!