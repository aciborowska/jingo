If I define an API that supports two HTTP methods on the same URL pattern, e.g. "GET /cars/(id)" (to retrieve a car) and "DELETE /cars/(id)" (to delete a car), then sending an unacceptable MIME type in a GET request's "Accept" header results in a HTTP 405 error (method not supported), instead of a HTTP 406 (not acceptable) error.
For example:






@Controller




@RequestMapping(value = "/mailitems")




public class MailItemsImpl implements MailItems {




 




    private static final String XML = "application/xml";




    private static final String JSON = "application/json";




 




    /** {@inheritDoc} */




    @Override




    @RequestMapping(method = POST, value = "/", consumes = { XML, JSON }, produces = { XML, JSON })




    public @ResponseBody MailItem createMailItem(@RequestBody MailItem mailItem) {




        return mailItem;




    }




 




    /** {@inheritDoc} */




    @Override




    @RequestMapping(method = GET, value = "/{id}", produces = { XML, JSON })




    public @ResponseBody MailItem getMailItem(@PathVariable long id) {




        return new MailItem();




    }




 




    /** {@inheritDoc} */




    @Override




    @RequestMapping(method = DELETE, value = "/{id}")




    public @ResponseBody void deleteMailItem(@PathVariable long id) {




        // Empty.




    }




}






Test code (using REST-assured):






    @Test




    public void testGetWithUnknownOutput() {




        given()




            .header("Accept", "application/foo")




        .expect()




            .statusCode(406) // XXX: expected 406, but we get 405...




        .when()




            .get("/rest/mailitems/5");




    }






The test passes if you remove the DELETE mapping in MailItemsImpl.
The issue appears to be in RequestMappingInfoHandlerMapping.handleNoMatch(), which somehow determines that although the GET request could not be honored due to the Accept header, the HTTP error should indicate that GET is not supported, and only DELETE is supported.
This is similar to SPR-7379, but I think it's a different issue.