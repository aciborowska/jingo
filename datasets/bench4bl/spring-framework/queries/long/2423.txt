In the documentation there are multiple usages of the idiom "to wit", which according to answers.com means "That is to say; namely." I haven't heard that phrase to be used much, so it might be best to avoid using it in technical documentation, and replace it with something else. The same could be said about other abbreviations:
Quoted from http://java.sun.com/j2se/javadoc/writingdoccomments/#styleguide
Avoid Latin â€“ use "also known as" instead of "aka", use "that is" or "to be specific" instead of "i.e.", use "for example" instead of "e.g.", and use "in other words" or "namely" instead of "viz."
Here are some typos I've found thisfar:
>> 3.3.5. Using depends-on
"you can supply a delimited list of beans names as the value of the <depends-on/>  attribute"
beans names
--> bean names
<depends-on/> attribute
--> 'depends-on' attribute
>> 3.4.4. Custom scopes
"with two methods to get and remove an object from/to an underlying storage mechanism respectively"
I think the correct way is to say that you "get something from somewhere" and "remove something from somewhere". So this sentence should be fixed with:
from/to
--> from
>> 3.5.2.1.  BeanFactoryAware
There is a code sample:
<bean id="newsFeed" class="x.y.NewsFeed" singleton="false">
Isn't the 'singleton' attribute deprecated? The code examples should then use the new syntax (except when explaining the 'singleton' attribute for backwards compatibility):
singleton="false"
--> scope="singleton"
Also the following chapters use the 'singleton' attribute in their code examples:
"3.3.4.1. Lookup method injection",
"6.8.1. Using AspectJ to dependency inject domain objects with Spring",
"7.9.2. Using metadata-driven auto-proxying",
"7.10.2. Pooling target sources",
"15.4.1.2. DelegatingActionProxy",
"A.2.2.2. <util:property-path/>" and
"A.2.2.2.1. Using <util:property-path/> to set a bean property or constructor-argument"
>> 3.7.2. Customizing configuration metadata with BeanFactoryPostProcessors
"This semantics of this interface"
This semantics
--> The semantics
>> 3.7.2. Customizing configuration metadata with BeanFactoryPostProcessors
>> 3.7.2.1. Example: the PropertyPlaceholderConfigurer
Here is twise mentioned "PropertyPlaceHolderConfigurer" (notice the capical H in Holder) instead of "PropertyPlaceholderConfigurer".
PropertyPlaceHolderConfigurer
--> PropertyPlaceholderConfigurer
>> 3.7.2. Customizing configuration metadata with BeanFactoryPostProcessors
"This explicit registration step is not convenient"
Because the "this" should refer to the above code sample, the paragraph starting with this sentence should be right after the code sample. The paragraph starting with "An ApplicationContext will detect" should come after it, so that it would be more logical.
>> 3.7.2.2. Example: the PropertyOverrideConfigurer
"which contains a bean in it called dataSource"
Some simplication:
a bean in it called
--> a bean called
>> 3.8. The ApplicationContext
"The following sections described functionality"
The following sections have not yet come, so it's not possible to speak about them in the past tense:
described
--> describe
>> 3.8.1. Internationalization using MessageSources
Two sentences starting with "String getMessage (String code"
Remove the space before the '(' to improve the code style:
getMessage (String
--> getMessage(String
>> 3.8.1. Internationalization using MessageSources
"# in 'exceptions.properties'"
This line of code sample should be colored green, like in the above code sample.
>> 3.8.2. Events
In the code sample:
    public void setApplicationContext(ApplicationContext ctx) 
{
        this.ctx = ctx;
    }

The class has no field called 'ctx'. To the code should be added:
private ApplicationContext ctx;
>> 3.8.3. Convenient access to low-level resources
"JavaBean PropertyEditor that is automatically registerd by the context"
registerd
--> registered
>> 3.9. Glue code and the evil singleton
"to demand load multiple hierarchical (i.e. one is a parent of another) Spring IoC container instances"
to demand load
--> to demand the loading of
>> 4.3.1. UrlResource
"However, if it doesn't recognize the prefiix,"
prefiix
--> prefix
>> 4.3.2. ClassPathResource
"the special prefix classpath:on the string path"
Missing one space:
classpath:on
--> classpath: on
>> 4.6. Setting Resources as properties
"some sort of dynamic process it probably makes sense"
Let's make this long sentence more readable by adding a comma:
dynamic process it probably
--> dynamic process, it probably
>> 4.6. Setting Resources as properties
"where the specific one needed that depends on the role of the user"
specific one needed that depends
--> specific resource needed depends
>> 5.2.2.1. Registering additional custom PropertyEditors
"The standard property editors that the BeanWrapper registers are listed in a subsequent chapter."
a subsequent chapter
--> the previous section
>> 5.2.3. Other features worth mentioning
"Besides the features you've seen in the previous sections there a couple of features that might be interesting to you, though not worth an entire section."
previous sections there a couple of features that might be interesting to you,
--> previous sections, there are a couple of features that might be of interest to you,
>> 5.3. Validation using Spring's Validator interface
(The language of these sections needs some tidying...)
Spring's features a Validator interface you can use to validate objects.
--> Spring features a Validator interface which you can use to validate objects.
The Validator interface, is pretty straightforward and works using with a so-called Errors object. In other words, while validating, validators will report validation failures to the Errors object.
--> The Validator interface works using an Errors object so that while validating, validators will report validation failures to the Errors object.
As said already, the Validator interface is pretty straightforward, just as implementing one yourself.
--> (the beginning is redundant repetition and the end is undecipherable; remove this sentence completely)
Using the org.springframework.validation.Validator  interface we're going to provide validation behavior for the Person  class. This is the Validator interface:
--> We're going to provide validation behavior for the Person class by using the org.springframework.validation.Validator interface:
"validate(Object, org.springframework.validation.Errors)"
A list bullet (<li> element) is missing from this line.
in case of validation errors, put registers those
--> in case of validation errors, registers those
the given Errors object
--> the given <tt class="classname">Errors</tt> object
>> 5.4. The Errors interface
The methods it offers are pretty straightforward, and more information can be found in the Javadoc.
--> More information about the methods it offers can be found from the Javadoc.
>> 5.5. Resolving codes to error messages
(Ugh, I had some problems understanding this section, so some simplification and refactoring would be good in addition to the following fixes...)
If, using a MessageSource, we're going to output the error messages we will do so
--> If we're going to output the error messages by using a MessageSource, we will do so
one of the other reject method
--> one of the other reject methods
the Errors interface
--> the <tt class="classname">Errors</tt> interface
register the code, you've passed in,
--> register the code you've passed in,
By default, the  is used,
--> By default, the *classname missing* is used,
not only register a message
--> not only registers a message