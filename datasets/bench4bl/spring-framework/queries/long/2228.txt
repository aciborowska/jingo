I'm trying to use a Spring Quartz configuration to use a JobStoreTX job store and a Spring managed dataSource. 
Using the "dataSource" property the Scheduler job store class is automatically set to JobStoreCMT. 
If you use the "nonTransactionalDataSource" property you get the following exception:
org.quartz.SchedulerConfigException: DataSource name not set.
	at org.quartz.impl.jdbcjobstore.JobStoreSupport.initialize(JobStoreSupport.java:470)
	at org.quartz.impl.jdbcjobstore.JobStoreTX.initialize(JobStoreTX.java:70)
	at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1010)
	at org.quartz.impl.StdSchedulerFactory.getScheduler(StdSchedulerFactory.java:1152)
	at org.springframework.scheduling.quartz.SchedulerFactoryBean.createScheduler(SchedulerFactoryBean.java:604)
	at org.springframework.scheduling.quartz.SchedulerFactoryBean.afterPropertiesSet(SchedulerFactoryBean.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1091)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:396)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:233)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:145)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:277)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:313)
	at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:139)
	at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:252)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:190)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:50)
The only way to configure the scheduler with JobStoreTx is to set it using the quartz properties like this:
    <bean id="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
      <property name="quartzProperties"> 
        <props> 
          <prop key="org.quartz.jobStore.isClustered">false</prop> 
          <prop key="org.quartz.scheduler.instanceId">AUTO</prop> 
          <prop key="org.quartz.jobStore.class">org.quartz.impl.jdbcjobstore.JobStoreTX</prop> 
          <prop key="org.quartz.jobStore.tablePrefix">T_QRTZ_</prop> 
          <prop key="org.quartz.jobStore.driverDelegateClass">org.quartz.impl.jdbcjobstore.oracle.OracleDelegate</prop> 
          <prop key="org.quartz.jobStore.selectWithLockSQL">SELECT * FROM 
{0}
LOCKS UPDLOCK WHERE LOCK_NAME= ?</prop>
          <prop key="org.quartz.jobStore.useProperties">true</prop>
          <prop key="org.quartz.dataSource.whatever.jndiURL">jdbc/WhateverDs</prop>
          <prop key="org.quartz.jobStore.dataSource">whatever</prop>
        </props> 
      </property> 
But in this case you can't use a spring managed data source.