Consider the following example, where System.err is redefined using 
MethodInvokingFactoryBean.
<beans>
    <bean id="err"
        class="java.io.File">
        <constructor-arg>
            <value>c:/err1.txt</value>
        </constructor-arg>
    </bean>
    <bean id="ok" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod">
            <value>java.lang.System.setErr</value>
        </property>
        <property name="arguments">
            <bean class="java.io.PrintStream">
                <constructor-arg>
                    <ref local="err"/>
                </constructor-arg>
            </bean>
        </property>
    </bean>
</beans>
Create an Application context and write in System.err:
ApplicationContext bf =
   new ClassPathXmlApplicationContext(myConfFile);
System.err.println("Hello");
It works just fine.
Now consider this second example, where the PrintStream is autowired:
<beans>
    <bean id="err"
        class="java.io.File">
        <constructor-arg>
            <value>c:/err2.txt</value>
        </constructor-arg>
    </bean>
    <bean id="bad"
        class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod">
            <value>java.lang.System.setErr</value>
        </property>
        <property name="arguments">
            <bean class="java.io.PrintStream" autowire="autodetect"/>
        </property>
    </bean>
</beans>
Spring throws a NullPointerException:
at org.springframework.beans.factory.config.MethodInvokingFactoryBean.getObjectType(MethodInvokingFactoryBean.java:126)
at org.springframework.beans.factory.support.AbstractBeanFactory.getType(AbstractBeanFactory.java:348)
Looks like Spring, while trying to find a matching bean, calls getObjectType() in MethodInvokingFactoryBean before it is prepare()d.
