Page 17
Text:
    "When using XM-based configuration"
should read:
    "When using XML-based configuration"
Page 20
Text:
    "of the bean itsel being in control"
should read:
    "of the bean itself being in control"
Page 22
The following text is worded confusingly:
    "This does mean that a Spring container which has loaded correctly, can later generate an
exception when you request a bean, if there is a problem creating that bean or one of its dependencies."
Perhaps instead:
    "This means that a Spring container which has loaded correctly can later generate an
exception when you request a bean if there is a problem creating that bean or one of its dependencies.
Page 23
Text:
      <!-- setter injection using the neater 'ref' attribute -->
      <property name="beanTwo"><ref bean="yetAnotherBean"/></property>
should read:
      <!-- setter injection using the neater 'ref' attribute -->
      <property name="beanTwo" ref="yetAnotherBean"/>
Page 24:
The following code snippet should use the new style to promote good style:
      <constructor-arg><ref bean="anotherExampleBean"/></constructor-arg>
      <constructor-arg><ref bean="yetAnotherBean"/></constructor-arg>
      <constructor-arg><value>1</value></constructor-arg>
change to:
      <constructor-arg ref="anotherExampleBean"/>
      <constructor-arg ref="yetAnotherBean"/>
      <constructor-arg value="1"/>
Page 25:
The following code snippet should use the new style to promote good style:
      <constructor-arg type="int"><value>7500000</value></constructor-arg>
      <constructor-arg type="java.lang.String"><value>42</value></constructor-arg>
change to:
      <constructor-arg type="int" value="7500000"/>
      <constructor-arg type="java.lang.String" value="42"/>
Page 26:
Text:
    "actually instantiated... if the 'client' bean"
should read:
    "actually instantiated. If the 'client' bean"
Page 34:
Unless I misunderstood something, the example below seems incorrect since the <property> tag with ref="" value should on its 
own create a dependency. A different example that doesn't inherently create this dependency with an XML tag might be better 
(or perhaps even a compare/contrast example):
      <bean id="beanOne" class="ExampleBean" depends-on="manager">
        <property name="manager" ref="manager" />
      </bean>
      <bean id="manager" class="ManagerBean" />
Page 35:
Text:
    "element; to wit..."
should read:
    "element; to wit:"
Page 39:
The following text is confusing:
    "This also means that you can define more than one bean definition for a single class, and then Spring will create exactly 
two instances of that particular class, each with their own particular configuration."
Page 47:
"destroy()" is listed in the following text as a method name that is not Spring-specific, but the DisposableBean interface 
referred to uses "destroy()", so perhaps a different method name could be chosen:
    "typically finds oneself writing methods with names such as init(), initialize(), dispose(), destroy(), etc."
Page 51:
Is 'scope' inherited by the child, or is it always taken from the child definition? Since 'singleton' is always taken from the 
child I assume 'scope' is as well. The text between the two code snippets needs to be clarified on this matter.
Page 51:
Text:
    "and it is also defined as abstract."
should read (for clarity):
    "and it is also implicitly abstract."
Page 53:
Text:
    "post-processors explcitly have to be"
should read:
    "post-processors explicitly have to be"
Page 58:
Text:
    "providing access to messages in, i18n-style"
should read:
    "providing access to messages in i18n-style"
Page 58-60 (Section 3.8.1):
There is no example on retrieving a message using an injected MethodSource. Instead, all examples use the 'ClassPathXmlApplicationContext' to create a MessageSource for use in the method.
Page 63:
Text:
    "delimiters (comma, semi-colon and space) and use"
should read:
    "delimiters (comma, semi-colon and whitespace) and use"