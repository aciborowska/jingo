It seems ETag and Last-Modified headers are removed in non-safe methods
Using the below controller endpoint






  @RequestMapping(method = RequestMethod.PUT, path = "/{resId}")




  public ResponseEntity put(@RequestBody String str) {




    return ResponseEntity.ok()




        .eTag("1")




        .lastModified(1476890138)




        .body(str);




  }







this test fails






  @Test




  public void putBug() throws Exception {




    mockMvc.perform(




        put("/123").content("hello"))




        .andExpect(status().isOk())




        .andExpect(header().string(HttpHeaders.ETAG, "\"1\""))




        .andExpect(header().string(HttpHeaders.LAST_MODIFIED, "Sun, 18 Jan 1970 02:14:50 GMT"))




        .andExpect(header().string(HttpHeaders.CONTENT_LENGTH, "5"));




  }







If needed, I can provide a fully fledged maven project with the code that reproduces the issue.
In version 4.2.8 this was working fine.
Hint: ServletWebRequest#checkNotModified(String etag, long lastModifiedTimestamp) only adds back Last-Modified and ETag headers for safe methods.
According to https://tools.ietf.org/html/rfc7231#section-4.3.4 we can have ETag and Last-Modified fields in PUT requests






   An origin server MUST NOT send a validator header field




   (Section 7.2), such as an ETag or Last-Modified field, in a




   successful response to PUT unless the request's representation data




   was saved without any transformation applied to the body







