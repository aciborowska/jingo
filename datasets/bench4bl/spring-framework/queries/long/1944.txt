Unless I'm missing something obvious, DefaultMessageListenerContainer is not using 1 Session per Thread as it should be.   
The inner class AsyncMessageListenerInvoker is holding the session and consumer as expected, but there is only ever 1 invoker instance used â€“ and this is shared between each consumer thread.   As each executor runs initResourcesIfNecessary() it creates a new Session (again as expected), but this ends up overwriting the single invoker instance's session.
I believe the problem can be simply rectified by changing the registerListener method as follows:-
	protected void registerListener() throws JMSException {
		for (int i = 0; i < this.concurrentConsumers; i++) 
{
			Runnable invoker = new AsyncMessageListenerInvoker();
			this.taskExecutor.execute(invoker);
		}
	}
The change is simply to move the invoker creation inside the loop.