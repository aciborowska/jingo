Currently, in a page with JSTL <c:import>, a configured HandlerExceptionResolver is executed very early when the DispatcherServlet catches an exception. It is invoked inside the same nesting level as the origin of the exception. I'll explain why this is a problem.
If the Resolver is called in the include, and it handles the exception by setting the response code to 500, the code flow eventually gets back to the <c:import> tag in JSTL. Here, the following code from org.apache.taglibs.standard.tag.common.core.ImportSupport (standard.jar, v1.1.2, line 309) comes into play:
	    // disallow inappropriate response codes per JSTL spec
	    if (irw.getStatus() < 200 || irw.getStatus() > 299) 
{
		throw new JspTagException(irw.getStatus() + " " +
		    stripSession(targetUrl));
	    }

This means that a JspTagException is then thrown, instead of an error page delivered.

the stack trace of the causing exception is not contained in the exception any more
the original intent of displaying an error page for the causing exception is negated, instead a stacktrace of the JspTagException is shown

This means that the HandlerExceptionResolver mechanism simple doesn't work reliable with includes.
I'm not sure if the idea is good, but I'd propose to only invoke the HandlerExceptionResolver in the outermost invocation (if it would be a ServletFilter, I would configure it with <dispatcher>REQUEST</dispatcher> only). Any inner invocations should bubble the exception up to the outermost invocation. Maybe this behaviour should be an option.
Unfortunately it does not seem to be possible to implement a ServletFilter, because of the tight coupling with Views and the like.