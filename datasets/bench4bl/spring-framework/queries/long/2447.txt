documentation for 2.0-rc3 says the following (3.6):
— begin —
Note that in the example above, we have explicitly marked the parent bean definition as abstract by using the abstract attribute. In the case that the parent definition does not specify a class:
<bean id="inheritedTestBeanWithoutClass">
    <property name="name" value="parent"/>
    <property name="age" value="1"/>
</bean>
<bean id="inheritsWithClass" class="org.springframework.beans.DerivedTestBean"
    parent="inheritedTestBeanWithoutClass" init-method="initialize">
  <property name="name" value="override"/>
  <!-- age will inherit value of 1 from parent -->
</bean>
The parent bean cannot get instantiated on its own since it is incomplete, and it is also implicitly abstract. When a definition is defined to be abstract like this (explicitly or implicitly), it is usable only as a pure template bean definition that will serve as parent definition for child definitions. Trying to use such an abstract parent bean on its own (by referring to it as a ref property of another bean, or doing an explicit getBean() call with the parent bean id), will result in an error. Similarly, the container's internal preInstantiateSingletons() method will completely ignore bean definitions which are defined as abstract.
— end —
should be something like this:
— begin —
Explicitly marking the parent bean definition as abstract is required.
When a definition is defined to be abstract like this, it is usable only as a pure template bean definition that will serve as parent definition for child definitions. Trying to use such an abstract parent bean on its own (by referring to it as a ref property of another bean, or doing an explicit getBean() call with the parent bean id), will result in an error. Similarly, the container's internal preInstantiateSingletons() method will completely ignore bean definitions which are defined as abstract.
— end —