I'm trying to just use the SessionFactoryUtils class in order to have a single session instance per transaction. Note that SessionFactoryUtils is the only thing I use from Spring, so I've perhaps missed something important.
Everything works well until I use several transactions: SessionFactoryUtils returns a hibernate session; it returns the same session if a second call to getSession is made, and it flushes and closes the session at the end of the transaction. However, it doesn't work as I would expect if several transactions are used.
Consider this scenario:
FirstSessionBean has a method foo() marked as "Requires"
SecondSessionBean has a method bar() marked as "RequiresNew"
The foo method gets a session from SessionFactoryUtils
The foo method then calls bar()
The bar method gets a session from SessionFactoryUtils
In this case, the session returned by SessionFactoryUtils in bar() is the same as the one returned in foo(). The session is flushed and closed only at the end of the foo transaction. So everything works as if bar was marked as "Requires" rather than "RequiresNew".
This seems incorrect to me. Indeed, suppose I'm doing some updates in the database in bar(), using the hibernate session. At the end of the bar transaction, these changes should be committed. Then, if the foo transaction rolls back, the changes made in bar should still be visible in the database, since bar has its own transaction.
In other words, a different session should be created and synchronied with the JTA transaction for each JTA transaction, and not for each thread as it's the case now.
Am I missing something?