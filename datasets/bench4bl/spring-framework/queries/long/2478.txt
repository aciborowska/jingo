We see odd behaviour when we manually create a MessageReceiver in a SessionCallback, and start the connection.
Using ethereal we can see that Websphere is polling the MQ a lot, every millisecond we se a MQ_REQUEST/REPLY.
My guess, after looking at the source is that you never stop the connection again, just call closeConnection, which delegates the close to the managed connection, that propably just returns the connection to the pool.
The offending code is this:
			public Object doInJms(Session session) throws JMSException {
				log.debug("leder i messagecache");
				try {
					InitialContext i = new InitialContext();
					Queue q = (Queue) i.lookup(getQueueName());
					String selector =
						"JMSMessageID='ID:"
							+ transaktion.getFormidlingsmaskineId()
							+ "'";
					log.debug("leder efter " + selector);
					MessageConsumer mc =
						((QueueSession) session).createReceiver(q,selector);
					log.debug("selector er " + mc.getMessageSelector());
					Message m = mc.receiveNoWait();
					if (m == null) 
{
						transaktion.setHeader(null);
					}
 else 
{
						MessageHeader header =
							MessageHeader.newInstance(parseBody(m));
						transaktion.setHeader(header);
					}
				} catch (NamingException e) 
{
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return null;
			}
		},true);