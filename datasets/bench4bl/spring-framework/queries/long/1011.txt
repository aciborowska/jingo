1) Problem with static factory methods which create an object not of the same type (or subtype) as the factory.
e.g. given a bean definition:
<bean id="N" factory-method="M" class="T">
If factory-method M returns an object whose type is NOT a subtype of class T, then Spring does not guess the type of N (based on return type of M) instead it just uses T. 
So when you do:
applicationContext.getBeansOfType(T.class) 
you retrieve a Map which is NOT of runtime-type Map<String, ? extends T> but actually of type Map<String, ?> – which is very surprising.
I believe Spring should either:
1) throw an exception when you try to create a bean using static factory-method which is EVIDENTLY not of same type/subtype as factory   class (could even check for this).
or 
2) infer the type correctly from the return arguments
or 
3) infer a type of "Object" if it (for some reason) can't infer the type.
Otherwise, type safety is really broken (in  fact I only discovered this because of a ClassCastException where there should have been none!).
 – missing exception on startup? / failure to detect type of bean N based on return type of M.
http://forum.springframework.org/viewtopic.php?t=5997 