Reference Guide states in chapter 9.5.6 (page 164 in PDF)
"Note that if annotating interface members (as opposed to methods
implementing the interface), the interface itself should also be annotated as @Transactional."
The problem is that annotation does not work regardless of is interface as whole is annotated or not as soon as it not annotated directly in class that implements interface. 
I would say that behavior isnormal and documentation buggy as Sun Javadoc for meta-annotation "Inherited" clearly states: 
"Note also that this meta-annotation only causes annotations to be inherited from superclasses; annotations on implemented interfaces have no effect. "
But there is one issue - log from Aspectj (   <weaver options="-showWeaveInfo -XmessageHandlerClass:org.springframework.aop.aspectj.AspectJWeaverMessageHandler"> ) shows that method inherited from interface is properly weaved (has the same join poins as similar method declared in class), but transaction anyway is not created,  commented xcerpt from log follows, test programm and log are attached:









Method (getTransaction()) declared and annotated in class
INFO - [AspectJ] Join point 'method-execution(java.lang.Object de.ntec.feasibility.configurable.TestAspects.getTransaction())' in Type 'de.ntec.feasibility.configurable.TestAspects' (TestAspects.java:32) advised by before advice from 'org.springframework.transaction.aspectj.AnnotationTransactionAspect' (AbstractTransactionAspect.aj:60)
INFO - [AspectJ] Join point 'method-execution(java.lang.Object de.ntec.feasibility.configurable.TestAspects.getTransaction())' in Type 'de.ntec.feasibility.configurable.TestAspects' (TestAspects.java:32) advised by afterThrowing advice from 'org.springframework.transaction.aspectj.AnnotationTransactionAspect' (AbstractTransactionAspect.aj:71)
INFO - [AspectJ] Join point 'method-execution(java.lang.Object de.ntec.feasibility.configurable.TestAspects.getTransaction())' in Type 'de.ntec.feasibility.configurable.TestAspects' (TestAspects.java:32) advised by afterReturning advice from 'org.springframework.transaction.aspectj.AnnotationTransactionAspect' (AbstractTransactionAspect.aj:81)
INFO - [AspectJ] Join point 'method-execution(java.lang.Object de.ntec.feasibility.configurable.TestAspects.getTransaction())' in Type 'de.ntec.feasibility.configurable.TestAspects' (TestAspects.java:32) advised by after advice from 'org.springframework.transaction.aspectj.AnnotationTransactionAspect' (AbstractTransactionAspect.aj:86)
Method (getTransactionI()) declared and annotated in interface
INFO - [AspectJ] Join point 'method-execution(java.lang.Object de.ntec.feasibility.configurable.TestAspects.getTransactionI())' in Type 'de.ntec.feasibility.configurable.TestAspects' (TestAspects.java:37) advised by before advice from 'org.springframework.transaction.aspectj.AnnotationTransactionAspect' (AbstractTransactionAspect.aj:60)
INFO - [AspectJ] Join point 'method-execution(java.lang.Object de.ntec.feasibility.configurable.TestAspects.getTransactionI())' in Type 'de.ntec.feasibility.configurable.TestAspects' (TestAspects.java:37) advised by afterThrowing advice from 'org.springframework.transaction.aspectj.AnnotationTransactionAspect' (AbstractTransactionAspect.aj:71)
INFO - [AspectJ] Join point 'method-execution(java.lang.Object de.ntec.feasibility.configurable.TestAspects.getTransactionI())' in Type 'de.ntec.feasibility.configurable.TestAspects' (TestAspects.java:37) advised by afterReturning advice from 'org.springframework.transaction.aspectj.AnnotationTransactionAspect' (AbstractTransactionAspect.aj:81)
INFO - [AspectJ] Join point 'method-execution(java.lang.Object de.ntec.feasibility.configurable.TestAspects.getTransactionI())' in Type 'de.ntec.feasibility.configurable.TestAspects' (TestAspects.java:37) advised by after advice from 'org.springframework.transaction.aspectj.AnnotationTransactionAspect' (AbstractTransactionAspect.aj:86)
................
					
From getTransaction method
INFO - ***** newTestAspects returned transaction: org.springframework.transaction.support.DefaultTransactionStatus@1c4ff2c
.............
From getTransactionI method
org.springframework.transaction.IllegalTransactionStateException: Transaction propagation 'mandatory' but no existing transaction found
        at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:306)
        at de.ntec.feasibility.configurable.TestAspects.doGetTransaction(TestAspects.java:44)
        at de.ntec.feasibility.configurable.TestAspects.getTransactionI(TestAspects.java:37)
        at de.ntec.feasibility.configurable.Main.doTest(Main.java:41)
        at de.ntec.feasibility.configurable.Main.main(Main.java:25)
INFO - ***** newTestAspects returned transaction from interface: null











So I'm not sure what is a problem - documentation, aspect implementatiion or AspectJ.
Definitely, there is seemingly easy workaround - to annotate each class that implements interface, but IMHO, transactional behavior is not implementation detail (regardless of opinion of AnnotationTransactionAspect developers) but very importan part of method business contract, so problem
seems to be serious.
