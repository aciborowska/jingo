Hi,
I faced an issue that looks like a Spring AOP bug.
When the JdkDynamicAopProxy return value is the target, it is replaced it by the proxy.
In the code it is commented as // massage return value if necessary
Unfortunately, this replacement can be done unnecessary. It can replace the return value even when the proxy does not implement the return type of the method. It leads to java.lang.ClassCastException in the object $Proxy0 (the java.lang.reflect.Proxy).
There should be a test case attached, if I find how to do it in Jira.
Briefly, it occurs when a proxied object implements two interfaces and only one is proxied. If the a result of the first interface (proxied) is of the type of the second interface (not proxied), the return will be the single instance of the object implementing both interfaces. JdkDynamicAopProxy determines that the return values and the target of aop are the same and returns the proxy even if it does not implements the expected type (second interface not proxied). Then the java.lang.reflect.Proxy throws a ClassCastException (without any message).
I know, that other designs in the interfaces and/or implementation may avoid this issue, but I can't change "legacy" code.
I suggest you a fix. At the end of the method invoke in JdkDynamicAopProxy, you could add a piece of code like the following.
                                                               // massage return value if necessary
			if (retVal != null && retVal == target) {
				// Special case: it returned "this".
				// Note that we can't help if the target sets
				// a reference to itself in another returned object.
				if (method.getReturnType().isInstance(proxy) ) 
{
					// Exchange with the proxy only when the proxy can be casted
					// to the return type.
					//The invocation returned an object, therefore the method
					// return type should not be null. Isn't it?
										
					retVal = proxy;
				}
			}
			return retVal;
There is another workaround, CGLIB can be used instead of JDK dynamic proxy.
May you tell me if you consider it as a bug?
If so, may you give me some hints about a release number and date? 
Regards,
Stephane Lemaire