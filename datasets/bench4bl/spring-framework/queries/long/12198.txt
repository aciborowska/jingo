When using any @Configuration based way to register property sources, the order of overriding properties should follow certain rules as stated in @PropertySource documentation (http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/PropertySource.html).
That is, at least when using 






     AnnotationConfigApplicationContext ctx =




         new AnnotationConfigApplicationContext();




     ctx.register(ConfigA.class);




     ctx.register(ConfigB.class);




     ctx.register(ConfigC.class);




     ctx.register(ConfigD.class);




     ctx.refresh();






Properties defined by ConfigB should override properties from ConfigA and properties from ConfigC should override properties from ConfigB, etc.:
D > C > B > A
However, there are cases when this does not happen. The properties source registered first will be overridden fine, but the order reverses for all additional property sources. Thus the second one added always takes precedence. 
B > C > D > A
Please refer to the following test for an example:
https://code.google.com/p/fstyle-test/source/browse/bug/spring-property-source-order/src/test/java/de/fstyle/test/spring/property/source/order/test/TestConfguration.java
