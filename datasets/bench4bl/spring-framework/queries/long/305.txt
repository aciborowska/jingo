The shell scripts in samples/jpetstore/db/hsqldb has DOS line delimiters instead of Unix delimiters. This can cause attempts to run this sample application to fail.
What happens is that, when you start up the database via server.sh, the shell sees the end of the command as '-database jpetstore\c', where by \c I mean the carriage return character. Then when the sample code itself attempts to query the database, it gets an error since the database jpetstore (with no terminating carriage return) doesn't exist:
org.springframework.jdbc.BadSqlGrammarException: Bad SQL grammar [(mapped statement)] in task 'SqlMapTemplate'; nested exception is java.sql.SQLException: Table not found: CATEGORY in statement [select CATID, NAME, DESCN from CATEGORY where CATID = 'CATS']
	org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.translate(SQLErrorCodeSQLExceptionTranslator.java:254)
	org.springframework.orm.ibatis.SqlMapTemplate.execute(SqlMapTemplate.java:116)
	org.springframework.orm.ibatis.SqlMapTemplate.executeQueryForObject(SqlMapTemplate.java:152)
	org.springframework.samples.jpetstore.dao.ibatis.SqlMapCategoryDao.getCategory(SqlMapCategoryDao.java:17)
	org.springframework.samples.jpetstore.domain.logic.PetStoreImpl.getCategory(PetStoreImpl.java:124)
	sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	java.lang.reflect.Method.invoke(Method.java:324)
	org.springframework.aop.framework.AopProxyUtils.invokeJoinpointUsingReflection(AopProxyUtils.java:60)
	org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:150)
	org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:119)
	org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:56)
	org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:139)
	org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:152)
	$Proxy0.getCategory(Unknown Source)
	org.springframework.samples.jpetstore.web.spring.ViewCategoryController.handleRequest(ViewCategoryController.java:31)
	org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:44)
	org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:495)
	org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:321)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:810)
To the beginning user it simply appears that the samples are broken. Some beginning users might even jump to the conclusion that spring itself doesn't work, since here even the sample code gets errors about bad SQL grammar. It took me most of a morning to figure out the problem.
Presumably the problem occurs with the scripts in the petclinic sample as well, though I haven't tried them.
Note also that it's possible some Unix shells could treat DOS line delimiters the same as Unix delimiters, and so not exhibit this bug. Here I'm using
GNU bash, version 2.05b.0(1)-release (powerpc-apple-darwin7.0)