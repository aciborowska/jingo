Assume the following method definitions in an @Controller annotated class:






Â 






@RequestMapping(value = "/x/**")
@ResponseBody
public String doSomething0() {
	return "wild card";
}
@RequestMapping(value = "/x/
{b}/{c}/{d}")
@ResponseBody
public String doSomething1(@PathVariable("b") String b, @PathVariable("c") String c, @PathVariable("d") String d) {
	return "three params";
}

@RequestMapping(value = "/x/{b}
/
{c}
")
@ResponseBody
public String doSomething2(@PathVariable("b") String b, @PathVariable("c") String c) {
	return "two params";
}
@RequestMapping(value = "/x/
{b}
")
@ResponseBody
public String doSomething3(@PathVariable("b") String b) 
{
	return "one param";
}
{/code}

If I issue a HTTP GET to http://localhost:8080/x, I receive "wild card".
If I issue a HTTP GET to http://localhost:8080/x/1, I receive "one param".
If I issue a HTTP GET to http://localhost:8080/x/1/2, I receive "two params".
If I issue a HTTP GET to http://localhost:8080/x/1/2/3, I receive "wild card"!
But I expect the method doSomething3 to be invoked and thus to receive "three params".
I think this is a bug in the method handler resolution. The most specific definition should be taken, which works for the cases with one and two URI template variables, but not for the case with three variables. At least it is inconsistent behavior.
If I omit the method doSomething0 with the wildcard URI definition, a HTTP GET to http://localhost:8080/x/1/2/3 returns "three params".