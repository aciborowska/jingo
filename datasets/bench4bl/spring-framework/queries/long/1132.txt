If you define an interface/class with more than one method to be transactional, the interface/class is never processed by the TransactionInterceptor when using AOP to apply the transactions.  An interface/class with one method works.
Here is a snippet of my context file:
<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" />	
	<bean
		class="org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor">
		<property name="transactionInterceptor">
			<ref bean="transactionInterceptor" />
		</property>
	</bean>	
	<bean id="transactionInterceptor"
		class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager">
			<ref bean="hibernateTransactionManager" />
		</property>
		<property name="transactionAttributeSource">
			<bean
				class="org.springframework.transaction.annotation.AnnotationTransactionAttributeSource" />
		</property>
	</bean>
<bean id="itemService"
		class="foo.service.impl.ItemServiceImpl">
     ... (just a bunch of properties)
	</bean>
ItemServiceImpl implements ItemService which looks like:
@Transactional(readOnly = true)
public interface ItemService {
   ... (14 method definitions with 3 overriding the default for the interface)
}
I reverted to Spring 1.2.1 and everything works again, which is why I figured it must be a bug in version 1.2.2.