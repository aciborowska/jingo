The current behavior of evaluation of the "arguments" attribute of the spring:message tag (in both 2.0.x and 1.2.x) is to assume that if the user passes in a string, it is a comma-separated list of values and/or ELs. This will result in, for example, if the user passes:
<spring:message ... arguments="foo,bar"/>
... to the equivalent of:
arguments = new Object[]
{"foo","bar"}

The problem arises when the user intends to pass in a single EL expression that should resolve to an array of objects. For example, if I do something like this:

(in the Controller)

model.put("myArgumentsArray", new String[]{"foo","bar"}
);
(in the page)
<spring:message ... arguments="$
{myArgumentsArray}
"/>
... the code in MessageTag.resolveMessage will set arguments to the equivalent of:
arguments = new Object[]{new String[]{"foo","bar"}};
This is because the behavior of resolution of the arguments attribute if the attribute is an instanceof String is to iterate through the String by the argument separator, and evaluate each argument separately. IMHO, the behavior if the user passes in a single string that is not separated, it should simply be evaluated inline (assuming it is an EL expression).
So the code modifications to MessageTag would look something like this:
[code]
			if (this.arguments instanceof String) {
				String[] stringArray =
						StringUtils.delimitedListToStringArray((String) this.arguments, this.argumentSeparator);
// change
if(stringArray.length == 1) {
 argumentsArray = ExpressionEvaluationUtils.evaluate("arguments",stringArray[0],pageContext);
}
[code]
I believe this is more correct if the user hasn't explicitly supplied multiple values using some kind of separator character.
I filed as a bug as opposed to an enhancement request, because I expected it to work this way, and was surprised when it did not. I'm open to suggestions if you don't think this is a bug, including supplementing/changing the documentation to make this behavior clearer.