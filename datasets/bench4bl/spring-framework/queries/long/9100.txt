There seems to be a difference in the way configuration classes, i.e. classes annotated with @Configuration, are handled by the ClassPathBeanDefinitionScanner vs the AnnotatedBeanDefinitionReader.  The javadoc says that the AnnotatedBeanDefinitionReader is, "...an alternative to ClassPathBeanDefinitionScanner, applying the same resolution of annotations but for explicitly registered classes only.".  If you read the Spring forum thread attached to this issue report, you will find an example that shows that the way @ComponentScan excludeFilters are processed is not the same; actually, they seemed to be totally ignored when the ClassPathBeanDefinitionScanner scans a class annotated in the following manner:
@Configuration
@ComponentScan(basePackages=
{"com.foo", "com.bar"}
, excludeFilters=
{@ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE, value = com.foo.ComponentA.class)}
)
public class TestConfig {
}