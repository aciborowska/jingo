I have the following @Bean:






@Bean(name="twitterConnections")




@Scope(value="request", proxyMode=ScopedProxyMode.INTERFACES)	




public List<ServiceProviderConnection<TwitterApi>> twitterConnections() {




    return serviceProviderConnectionRepository.findConnectionsByServiceApi(TwitterApi.class);




}






and following client that depends on it:






@Inject




public TwitterShowcaseController(@Named("twitterConnections") List<ServiceProviderConnection<TwitterApi>> twitterConnections) {




    this.twitterConnections = twitterConnections;




}






Injection fails unexpectedly with the following error:






SEVERE: Servlet /spring-social-showcase threw load() exception




org.springframework.beans.factory.NoSuchBeanDefinitionException: No matching bean of type [org.springframework.social.connect.ServiceProviderConnection] found for dependency [collection of org.springframework.social.connect.ServiceProviderConnection]: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@javax.inject.Named(value=twitterConnections)}




   at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoSuchBeanDefinitionException(DefaultListableBeanFactory.java:920)




   at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:747)




   at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:703)




   at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:795)




   at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:723)




   at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:196)




   at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1003)




   at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:907)




   at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:485)




   at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)




   at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:295)




   at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)




   at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292)




   at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)




   at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1080)




   at org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.registerHandler(AbstractUrlHandlerMapping.java:383)




   at org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.registerHandler(AbstractUrlHandlerMapping.java:362)




   at org.springframework.web.servlet.handler.AbstractDetectingUrlHandlerMapping.detectHandlers(AbstractDetectingUrlHandlerMapping.java:82)




   at org.springframework.web.servlet.handler.AbstractDetectingUrlHandlerMapping.initApplicationContext(AbstractDetectingUrlHandlerMapping.java:58)




   at org.springframework.context.support.ApplicationObjectSupport.initApplicationContext(ApplicationObjectSupport.java:119)




   at org.springframework.web.context.support.WebApplicationObjectSupport.initApplicationContext(WebApplicationObjectSupport.java:72)




   at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:73)




   at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:116)




   at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)




   at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:394)




   at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1413)




   at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)




   at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)




   at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:295)




   at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)




   at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292)




   at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)




   at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:580)




   at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:900)




   at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:455)




   at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:442)




   at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:458)




   at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:339)




   at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:306)




   at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:133)




   at javax.servlet.GenericServlet.init(GenericServlet.java:160)




   at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1189)




   at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1103)




   at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:1010)




   at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:4935)




   at org.apache.catalina.core.StandardContext$3.call(StandardContext.java:5262)




   at org.apache.catalina.core.StandardContext$3.call(StandardContext.java:5257)




   at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)




   at java.util.concurrent.FutureTask.run(FutureTask.java:138)




   at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)




   at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)




   at java.lang.Thread.run(Thread.java:680)






Removing @Named results in all the ServiceProviderConnection<?> objects added to the list, not just the twitterConnections, which is not what I want.  As a side note, I was surprised by this as well given the fallback rule to inject by constructor argument name if there is not an exact by-type match.
