Consider the code below:
	private PropertyEditor getCustomEditor(Class requiredType) {
		if (requiredType != null) {
			PropertyEditor editor = (PropertyEditor) this.customEditors.get(requiredType);
			if (editor == null) {
				for (Iterator it = this.customEditors.keySet().iterator(); it.hasNext() {
					Object key = it.next();
					if (key instanceof Class && ((Class) key).isAssignableFrom(requiredType)) 
{
						editor = (PropertyEditor) this.customEditors.get(key);
					}
				}
			}
			return editor;
		}
		return null;
	}
The problem is that keySet of the customEditors Map does not return classes in any deterministic order.
Say class A extends class B and implements interface C.
Say class A does NOT have a property editor associated with it.
Say class B and interface C do have different property editors.
There is no way to determine which property editor will be returned.
Perhaps throw an exception if a different property editor is found.
Also perhaps cache the custom editor associated with a specific class too since adding property editors after initialization is not a common task (and probably can invalidate the cache).
If the above is not implemented then perhaps break out of the for loop after the first one is found. My application has 100s of custom editors defined and the isAssignableFrom is slow.
Thanks for your consideration of this issue.