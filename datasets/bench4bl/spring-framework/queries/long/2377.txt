MBeanExporter.autodetect method uses Map.containsValue to check whether the bean has already been registered for JMX exposure. If there are several beans whose internal state happens to be the same (and their equals method returns true) at the time of autodetection then only one of them gets registered.
Why this happens: Map.containsValue uses equals method to check whether the value is already in the map. Many classes (e.g. collections) implement equals method so that it does not compare the objects' identity, but state. Therefore two different objects' can be sometimes 'equal' and sometimes not. MBeanExporter.autodetect may therefore erroneously think that the object is already in the beans map when there is some another object that happens to be equal.
For example:

Bean b1 is a Map that currently maps String "foo" to String "bar".
Bean b2 is another Map that currently also maps String "foo" to String "bar".
Both b1 and b2 are beans in my BeanFactory.
MBeanExporter.autodetect registers only one of the beans in JMX server.
They should both be registered because they are different objects and their internal mapping vary independently of each others.

Suggestion for fixing this:
Replace this.beans.containsValue(beanInstance) with a loop that goes through all the values in beans map and compares the values with ==. This shouldn't be much slower that current implementation as the implementation for Map.containsValue probably also uses a loop.