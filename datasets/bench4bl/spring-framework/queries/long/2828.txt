An XML-defined aspect that depends on a advised bean doesn't work correctly.
An equivalent aspects defined using @AspectJ syntax works just fine.
XML-defined aspect

produces a configuration error if the dependent bean is defined before the aspect that needs it (this is bad due to asymmetry with @AspectJ)
doesn't advise if the dependent bean is defined after the aspect that needs it (this is worse as it will leave user scratching their head as to what is wrong with their pointcut)

See http://forum.springframework.org/showthread.php?t=31348 for the forum report that prompted this report.
The attached patch includes a JUnit test that illustrates the problem.