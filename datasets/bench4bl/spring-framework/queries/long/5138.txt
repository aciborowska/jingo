Consider the following example:



















The dependency class
public class Dependency {
	@Override
	public String toString() 
{
		return "Dependency bean";
	}
}






































The parent domain class
import javax.annotation.Resource;



















import org.springframework.beans.factory.annotation.Configurable;
@Configurable
public class Parent {
	@Resource
	protected Dependency dependency;
}



















The child domain class
public class Child extends Parent {
}






































The context file (context.xml)
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd">



















	<!-- Switch on the load-time weaving -->
	<context:load-time-weaver />
	<!-- Apply dependency injection	to non-managed classes annotated with the @Configurable -->
	<context:spring-configured />
	<!-- Activates various annotations to be detected in bean classes -->
	<context:annotation-config />
	<bean id="dependency" class="Dependency" />
</beans>
Now the problem... The dependency injection works fine with the domain objects are created like this:
      Parent bean = new Parent();
                 or this:
      Child bean = new Child();
However, it will fail with the following statement (ie. the dependency field will be null (not injected) :
        Parent bean = new Child();
Also, I've found that if the following statements are combined, it will fail too:
        Parent bean = new Parent();
        Parent bean2 = new Child();
Below are some test cases to demonstrate this problem:















Demonstrate successful injection
import static org.junit.Assert.assertNotNull;















import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = 
{ "classpath:context.xml" }
)
public final class PassTest {
	@Test
	public final void case1() 
{
		Parent bean = new Parent();
		assertNotNull(bean.dependency);
	}

	@Test
	public final void case2() 
{
		Child bean = new Child();
		assertNotNull(bean.dependency);
	}
}















Demonstrate injection failure
import static org.junit.Assert.assertNotNull;















import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = 
{ "classpath:context.xml" }
)
public final class FailTest {
	@Test
	public final void case3() 
{
		Parent bean = new Child();
		assertNotNull(bean.dependency);  // Will fail!!!  Why??!!!
	}
}