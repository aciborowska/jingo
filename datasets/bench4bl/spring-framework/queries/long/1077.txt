I posted this issue to the forum on June 16th, but JIRA is a more appropriate place for it.
http://forum.springframework.org/viewtopic.php?t=6377
(copy and paste
We ran into a memory leak with how we were using Spring MVC in Spring v1.1.5. I'm not entirely sure if it is a bug in Spring or is just incorrect use of it. We just added a simple if() statement to resolve our memory leak. The leak showed up when we used Spring MVC and definied non-singleton "prototype" controllers. Their dependent beans would register themselves over and over. 
AbstractBeanFactory in CVS: 
http://cvs.sourceforge.net/viewcvs.py/springframework/spring/src/org/springframework/beans/factory/support/AbstractBeanFactory.java?view=markup 
Our patch was this: 
if (dependencies.contains(dependentBeanName) == false) { 
in: 
/** 

Register a dependent bean for the given bean,
to be destroyed before the given bean is destroyed.
@param beanName the name of the bean
@param dependentBeanName the name of the dependent bean
    */ 
   protected void registerDependentBean(String beanName, String dependentBeanName) { 
       synchronized (this.dependentBeanMap) { 
           List dependencies = (List) this.dependentBeanMap.get(beanName); 
           if (dependencies == null) 
{ 
               dependencies = new LinkedList(); 
               this.dependentBeanMap.put(beanName, dependencies); 
           }
 
           if (dependencies.contains(dependentBeanName) == false) 
Unknown macro: {                if (logger.isDebugEnabled()) { 
                   logger.debug("registering dependent bean = " + beanName + ", with dependent = " + dependentBeanName); 
               }                dependencies.add(dependentBeanName);            } 
 
       } 
   } 

Hopefully, someone from the Spring team can verify if this is a bug or not. 
Thanks, 
Cameron