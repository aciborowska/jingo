This the configuration:
    <aop:config>
        <aop:pointcut id="withinDeprecated" expression="@within(annotation)"/>
        <aop:pointcut id="annotationDeprecated" expression="@annotation(annotation)"/>
        <aop:aspect ref="deprecationLogger">
            <aop:advice method="logWarningForUsageOfDeprecatedClass" kind="before" pointcut-ref="withinDeprecated"/>
            <aop:advice method="logWarningForUsageOfDeprecatedClass" kind="before" pointcut-ref="annotationDeprecated"/>
        </aop:aspect>
    </aop:config>
    <bean id="deprecatedClass" class="com.apress.beginning_spring.chapter4.annotations.DeprecatedClass"/>
    <bean id="classWithDeprecatedMethod" class="com.apress.beginning_spring.chapter4.annotations.ClassWithDeprecatedMethod"/>
    <bean id="deprecationLogger" class="com.apress.beginning_spring.chapter4.annotations.DeprecationLogger"/>
This it DeprecationLogger:
public class DeprecationLogger {
    private static Log log = LogFactory.getLog(DeprecationLogger.class);
    public void logWarningForUsageOfDeprecatedClass(Deprecated annotation) 
{
        log.info("Usage of deprecated class or method.");
    }
}
This is DeprecatedClass:
@Deprecated
public class DeprecatedClass {
    private static Log log = LogFactory.getLog(DeprecatedClass.class);
    public void doOperation() 
{
        log.info("Executing deprecated operation.");
    }
}
This is ClassWithDeprecatedMethod:
public class ClassWithDeprecatedMethod {
    @Deprecated public void doDeprecatedOperation() {
    }
}
This is my test case:
public class DeprecatedClassIntegrationTests extends AbstractDependencyInjectionSpringContextTests {
    protected String[] getConfigLocations() {
        return new String[] 
{
            "classpath:deprecated-context.xml"
        }
;
    }
    private DeprecatedClass deprecatedClass;
    public void setDeprecatedClass(DeprecatedClass deprecatedClass) 
{
        this.deprecatedClass = deprecatedClass;
    }

    private ClassWithDeprecatedMethod classWithDeprecatedMethod;
    public void setClassWithDeprecatedMethod(ClassWithDeprecatedMethod classWithDeprecatedMethod) 
{
        this.classWithDeprecatedMethod = classWithDeprecatedMethod;
    }

    public void testDeprecatedClassIsAopProxy() 
{
        assertTrue(AopUtils.isAopProxy(this.deprecatedClass));
    }

    public void testClassWithDeprecatedMethodIsAopProxy() 
{
        assertTrue(AopUtils.isAopProxy(this.classWithDeprecatedMethod));
    }

    public void testDoOperation() 
{
        this.deprecatedClass.doOperation();
    }

    public void testDoDeprecatedOperation() 
{
        this.classWithDeprecatedMethod.doDeprecatedOperation();
    }

    private DeprecationLogger deprecationLogger;
    public void setDeprecationLogger(DeprecationLogger deprecationLogger) 
{
        this.deprecationLogger = deprecationLogger;
    }

    public void testDeprecationLoggerNotAopProxy() 
{
        assertFalse(AopUtils.isAopProxy(deprecationLogger));
    }
}
This test fails on testDeprecatedClassIsAopProxy and testClassWithDeprecatedMethodIsAopProxy while testDoOperation and testDoDeprecatedOperation do not produce any log messages.
It seems like @within() and @annotation() don't pick up the annotations on the target classes. Toggle the debug option on the compiler does affect the test results.