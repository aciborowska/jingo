I saw a similar issue raised out by Jasper Rosenberg   (SPR-4059 ).
I would like to share my understanding on this , code snippet below is using the non-thread safe variable beanClass, which may cause issue in multiple thread environment.  
                   private Object beanClass
   	public String getBeanClassName() {
   		if (this.beanClass instanceof Class) 
{
   			return ((Class) this.beanClass).getName();
  		}
   		else 
{
   			return (String) this.beanClass;
   		}
	}
	public Class resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException {
	                 //This may cause issue related to synchronized
                                       if (this.beanClass == null) 
{
			return null;
		}
		Class resolvedClass = ClassUtils.forName(getBeanClassName(), classLoader);
		this.beanClass = resolvedClass;
		return resolvedClass;
	}
Please let me know if this is fixed in higher version of Spring.