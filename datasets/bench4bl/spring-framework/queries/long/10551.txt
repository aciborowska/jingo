There seems to be an issue when you use the Jaxb2Marshaller + packagesToScan in conjunction with Spring MVC.
The issue I am specifically running into is that the method returns false even though the JAXBContext knows about the class:
public boolean supports(Class<?> clazz)
{...}

The issue is with the following method:
	private boolean supportsInternal(Class<?> clazz, boolean checkForXmlRootElement) {
		if (checkForXmlRootElement && AnnotationUtils.findAnnotation(clazz, XmlRootElement.class) == null) 
{
			return false;
		}
		if (StringUtils.hasLength(getContextPath())) {
			String packageName = ClassUtils.getPackageName(clazz);
			String[] contextPaths = StringUtils.tokenizeToStringArray(getContextPath(), ":");
			for (String contextPath : contextPaths) {
				if (contextPath.equals(packageName)) 
{
					return true;
				}
			}
			return false;
		}
		else if (!ObjectUtils.isEmpty(getClassesToBeBound())) 
{
			return Arrays.asList(getClassesToBeBound()).contains(clazz);
		}
		return false;
	}
The problem is that even if the "packagesToScan" works...which it does the supportInternal method needs to check the current JAXBContext to see if that class is actually loaded.  I checked and you cannot do this with JAXBContext so a better solution might be to add the class names to "classesToBeBound" as they are scanned in from the package scanner.  After that then in the "supportsInternal" method an additional check can be made to see if the packages.
If you need me to attach code for the fix I would be more than happy to.  Please just let me know as I am here to help.  Also I didn't check the latest spring-oxm so I am not sure if this is no longer an issue but I couldn't find information on this in jira.