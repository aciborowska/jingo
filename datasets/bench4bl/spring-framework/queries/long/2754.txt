I first set up my mbean exporter with the default assembler and a set of beans to explore.  That seemed to work fine, showing all the public properties and methods of the beans.  I then added a MethodExclusionMBeanInfoAssembler as the assembler, and I set a "ignoredMethodMappings" value that just referenced one bean name, and 2 methods of that bean.  I did NOT set the "ignoredMethods" property at all.
When I connected again through my jmx browser, all the beans were still available, but I could not see any methods or properties on any of them.
I then inspected the source code for MethodExclusionMBeanInfoAssembler in version 1.2.8.  The method "isNotIgnored(Method,String)", which appears to be the method where the "ignoredMethods" and "ignoredMethodMappings" data is referenced, consists of the following:
-------------------
	protected boolean isNotIgnored(Method method, String beanKey) {
		if (this.ignoredMethodsMappings != null) {
			Set methodNames = (Set) this.ignoredMethodsMappings.get(beanKey);
			if (methodNames != null) 
{
				return ! methodNames.contains(method.getName());
			}
		}
		return (this.ignoredMethods != null && ! this.ignoredMethods.contains(method.getName())); // wrong
	}
-------------------
I did not step through this code in the debugger, but I can see that if I call this with a method and bean that is not mentioned in my "ignoredMethodMappings" list, then the return value will be "false". This is because of the last return statement. If "ignoredMethods" is null, the value will be false.  The following is an attempted informal patch to this problem:
-------------------
	protected boolean isNotIgnored(Method method, String beanKey) {
       boolean result = true;
		if (this.ignoredMethodsMappings != null) {
			Set methodNames = (Set) this.ignoredMethodsMappings.get(beanKey);
			if (methodNames != null) 
{
				result   = ! methodNames.contains(method.getName());
			}
		}
		if (this.ignoredMethods != null)
          result  = ! this.ignoredMethods.contains(method.getName()));
      return (result);
	}
-------------------