I wouldn't expect getObject() to be called on this bean:
public class TestBean implements FactoryBean {
    public Object getObject() 
{
        throw new IllegalStateException("should never be called");
    }

    public Class getObjectType() 
{
        return String.class;
    }

    public boolean isSingleton() 
{
        return false;
    }
}
when configured like this:
<beans>
    <bean class="springext.TestBean" />
</beans>
public class Test {
    public static void main(String[] args) 
{
        new FileSystemXmlApplicationContext("test.xml");
    }
}
But I do get the IllegalStateException:
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'springext.TestBean': FactoryBean threw exception on object creation; nested exception is java.lang.IllegalStateException: should never be called
Caused by: java.lang.IllegalStateException: should never be called
	at springext.TestBean.getObject(TestBean.java:10)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectFromFactoryBean(AbstractBeanFactory.java:984)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:959)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:272)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:168)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:253)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:332)
	at org.springframework.context.support.FileSystemXmlApplicationContext.<init>(FileSystemXmlApplicationContext.java:89)
	at org.springframework.context.support.FileSystemXmlApplicationContext.<init>(FileSystemXmlApplicationContext.java:74)
	at org.springframework.context.support.FileSystemXmlApplicationContext.<init>(FileSystemXmlApplicationContext.java:65)
	at springext.Test.main(Test.java:10)
Looking at preInstantiateSingletons() in DefaultListableBeanFactory:
...
if (bd.hasBeanClass() && FactoryBean.class.isAssignableFrom(bd.getBeanClass())) {
    FactoryBean factory = (FactoryBean) getBean(FACTORY_BEAN_PREFIX + beanName);
    if (factory.isSingleton()) 
{
        getBean(beanName);
    }
}
else {
    getBean(beanName);
}
...
It turns out that the else block is executed instead of the if block, because bd.hasBeanClass() returns false, because the AbstractBeanDefinition's beanClass property is still the class name String instead of the Class object. I guess everything would be fine if hasBeanClass() returned true...
Is this a bug or intended behavior?