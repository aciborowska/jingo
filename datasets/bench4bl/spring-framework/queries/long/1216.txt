Specific scenario, running JUnit test cases extending 
{@link org.springframework.test.AbstractTransactionalSpringContextTests}
 where the application utilises org.hibernate.jmx.StatisticsService as defined in spring-data-access-context.xml (see below), test fail due to :
<testcase classname="TestActionTypeDaoImpl" name="testGetAll" time="17.375">
    <error message="Error creating bean with name &aposjmxExporter&apos defined in class path resource [spring-data-access-context.xml]: Initialization of bean failed; nested exception is javax.management.InstanceAlreadyExistsException: Hibernate:name=hbmStats" type="org.springframework.beans.factory.BeanCreationException">org.springframework.beans.factory.BeanCreationException: Error creating bean with name &aposjmxExporter&apos defined in class path resource [spring-data-access-context.xml]: Initialization of bean failed; nested exception is javax.management.InstanceAlreadyExistsException: Hibernate:name=hbmStats
javax.management.InstanceAlreadyExistsException: Hibernate:name=hbmStats
	at com.sun.jmx.mbeanserver.RepositorySupport.addMBean(RepositorySupport.java:452)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.internal_addObject(DefaultMBeanServerInterceptor.java:1410)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerObject(DefaultMBeanServerInterceptor.java:936)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:337)
	at com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:497)
	at org.springframework.jmx.export.MBeanExporter.registerMBean(MBeanExporter.java:413)
	at org.springframework.jmx.export.MBeanExporter.registerBeanInstance(MBeanExporter.java:389)
	at org.springframework.jmx.export.MBeanExporter.registerBeanNameOrInstance(MBeanExporter.java:369)
	at org.springframework.jmx.export.MBeanExporter.registerBeans(MBeanExporter.java:296)
	at org.springframework.jmx.export.MBeanExporter.afterPropertiesSet(MBeanExporter.java:240)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1003)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:348)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:147)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:275)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:317)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:80)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:65)
	at org.springframework.test.AbstractSpringContextTests.loadContextLocations(AbstractSpringContextTests.java:121)
	at org.springframework.test.AbstractDependencyInjectionSpringContextTests.loadContextLocations(AbstractDependencyInjectionSpringContextTests.java:159)
	at org.springframework.test.AbstractSpringContextTests.getContext(AbstractSpringContextTests.java:101)
	at org.springframework.test.AbstractDependencyInjectionSpringContextTests.setUp(AbstractDependencyInjectionSpringContextTests.java:127)
</error>
spring-data-access-context.xml defined as ....
...
    <bean id="jmxExporter"
          class="org.springframework.jmx.export.MBeanExporter"
          depends-on="jmxServer">
        <property name="beans">
            <map>
                <entry key="Hibernate:name=hbmStats">
                    <ref bean="hibernateStatisticsJMXBean"/>
                </entry>
            </map>
        </property>
    </bean>
    <bean id="hibernateStatisticsJMXBean"      class="org.hibernate.jmx.StatisticsService">
        <property name="statisticsEnabled">
            <value>true</value>
        </property>
        <property name="sessionFactory">
            <ref bean="sessionFactory"/>
        </property>
    </bean>
    <bean id="jmxServer"         class="org.springframework.jmx.support.MBeanServerFactoryBean">
        <property name="defaultDomain">
            <value>dummyDomain</value>
        </property>
    </bean>
...
My current work around class....
/** The SpringFrameworks (v.1.2.3) 
{@link org.springframework.jmx.export.MBeanExporter}
 does not detect

MBeans already registered and may attempt to register duplicate MBeans.  Either a unique / dynamic
object naming convention could be employed to avoid this or alternatively, simply ignore
{@link javax.management.InstanceAlreadyExistsException}
 exceptions which is the policy
employed by this class.
 *
@author Cameron Clarke
@version $Id: $
 */

import org.springframework.beans.factory.BeanFactoryAware;
import org.springframework.beans.factory.DisposableBean;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.jmx.export.MBeanExporter;
import javax.management.JMException;
import javax.management.InstanceAlreadyExistsException;
public class SpringMBeanExporter extends MBeanExporter implements BeanFactoryAware, InitializingBean, DisposableBean
{
    protected void registerBeans() throws JMException
    {
        try

{
            super.registerBeans();
        }
 catch (InstanceAlreadyExistsException ex)
        {
            logger.error("Instance already exists, registering JMX bean failed.", ex);
        }
    }
}