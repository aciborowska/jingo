The version bump from 2.5 to 2.5.1 breaks component scanning for me. Symptoms are that lots of beans annotated with @Component are being skipped for inclusion as beans. After digging through the code, I think the following commit is the culprit:
http://fisheye1.cenqua.com/changelog/springframework?cs=MAIN:jhoeller:20080107164524
The commit message says:
added "getEnclosingClassName()", "hasEnclosingClass()" and "isIndependent()" methods to ClassMetadata interface; ClassPathScanningCandidateComponentProvider ("context:component-scan") ignores non-static inner and local classes
I am not sure why beanDefinition.getMetadata().isIndependent() is returning false for my classes. The scenario is as follows:
MyBroker has @Component annotation. MyBroker uses a class MyService (regular instantiation) using something like:
        MyService service = new MyService()
MyService, in turn, is the class which DOES have a local inner class. I think the bug is in identifying MyBroker as having an inner class. It should not identify MyBroker as having an inner class (since it doesn't have one).
ClassMetaDataReadingVisitor.java has the following method:
	public boolean isIndependent() 
{
		return (this.enclosingClassName == null || this.independentInnerClass);
	}

In that method, while trying to see if MyBroker is a candidate, enclosingClassName is set to MyService.
I think this needs a quick fix.