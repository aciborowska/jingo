The Spring documentation says:
this - limits matching to join points (the execution of methods when using Spring AOP) where the bean reference (Spring AOP proxy) is an instance of the given type
However, instead of the Spring AOP proxy the target seems to be used. Using this and target for parameter binding works as expected (i.e. target gives the target and this the Spring AOP proxy) but the selection by type does not work.
Here is the code from the attached example. It uses a class that inherits from ImplBase and implements AnInterface. The proxy will only implement AnInterface. However, this(impl.ImplBase) matches the Proxy but you cannot assign it to ImplBase parameter in the doesNotWork()-method.
    // Does not work because Spring AOP Proxy does not implement ImplBase
    // just impl.AnInterface, you can try it by uncommenting the line below
    //@Before("within(impl.*) && this(para)")
    public void doesNotWork(ImplBase para) 
{
        System.out.println(para.getClass());
    }

    // we get the proxy
    @Before("within(impl.*) && this(para)")
    public void getTheProxy(AnInterface para) {        System.out.println(para.getClass());    }


    // But why does this work?
    @Before("this(impl.ImplBase)")
    public void shouldNotWork() 
{
        System.out.println("Should not work");
    }