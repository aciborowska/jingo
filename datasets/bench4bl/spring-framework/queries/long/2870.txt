I expect there is a race problem in the applicationcontext.
Go to the getBean method in AbstractBeanFactory 
and continue to this line:
Object sharedInstance = getSingleton(beanName);
Multiple threads are able to execute this statement at exactly the same moment (there is no exclusion). This means that they all could get a null value and they are now able to go to the else part of the if statement.
When you go to the beginning of the else part, you will see this:
// Fail if we're already creating this singleton instance:
// We're assumably within a circular reference.
if (isSingletonCurrentlyInCreation(beanName)) {
    throw new BeanCurrentlyInCreationException(beanName);
}
This method is not going to stop them either. Eventually they all can call the createBean method and this means that multiple instances of the singleton bean could be created.
Solution:
Difficult question. The most simplest thing to do would be to add a monitor surrounding this class by making all methods synchronized. But what worries me is that deadlocks are more likely to occur. I will think about this one makes some oil-like coffee.