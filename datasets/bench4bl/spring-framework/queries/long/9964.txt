Since upgrading to 3.2.0 RC1, a base controller no longer works for any method parameters of @ReponseBody that utilizes a generic that extends anything.  
For example, the following abstract controller fails in 3.2.0 RC1






public abstract class AbstractTestController<DTO extends Identifiable>




{




  @RequestMapping(value = "/test", method = RequestMethod.POST)




  public @ResponseBody DTO test(@RequestBody DTO dto)  {




    // this method does not work with Spring 3.2




    return dto;




  }




Â 




  @RequestMapping(value = "/testList", method = RequestMethod.POST)




  public @ResponseBody List<DTO> test(@RequestBody List<DTO> dtoList)  {




    // this method does work with Spring 3.2




    return dtoList;




  }




}






The following example below where the DTO generic doesn't extend another works OK in 3.2.0 RC1.






public abstract class AbstractTestController<DTO>




{




  @RequestMapping(value = "/test", method = RequestMethod.POST)




  public @ResponseBody DTO test(@RequestBody DTO dto)  {




    // this method does work with Spring 3.2




    return dto;




  }




}






It looks like there was a fix put in the 3.2.0 M2 release SPR-8381 that may be where the existing functionality broke.
I've also narrowed it down to 
org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor class Line 95 (parameter.getGenericParameterType()). Is there something we need to do different?
I'm uploading some test controllers, etc that can be used to recreate the  issue. 