I have written my own PropertyEditor that converts JDK 1.5 style Enums to Strings and back. I am using that editor in the following context:
<spring:bind path="command.invitationType">
<c:forEach var="type" items="$
{invitation_types}
">
<spring:transform value="$
{type}
" var="typeString"/>
</c:forEach>
</spring:bind>
Unfortunately, the spring:transform tag yields the following Exception:
java.lang.ClassCastException: java.lang.String
	EnumEditor.getAsText(EnumEditor.java:26)
It seems as if some part of Spring uses setValue() on my EnumEditor to set a String (the toString()ed Enum to be exact). Of course, it is expecting an Enum class.
In the example I will upload shortly I have overridden my Enums (InvitationType) toString() to return "0xdeadbeef", and my PropertyEditors (EnumEditor) setValue() to throw an UnsupportedOperationException with the parameter as message.
The following exception is thrown:
java.lang.UnsupportedOperationException: value: 0xdeadbeef
	EnumEditor.setValue(EnumEditor.java:36)
org.springframework.validation.BindException.getFieldValue(BindException.java:306)
org.springframework.web.servlet.support.BindStatus.<init>(BindStatus.java:114)
org.springframework.web.servlet.tags.BindStatus.<init>(BindStatus.java:38)
org.springframework.web.servlet.tags.BindTag.doStartTagInternal(BindTag.java:105)
org.springframework.web.servlet.tags.RequestContextAwareTag.doStartTag(RequestContextAwareTag.java:71)
org.apache.jsp.demo_jspx._jspService(demo_jspx.java:67)
Why does this BindException call setValue() with a toString'ed() version of my Enum? Shouldn't it use the object itself?? I suspect there is something very wrong here.
I will upload a complete demonstration shortly.