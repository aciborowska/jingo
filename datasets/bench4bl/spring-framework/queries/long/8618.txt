Problem
I've implemented an ApplicationContextInitializer as follows:






public class MyInitializer implements ApplicationContextInitializer<ConfigurableApplicationContext> {




 




    public void initialize(ConfigurableApplicationContext appCtx) {




        // ...




    }




}






However, when specified in my Spring web app's web.xml:






<context-param>




    <param-name>contextInitializerClasses</param-name>




    <param-value>com.foo.MyInitializer</param-value>




</context-param>






The application does not start up.
The failure is an Assertion failure, line 467 of 3.1.0.M2's org/springframework/web/context/ContextLoader.java.
The assertion is failing because the GenericTypeResolver.resolveTypeArgument call on line 466 returns null for whatever reason (I've clearly implemented the interface properly).
Work Around
I created a subclass of ContextLoaderListener that overrides the customizeContext() method and retains the same behavior, but does a null check:






Class<?> initializerContextClass =




    GenericTypeResolver.resolveTypeArgument(initializerClass, ApplicationContextInitializer.class);




 




//CHANGE STARTS: WRAP IN !NULL CHECK:




if (initializerContextClass != null) {




    Assert.isAssignable(initializerContextClass, contextClass, String.format(




        "Could not add context initializer [%s] as its generic parameter [%s] " +




        "is not assignable from the type of application context used by this " +




        "context loader [%s]", initializerClass.getName(), initializerContextClass, contextClass));




}




//CHANGE ENDS (finish !null check)






The !null check is the only addition.  Everything else in the original implementation stayed the same.
After adding this check, the application started as expected.
Assumption
It appears there may be a root cause bug with the GenericTypeResolver, but I'm not sure.  I have no idea why it returned null when, based on my class/implementation, I clearly implemented the interface (and specified the generics type) correctly.