The DefaultListableBeanFactory.isBeanTypeMatch() method only considers the value returned bean.getClass() when determining whether the bean type matches the type specified.  Callers of this method must consider that a bean may be a proxied class (like the HttpInvokerProxyFactoryBean) in which case the call to getClass() will return the Proxy instead of the implementing class.
Since the getBeansOfType method relies on isBeanTypeMatch to determine if a bean is of the specfied type, it must handle the case where a bean is actually a Proxy.  
The following implementation illustrates a potential solution.  If the call to getBeanTypeMatch() returns false and the RootBeanDefinition of the bean being checked for the specified type is assignable from the specified type, then that bean is included in the result.
public Map getBeansOfType(Class type, boolean includePrototypes, boolean includeFactoryBeans) throws BeansException {
    Map result = new HashMap();
    Iterator it = beanDefinitionNames.iterator();
    do {
        if (!it.hasNext())
            break;
        String beanName = (String) it.next();
        RootBeanDefinition rbd = getMergedBeanDefinition(beanName, false);
        if (!rbd.isAbstract() && rbd.hasBeanClass() && (includePrototypes || rbd.isSingleton()))
            if ((org.springframework.beans.factory.FactoryBean.class).isAssignableFrom(rbd.getBeanClass())) 
{
                if (includeFactoryBeans && (includePrototypes || isSingleton(beanName)) && (isBeanTypeMatch(beanName, type) || (type.isAssignableFrom(rbd.getBeanClass()))))
                    addBeanToResultMap(beanName, result);
            }
 else if (type == null || type.isAssignableFrom(rbd.getBeanClass()))
                addBeanToResultMap(beanName, result);
    } while (true);
    String singletonNames[] = getSingletonNames();
    for (int i = 0; i < singletonNames.length; i++) 
{
        String beanName = singletonNames[i];
        RootBeanDefinition rbd = getMergedBeanDefinition(beanName, false);
        if (!containsBeanDefinition(beanName) && isSingleton(beanName) && (isBeanTypeMatch(beanName, type) || (type.isAssignableFrom(rbd.getBeanClass())) && (includeFactoryBeans || !isFactoryBean(beanName))))
            addBeanToResultMap(beanName, result);
    }

    return result;
}