The following method isn't really parsing BigDecimal in the right way :
public static Number parseNumber(String text, Class targetClass, NumberFormat numberFormat)
because the conversion process is the following :  String -> Double -> String -> BigDecimal
As you can see, there is one step (String -> Double -> String) that you must remove, because errors are introduced by this useless conversion. You must directly convert String to BigDecimal with the constructor BigDecimal(String)
Maybee you can update the method convertNumberToTargetClass to pass the original String ...
Here is my TestCase to show the error :
package org.springframework.util;
import java.math.BigDecimal;
import java.text.NumberFormat;
import java.util.Locale;
import junit.framework.TestCase;
/**

@author Eric Ballet-Baz
 */
public class TestNumberUtils extends TestCase {

    public void testParseBigDecimalNumber1() 
{
        String bigDecimalAsString = "0.10";
        
        NumberFormat numberFormat = NumberFormat.getInstance(Locale.ENGLISH);
        Number bigDecimal = NumberUtils.parseNumber(bigDecimalAsString, BigDecimal.class, numberFormat);
        assertEquals(new BigDecimal(bigDecimalAsString), bigDecimal);
    }

    public void testParseBigDecimalNumber2() 
{
        String bigDecimalAsString = "0.001";
        
        NumberFormat numberFormat = NumberFormat.getInstance(Locale.ENGLISH);
        Number bigDecimal = NumberUtils.parseNumber(bigDecimalAsString, BigDecimal.class, numberFormat);
        assertEquals(new BigDecimal(bigDecimalAsString), bigDecimal);
    }

    public void testParseBigDecimalNumber3() 
{
        String bigDecimalAsString = "3.14159265358979323846";
        
        NumberFormat numberFormat = NumberFormat.getInstance(Locale.ENGLISH);
        Number bigDecimal = NumberUtils.parseNumber(bigDecimalAsString, BigDecimal.class, numberFormat);
        assertEquals(new BigDecimal(bigDecimalAsString), bigDecimal);
    }
}
Thanks
Eric Ballet-Baz