Consider this class:
public class AuthenticationLogger {
    private static Log log = LogFactory.getLog(AuthenticationLogger.class);
    public void logAuthenticationAttempt(int userId) 
{
        log.info("User ID [" + userId + "] attempts to authenticate.");
    }

    public void logAuthenticationAttempt(String username) 
{
        log.info("User [" + username + "] attempts to authenticate.");
    }

}
that's configured as POJO advice:
    <aop:config>
        <aop:pointcut id="authenticationMethodwithString" expression="execution(boolean *..SecurityManager.authenticate(..)) and args(username,String)"/>
        <aop:aspect ref="authenticationLogger">
            <aop:advice pointcut-ref="authenticationMethodwithString" method="logAuthenticationAttempt" kind="before"/>
        </aop:aspect>
    </aop:config>
for this target class:
public class SecurityManager {
    public boolean authenticate(String username, String password) 
{
        return RandomUtils.nextBoolean();
    }

    public boolean authenticate(int userId, String password) {        return RandomUtils.nextBoolean();    }
}
This results in an exception (below) because MethodLocationFactoryBean incorrectly resolves the logAuthenticationAttempt(int) method.
A workaround is to configure the advice as:
            <aop:advice pointcut-ref="authenticationMethodwithString" method="logAuthenticationAttempt(java.lang.String)" kind="before"/>
An exception should be thrown when an overloaded method is selected on POJO advice and no type information is provided.
Exception stack trace:
=========================
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'authenticationLogger' defined in class path resource [com/apress/beginning_spring/chapter4/security/security-context.xml]: Initialization of bean failed; nested exception is java.lang.IllegalArgumentException: warning no match for this type name: username [Xlint:invalidAbsoluteTypeName]
java.lang.IllegalArgumentException: warning no match for this type name: username [Xlint:invalidAbsoluteTypeName]
	at org.aspectj.weaver.tools.PointcutParser.parsePointcutExpression(PointcutParser.java:326)
	at org.springframework.aop.aspectj.AspectJExpressionPointcut.checkReadyToMatch(AspectJExpressionPointcut.java:168)
	at org.springframework.aop.aspectj.AspectJExpressionPointcut.getClassFilter(AspectJExpressionPointcut.java:103)
	at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:195)
	at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:228)
	at org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply(AopUtils.java:247)
	at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:76)
	at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:62)
	at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:240)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:306)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:837)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:409)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:238)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:148)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:253)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:331)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:87)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:72)
	at org.springframework.test.AbstractSpringContextTests.loadContextLocations(AbstractSpringContextTests.java:135)
	at org.springframework.test.AbstractDependencyInjectionSpringContextTests.loadContextLocations(AbstractDependencyInjectionSpringContextTests.java:224)
	at org.springframework.test.AbstractSpringContextTests.getContext(AbstractSpringContextTests.java:115)
	at org.springframework.test.AbstractDependencyInjectionSpringContextTests.setUp(AbstractDependencyInjectionSpringContextTests.java:192)
	at com.intellij.rt.execution.junit2.JUnitStarter.main(JUnitStarter.java:31)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:86)
