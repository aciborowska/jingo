Spring seems to assume (rightly so or not) that Connection.setSavepoint() will always return a savepoint with a unique name for each call.    When I use nested transactions using the DB2 Universal Driver, I get the following execeptions in the tracelog:
com.ibm.db2.jcc.b.SqlException: This is an un-named savepoint.
        at com.ibm.db2.jcc.b.dd.getSavepointName(dd.java:45)
        at com.ibm.db2.jcc.b.o.a(o.java:1896)
        at com.ibm.db2.jcc.b.o.setSavepoint(o.java:1866)
        at org.apache.commons.dbcp.DelegatingConnection.setSavepoint(DelegatingConnection.java:338)
        at org.apache.commons.dbcp.PoolingDataSource$PoolGuardConnectionWrapper.setSavepoint(PoolingDataSource.java:340)
        at org.springframework.jdbc.datasource.JdbcTransactionObjectSupport.createSavepoint(JdbcTransactionObjectSupport.java:131)
        at org.springframework.transaction.support.AbstractTransactionStatus.createAndHoldSavepoint(AbstractTransactionStatus.java:132)
        at org.springframework.transaction.support.AbstractPlatformTransactionManager.handleExistingTransaction(AbstractPlatformTransactionManager.java:375)
        at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:296)
        at org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary(TransactionAspectSupport.java:234)
        at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:93)
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:170)
        at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:647)
        at cv.vendorlink.service.ActivityItemProcessor$$EnhancerByCGLIB$$2179b703.processFilledOrder(<generated>)
        at cv.vendorlink.service.LoadFileProcessorImpl.processLoadVault(LoadFileProcessorImpl.java:140)
        at cv.vendorlink.service.LoadFileProcessorImpl.processFile(LoadFileProcessorImpl.java:106)
        at cv.vendorlink.service.LoadFileProcessorImpl$$FastClassByCGLIB$$7ef95e46.invoke(<generated>)
        at net.sf.cglib.proxy.MethodProxy.invoke(MethodProxy.java:149)
        at org.springframework.aop.framework.Cglib2AopProxy$CglibMethodInvocation.invokeJoinpoint(Cglib2AopProxy.java:709)
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:148)
        at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:100)
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:170)
        at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:647)
        at cv.vendorlink.service.LoadFileProcessorImpl$$EnhancerByCGLIB$$b3a8bf83.processFile(<generated>)
        at cv.vendorlink.service.LoadServiceImpl.runService(LoadServiceImpl.java:113)
        at cv.vendorlink.service.AbstractService.run(AbstractService.java:80)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:585)
        at org.springframework.util.MethodInvoker.invoke(MethodInvoker.java:276)
        at org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean$MethodInvokingJob.executeInternal(MethodInvokingJobDetailFactoryBean.java:
177)
        at org.springframework.scheduling.quartz.QuartzJobBean.execute(QuartzJobBean.java:90)
        at org.quartz.core.JobRunShell.run(JobRunShell.java:203)
        at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:520)
[ibm][db2][jcc] END TRACE_DIAGNOSTICS
[ibm][db2][jcc] [t4][time:1151618230305][thread:Vendorlink_Worker-2][tracepoint:5][Request.flush]
[ibm][db2][jcc][t4]        SEND BUFFER: EXCSQLIMM              (ASCII)           (EBCDIC)
[ibm][db2][jcc][t4]        0 1 2 3 4 5 6 7   8 9 A B C D E F   0123456789ABCDEF  0123456789ABCDEF
[ibm][db2][jcc][t4] 0000   0058D05100010052  200A00442113C3E5  .X.Q...R ..D!...  ..}...........CV
[ibm][db2][jcc][t4] 0010   C9C1E3E2C4C24040  4040404040404040  ......@@@@@@@@@@  IATSDB
[ibm][db2][jcc][t4] 0020   D5E4D3D3C9C44040  4040404040404040  ......@@@@@@@@@@  NULLID
[ibm][db2][jcc][t4] 0030   4040E2E8E2E2C8F2  F0F0404040404040  @@........@@@@@@    SYSSH200
[ibm][db2][jcc][t4] 0040   404040405359534C  564C303100410005  @@@@SYSLVL01.A..      ...<.<......
[ibm][db2][jcc][t4] 0050   2105F10005210E01                    !....!..          ..1.....
[ibm][db2][jcc][t4]
[ibm][db2][jcc][t4]        SEND BUFFER: SQLSTT                 (ASCII)           (EBCDIC)
[ibm][db2][jcc][t4] 0000   004DD00300010047  2414000000003D53  .M.....G$.....=S  .(}.............
[ibm][db2][jcc][t4] 0010   415645504F494E54  20224A43435F4745  AVEPOINT "JCC_GE  ...&|.+.........
[ibm][db2][jcc][t4] 0020   4E454E4552415445  445F4E414D455F31  NENERATED_NAME_1  ........+.(...
[ibm][db2][jcc][t4] 0030   22204F4E20524F4C  4C4241434B205245  " ON ROLLBACK RE  ..|+..|<<.......
[ibm][db2][jcc][t4] 0040   5441494E20435552  534F5253FF        TAIN CURSORS.     ...+.....|...
[ibm][db2][jcc][t4]
[ibm][db2][jcc] [t4][time:1151618230306][thread:Vendorlink_Worker-2][tracepoint:2][Reply.fill]
[ibm][db2][jcc][t4]        RECEIVE BUFFER: SQLCARD             (ASCII)           (EBCDIC)
[ibm][db2][jcc][t4]        0 1 2 3 4 5 6 7   8 9 A B C D E F   0123456789ABCDEF  0123456789ABCDEF
[ibm][db2][jcc][t4] 0000   000BD00300010005  2408FF            ........$..       ..}........
[ibm][db2][jcc][t4]
You'll notice that the name the driver assigns to the savepoint is "JCC_GENERATED_NAME_1".  subsequent calls to Connection.setSavepoint() generate the same exception and the same savepoint name.  The end result is that no new savepoint is actually created and the entire transaction becomes one big transaction.   A call to rollback(Savepoint) results in all transactions getting rolled back because they all have the same name!  So nested transactions don't seem to work with the DB2 Universal Driver.
Have you guys run your nested transaction unit tests against the IBM Universal Driver?