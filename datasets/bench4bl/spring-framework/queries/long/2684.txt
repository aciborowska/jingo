I've been asked to create this JIRA for issue I've encountered with the SpringSessionSynchronisation class after moving our application from Hibernate 3.0 to 3.1. 
Essentially, it looks like Spring is closing the Hibernate session and then attempting to reconnect to it and complaining that it has been closed i.e.
2006-10-04 11:42:00,281 DEBUG  AAAScheduler_Worker-4 org.springframework.transaction.interceptor.TransactionInterceptor - Invoking commit for transaction on com.aaa.bbb.core.business.billing.BillingService.processPaymentRequests
2006-10-04 11:42:00,281 DEBUG  AAAScheduler_Worker-4 org.springframework.orm.hibernate3.SessionFactoryUtils - Flushing Hibernate Session on transaction synchronization
2006-10-04 11:42:00,281 DEBUG  AAAScheduler_Worker-4 org.springframework.orm.hibernate3.SessionFactoryUtils - Flushing Hibernate Session on transaction synchronization
2006-10-04 11:42:00,281 DEBUG  AAAScheduler_Worker-4 org.springframework.transaction.support.TransactionSynchronizationManager - Removed value [org.springframework.orm.hibernate3.SessionHolder@556547] for key [org.hibernate.impl.SessionFactoryImpl@be5687] from thread [AAAScheduler_Worker-4]
2006-10-04 11:42:00,281 DEBUG  AAAScheduler_Worker-4 org.springframework.orm.hibernate3.SessionFactoryUtils - Closing Hibernate Session
2006-10-04 11:42:00,281 ERROR  AAAScheduler_Worker-4 com.aaa.bbb.core.common.event.hibernate.HibernateTransactionManagerEventProducer - TransactionSynchronization.afterCompletion threw exception
org.hibernate.SessionException: Session is closed!
	at org.hibernate.impl.AbstractSessionImpl.errorIfClosed(AbstractSessionImpl.java:49)
	at org.hibernate.impl.SessionImpl.reconnect(SessionImpl.java:374)
	at org.springframework.orm.hibernate3.SessionFactoryUtils$SpringSessionSynchronization.afterCompletion(SessionFactoryUtils.java:981)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.invokeAfterCompletion(AbstractPlatformTransactionManager.java:729)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.triggerAfterCompletion(AbstractPlatformTransactionManager.java:701)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:538)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:473)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.doCommitTransactionAfterReturning(TransactionAspectSupport.java:267)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:106)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:170)
	at com.aaa.bbb.core.business.common.dao.EntitySessionScopeInterceptor.invoke(EntitySessionScopeInterceptor.java:64)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:170)
	at com.aaa.bbb.core.business.common.dao.OptimisticLockInterceptor.invoke(OptimisticLockInterceptor.java:46)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:170)
	at com.aaa.bbb.core.business.aop.PerformanceLoggerInterceptor.invoke(PerformanceLoggerInterceptor.java:377)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:170)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:176)
	at $Proxy99.processPaymentRequests(Unknown Source)
	at com.aaa.bbb.core.business.billing.scheduling.PaymentRequestRunJobWrapper.executeInternal(PaymentRequestRunJobWrapper.java:51)
	at com.aaa.bbb.core.business.common.scheduling.AbstractBbbQuartzJobBean.execute(AbstractBbbQuartzJobBean.java:96)
	at org.quartz.core.JobRunShell.run(JobRunShell.java:195)
	at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:520)
The full details of the issue are described in my post on the Spring forums http://forum.springframework.org/showthread.php?t=29680