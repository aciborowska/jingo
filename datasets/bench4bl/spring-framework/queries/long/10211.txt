Currently GenericConversionService$Converters.find method finds converter by first looping over source types and then over target types, and also neither of the two type candidate collections is sorted on type specificity. Both of this results in most specific converter not being found/used.
See for example FacesConversionServiceTests in Spring Webflow project (3.2.x branch which uses Spring 3.2.0). That test fails (for me) with error that there is no String to DataModel converter. After debugging I've found that real issue is in GenericConversionService$Converters.find method, even though there is converter registered for List to DataModel conversion, Spring's own CollectionToObjectConverter is chosen instead to perform conversion.
In that test/example:

source candidates are:
	
java.util.ArrayList<?>
java.util.AbstractList<?>
java.util.AbstractCollection<?>
java.util.Collection<?>
java.lang.Iterable
java.util.List<?>
java.util.RandomAccess
java.lang.Cloneable
java.io.Serializable
java.lang.Object


while target candidates are:
	
javax.faces.model.DataModel
java.lang.Iterable
java.lang.Object



So when finding most specific converter, by looping over source candidates first and within it over target candidates, less specific Collection to Object converter will be found before more specific List to DataModel converter.
If I'm not mistaken it should be enough to loop over target types in outer loop, and then over source types in inner loop. Also sorting needs to be applied on type specificity in GenericConversionService$Converters.getTypeHierarchy or on its result (both source and target candidates collections), so that e.g. in source candidates a List is before Collection.