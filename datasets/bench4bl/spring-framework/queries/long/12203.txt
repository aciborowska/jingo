
Java 8
Tomcat 6.0.41 (servlet 2.5)
Spring 4.1.0.RELEASE

getStatus() only exists in servlet >=3.0, but it gets called in FrameworkServlet.java (line 1066):






	private void publishRequestHandledEvent(HttpServletRequest request, HttpServletResponse response, long startTime, Throwable failureCause) {




		if (this.publishEvents) {




			// Whether or not we succeeded, publish an event.




			long processingTime = System.currentTimeMillis() - startTime;




			this.webApplicationContext.publishEvent(




					new ServletRequestHandledEvent(this,




							request.getRequestURI(), request.getRemoteAddr(),




							request.getMethod(), getServletConfig().getServletName(),




							WebUtils.getSessionId(request), getUsernameForRequest(request),




							processingTime, failureCause, response.getStatus()));




		}




	}






Causing:






Sep 16, 2014 4:33:08 PM org.apache.catalina.core.StandardWrapperValve invoke




SEVERE: Servlet.service() for servlet SpringMVC threw exception




java.lang.NoSuchMethodError: javax.servlet.http.HttpServletResponse.getStatus()I




	at org.springframework.web.servlet.FrameworkServlet.publishRequestHandledEvent(FrameworkServlet.java:1066)




	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:996)




	at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:874)




	at javax.servlet.http.HttpServlet.service(HttpServlet.java:646)




	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:837)




	at javax.servlet.http.HttpServlet.service(HttpServlet.java:723)




	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)




	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)




	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)




	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)




	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)




	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103)




	at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:615)




	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)




	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293)




	at org.apache.coyote.http11.Http11NioProcessor.process(Http11NioProcessor.java:891)




	at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:750)




	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:2283)




	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)




	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)




	at java.lang.Thread.run(Thread.java:745)






I haven't seen any provision on that code that checks if the method is available in the current environment.
I've double-checked the JARs inside the WAR, looking for misleading javax.servlet.* classes, and I don't have any.
This is similar to https://jira.spring.io/browse/SPR-11712.