Because of the specific implementation of generics in Java, when a non-generic method of a subclass overrides a generic method of its super class, a synthetic bridge method with the signature of the overriden method will be added to the subclass. 
For example: consider a DAO<T> which has a method:
@Transactional(readonly=false)
public void save(T entity);
then create a subclass StudentDAO which extends DAO<Student> and override the save:
@Transactional(readonly=false)
public void save(Student entity);
in StudentDAO.class you will have two different versions of the save method:
1. public void save(Student)
2. public volatile void save(Object)
When trying to call super.save in the mothod save(Student) you get an exception telling you that method doesn't have a read/write transaction because the volatile method mentiond above hides the annotations of DAO<T>.save(T)