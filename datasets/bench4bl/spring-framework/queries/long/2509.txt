If you have a bean like this:
public class ExampleBean {
    private List<List<String>> listOfLists;
    // ...
    public List<List<String>> getListOfLists() 
{
        return listOfLists;
    }

    public void setListOfLists(List<List<String>> listOfLists) 
{
        this.listOfLists = listOfLists;
    }
    // ...
}
Calling setProperty("listOfLists[0][0]", "newValue") on a BeanWrapperImpl wrapping this bean will result in a ClassCastException when you next call getListOfLists().get(0).get(0) (i.e., when you attempt to retrieve the set value).  The actual value set by BeanWrapperImpl is a single-entry ArrayList containing the desired value (e.g., here it would be ["newValue"]).
My hunch is that this is caused by the attempt in BeanWrapperImpl to coerce the set value to the declared generic type.  Unfortunately, it is making the attempt too early.  I have a self-contained test case which illustrates the problem which I will attach.