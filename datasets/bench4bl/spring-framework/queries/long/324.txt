Consider two bean definitions as follows:
<bean name="B" class="B">
  <property name="a"><ref bean="A"/></property>
</bean>
<bean name="A" class="A"/>
Clearly, B depends on A and Spring makes sure that A is initialized when handed to B. However, on destruction, it does not consider this dependency but only explicit 'depends-on'. So, if A and B are DisposableBeans they are destroyed in random order - thus B cannot bet on A being available anymore.
I suggest extending DefaultListableBeanFactory#getDependingBeanNames to include the names of beans that have a <ref> to the bean in question.