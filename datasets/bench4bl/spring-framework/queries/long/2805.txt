In the AbstractBeanDefinition(AbstractBeanDefinition) constructor property values are copied by value but constructor argument values are copied by reference.
When copying a BeanDefinition with this constructor and replacing the copy's values with BeanDefinitionVisitor the constructor values of the original BeanDefinition are also changed. This may have the unintended side effect that the constructor argument values of a parent BeanDefinition are changed when visiting one of its child BeanDefinitions.
This is the workaround we used:
	private void copyConstructorArgumentValuesByValue(ConstructorArgumentValues from, ConstructorArgumentValues to) {
		to.clear();
		Map indexedArgumentValues = from.getIndexedArgumentValues();
		for (Iterator iter = indexedArgumentValues.keySet().iterator(); iter.hasNext() 
{
			Integer key = (Integer) iter.next();
			ValueHolder valueHolder = (ValueHolder) indexedArgumentValues.get(key);
			to.addIndexedArgumentValue(key.intValue(), valueHolder.getValue(), valueHolder.getType());
		}
		List genericArgumentValues = from.getGenericArgumentValues();
		for (Iterator iter = genericArgumentValues.iterator(); iter.hasNext() 
{
			ValueHolder valueHolder = (ValueHolder) iter.next();
			to.addGenericArgumentValue(valueHolder.getValue(), valueHolder.getType());
		}
	}