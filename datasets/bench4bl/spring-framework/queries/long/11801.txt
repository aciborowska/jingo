Please, read this before delete the JIRA issue for being duplicated!!
There is as other JIRA issue that relates this problem BUT it relates it as an "improvement" and its clear that this cannot be considered as an ordinary improvement, I consider it as a serious bug. By the way there is A LOT of resources around the web of people searching for the solution of this (like this http://stackoverflow.com/questions/20500346/error-no-session-bound-to-current-thread-with-hibernate-4-and-spring-3). They are using this workaround (https://gist.github.com/nexdrew/6992329). The problem is that, as @Fabricio Carvalho said, The side effect caused by this approach is the overhead of creating and using a HibernateTransactionManager on simple queries. Not in resource consumption of the database, but in processing of the application server..
Here is the description of the issue

The Hibernate4 support of Spring 3.1 does not open and register a session in case of the method called is annotated with @Transactional(propagation = Propagation.SUPPORTS).
In this case HibernateTransactionManager.doBegin() is never called which is the only place where hibernate session is opened. The result is, that all read operations which do not require a transaction will fail because the call to SessionFactory.currentSession() will result in an exception.
The Hibernate3 implementation contains a fallback for this case in SessionFactoryUtils.doGetSession(...) which is missing in the corresponding Hibernate4 implementation of SpringSessionContext.currentSession().
If the transaction propagation is changed to REQUIRES_NEW everything is working fine.
The related JIRA issue is https://jira.spring.io/browse/SPR-9020