Hi,
When trying to use a static method to create an object, I'm getting a NoSuchMethodException for the parameters i'm passing if the arguments are either a subtype or subclass of the required argument types.
I have updated the org.springframework.util.MethodInvoker prepare method, to accept this possibility.
snippet below:
	public void prepare() throws ClassNotFoundException, NoSuchMethodException {
		if (this.targetClass == null && this.targetObject == null) 
{
			throw new IllegalArgumentException("Either targetClass or targetObject is required");
		}
		if (this.targetMethod == null) 
{
			throw new IllegalArgumentException("targetMethod is required");
		}

		if (this.arguments == null) 
{
			this.arguments = new Object[0];
		}

		Class[] types = new Class[this.arguments.length];
		for (int i = 0; i < this.arguments.length; ++i) {
			if (this.arguments[i] != null) 
{
				types[i] = this.arguments[i].getClass();
			}
		}
		// try to get the exact method first
		Class targetClass = (this.targetObject != null) ? this.targetObject.getClass() : this.targetClass;
		try 
{		    
			this.methodObject = targetClass.getMethod(this.targetMethod, types);			
		}
		catch (NoSuchMethodException ex) {
		    System.out.println("caught the exception");
		    // Get a list of the available methods
		    Method[] targetMethods = targetClass.getMethods();
	        for(int i = 0; i < targetMethods.length; i++) {
	            Method method = targetMethods[i];
	            if(method.getName().equalsIgnoreCase(targetMethod)) {
	                Class[] methodTypes = method.getParameterTypes();
	                // Check if the inspected method has the same number of methods
	                if(methodTypes.length == arguments.length) {
	                    int numberOfCorrectArguments = 0;
	                    for(int j = 0; j < types.length; j++) {
	                        // Verify that the supplied argument is assignable to the method argument type
	                        if(methodTypes[j].isAssignableFrom(arguments[j].getClass())) 
{                            
	                            numberOfCorrectArguments++;
	                        }
	                    }
	                    if(numberOfCorrectArguments == types.length) 
{
	                        this.methodObject = method;
	                        i = targetMethods.length;
	                    }
	                }
	            }
	        }
			// just rethrow exception if we can't get a match
			if (this.methodObject == null) 
{
				throw ex;
			}
		}
		if (this.targetObject == null && !Modifier.isStatic(this.methodObject.getModifiers())) 
{
			throw new IllegalArgumentException("Target method must not be non-static without a target");
		}
	}
