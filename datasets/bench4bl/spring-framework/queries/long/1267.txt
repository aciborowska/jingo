CVS version 1.2 of RedirectView introduced the correct way of url-encoding parameters in the right character set. Unfortunately, it used the method URLEncoder.encode(String s, String enc) which exists since jdk1.4.
Presumably to remain compatible with jdk1.3, cvs version 1.3 of the file removed this call, but introduced broken code that performs no function:
String encodedKey = URLEncoder.encode(entry.getKey().toString());
// ...
url.append(new String(encodedKey.getBytes(this.encodingScheme), this.encodingScheme));
The last line takes a lot of time but has no effect other than to throw an exception if a character is not supported by the encodingScheme, which won't happen.
Because: 

it takes a string (which is already url-encoded, so it it only contains ASCII characters),
translates it to a byte array in the encodingScheme encoding
it then turns the byte array back into the original string, by decoding it usinjg the same encodingScheme

This only takes CPU time, otherwise it's a no-op.
IMO there are two options to fix this bug:
1) Somehow (using reflection or two subclasses) implement the URLEncoder.encode function call differently for jdk1.3 and jdk1.4, where in jdk1.3 it doesn't take the encodingScheme into account.
Since the current implementation doesn't take the encodingScheme into account, and nobody has complained, this isn't a biggy.
2) Roll your own implementation of URLEncoder.encode that takes the encoding into account
I think 2) is the best option. Option 1) is kludgy; using reflection it is too slow, and using two subclasses makes the source not compile with 1.3.
If a committer will promise to commit the code, I'll write an implementation of 2) including unit tests.
