When Spring tries to load the context it fails using JDK 1.3.0
Here is the spring code where it fails in XmlBeanDefinitionReader,
Code:
if (logger.isInfoEnabled()) {
    logger.info("Loading XML bean definitions from " + resource + "");
}
java.lang.ArrayStoreException
at java.lang.System.arraycopy(Native Method)
at java.lang.String.getChars(String.java:552)
at java.lang.StringBuffer.append(StringBuffer.java:402)
at java.lang.StringBuffer.append(StringBuffer.java:370)
at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:119)
at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:83)
at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:101)
at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:69)
at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:87)
at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:262)
at org.springframework.context.support.FileSystemXmlApplicationContext.<init>(FileSystemXmlApplicationContext.java:82)
at org.springframework.context.support.FileSystemXmlApplicationContext.<init>(FileSystemXmlApplicationContext.java:67) 
Example to create the simplest context:
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.FileSystemXmlApplicationContext;
public class TestContext {
    private static ApplicationContext ctx= null;
    static String[] paths = 
{"applicationContext.xml"}
;
    public static void setContext() {
	try 
{
		ctx = new FileSystemXmlApplicationContext(paths);
	}
	catch (Exception e)
{
		e.printStackTrace();
	}
    }
    public TestContext() {}
    public static void main(String args[]) 
{
	    TestContext test = new TestContext();
	    test.setContext();
    }
}
Or Simple code which directly calls and try to log instance of "Resource"
import org.springframework.core.io.Resource;
import org.springframework.core.io.AbstractResource;
import org.springframework.core.io.ClassPathResource;
import org.apache.log4j.Logger;
import java.util.ArrayList;
public class TestContext {
    public TestContext() {}
    public static void main(String args[]) 
{
       TestContext test = new TestContext();
       Logger logger = Logger.getLogger(test.getClass());
       ArrayList a = new ArrayList();
       logger.info("Logging ArrayList To: " + a);
       Resource ar = new ClassPathResource("applicationContext.xml");
            logger.info("Loading XML bean definitions from " + ar);
   }
}
javac -classpath .;lib\spring.jar;lib\commons-logging.jar;lib\xerces.jar;lib\log4j.jar TestContext.java
java -classpath .;lib\spring.jar;lib\commons-logging.jar;lib\xerces.jar;lib\log4j.jar TestContext
The example can log ArrayList object but fails when logging Resource!  Didn't get a chance to look into other object's behaviour other than Resource.
Thanks,
Kunal