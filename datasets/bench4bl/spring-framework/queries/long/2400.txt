There are some documentation bugs/typos in Spring Reference Manual that are not addressed in existing JIRA issues (or I have overlooked them).
Note: page numbers refer to the PDF form of the manual, number in parenthises are chapter numbers. As soon as will progress with my reading more reports may follow 
Page 33 (3.3.4.1):
"XML-based cnfiguration" should read as
"XML-based configuration"
Page 43 (3.4.3.5):
As far as I can see the following is mis-formulated
<!-- a singleton-scoped bean injected with a proxy to the above bean -->
<bean id="userService" class="com.foo.SimpleUserService">
<!-- a reference to the proxied 'userPreferences' bean -->
<property name="userPreferences" ref="userPreferences"/>
</bean>
Injection takes place not to the above bean, but just opposite, above bean is injected (in proxied form) to this bean.
It. BTW, documentation does not state directly, is schema-based configuration mandatory in this case (<aop:scoped-proxy/> element in the injected bean) or it is possible to express the same behavior in an old-style configuration.
Page 54 (3.7.1.1):
Formating issue - schema locations do not fit into grey-background frame.
Page 65 (4.3.2)
Following paragraph is not very clear, probably needs some explanatory example.
"This Resource implementation supports resolution as java.io.File if the class path resource resides in the file
system, but not for classpath resources which reside in a jar and have not been expanded (by the servlet engine,
or whatever the environment is) to the filesystem. It always supports resolution as a java.net.URL."
Page 69 (4.7.1.1)
The following fragment initaially speks about "number of constructors", but then describes
just one. If they are really many something like "see JavaDoc for other convinience
constuctors" will be appropriate.
"The ClassPathXmlApplicationContext exposes a number of constructors to enable convenient instantiation.
The basic idea is ..."
Page 71 (5.3)
Footnote 3 seems to be wrong - beans chapter ceased to mention BeanWrapper. Or it
refers to Javadoc for java.beans package? Then have to be stated explicitely.
Page 74 (5.3.2)
"most fo the primitive types."
shoud read as
"most of the primitive types."
Page 76 (5.3.2.1)
In a sample instead of
if (format != null && format.equals("upperCase")) {
shall be
if (format != null && format.equals("upperCase")) {
Page 76 (5.3.2.1)
Meaning of "example." in following XML snippet is not clear - is it package name
of the ExoticType and ExoticTypeEditor classes? But nippets for these classes
do not contain package name.
<bean id="customEditorConfigurer"
    class="org.springframework.beans.
  <property name="customEditors">
    <map>
       <entry key="example.ExoticType">
         <bean class="example.ExoticTypeEditor">
           <property name="format"
         </bean>
       </entry>
    </map>
  </property>
</bean> 
Page 78 (5.6)
From following explanation is not clear why tooold.age.int will be registered:
"By default, the DefaultMessageCodesResolver is used, which for example not only register a message with the
code you gave, but also messages that include the field name you passed to the reject method. So in case you
reject a field using rejectValue("age", "tooold"), apart from the tooold code, Spring will also register
tooold.age and tooold.age.int (so the first will include the field name and the second will include the type
of the field)."
Page 80  (6.1.1)
Join point definition is very unclear. It is not explained why join point is "join",
and not explained what is a difference between join point and any other points
in program execution flow. Something like 
"A point during the execution of a program, such as the execution of a method or the handling of
an exception where aspects code may be weaved into the program (see below)."  is desirable.
Page 82 (6.1):
There is statement
"It is possible to force the use of CGLIB: we'll discuss this below, and explain why you'd want to do this."
The only problem is that such discussion seems to be absent from documentation
(i.e. discussion that points why forcimng of CGLIB proxies may be needed)
Page 83 (6.2.3)
While it is more or less clear from later chapters, it is better to mention directly that pointcuts
annotaintions are used inside aspects classes.
Page 83 (6.2.3)
Statement "In @AspectJ a pointcut is signature is provided by a regular method 
definition, and the pointcut expression is indicated using the @Pointcut 
annotation." is not very clear, better to be reformulated.
It may be desirable to add after the code snippet someting like 
"In this sample transfer() is a pointcut and 
"execution(* transfer(..))" is a pointcut expression".
Page 86 (6.2.3.4)
"All parts except the returning type pattern," better to express as
"All parts except the returning type pattern (ret-type-pattern in the snippet above),"
Page 93 (6.2.4.6.4)
The method with at least 2 parameters would constiute much better example.
Page ??
Around advice - from where Object[] comes? What for it may be used,
for substituting parameter values with modified ones?
Page 104 (6.3.7):
Example for schema-based AOP proposes to use annotation to mark idempotent operations.
The problem is that schema-based AOP is primarly targeted to developers that can not use
JDK 1.5, so proposed solution is of no big value, It will be better or propose solution
that can be used with JDK 1.5 or directly state that such solution does not exist
(pobably, providing some workaround)
Page 145 (9.5):
Formating issue - schema locations do not fit into grey-background frame and hardly fit into page boundaries (may cause incorrect printout).