We overload the contextKey() and loadContext() in AbstractSingleSpringContextTests in order to load our contexts via ContextSingletonBeanFactoryLocator.  Unfortunately, between rc3 and 2.0-final these methods were marked as final.    Overloading contextKey() is actually still recommended in the javadoc for AbstractSingleSpringContextTests despite now being final.   As an aside, it would actually be handy to build support for a parent context into AbstractSingleSpringContextTests/AbstractSpringContextTests, much like is supported from the web ContextLoaderListener.
Excerpt from AbstractSingleSpringContextTests javadoc:
--------------------------------------------------------------------------------

<p>If you don't want this behavior, you can override the <code>contextKey()</code>
method, most likely to return the test class. In conjunction with this you would
probably override the <code>getContext</code> method, which by default loads
the locations specified in the <code>getConfigLocations()</code> method.

Here is an example of how we we are overloading it:
--------------------------------------------------------------------------------
    protected Object contextKey() 
{
        return "com.mycompany.domain";
    }

    /**

Get the application context.  Adds the applicationContext-test.xml
to the normal domain parent context.
     */
    protected ConfigurableApplicationContext loadContext(Object key) {
        ContextSingletonBeanFactoryLocator factoryLocator = 
            (ContextSingletonBeanFactoryLocator)ContextSingletonBeanFactoryLocator.getInstance();
        BeanFactoryReference beanFactoryReference = factoryLocator.useBeanFactory((String)key);

        ConfigurableApplicationContext parent = 
            (ConfigurableApplicationContext)beanFactoryReference.getFactory();
        return new ClassPathXmlApplicationContext(
                new String[] 
{ "applicationContext-test.xml" }
, parent);
    }
    /**

This method is unused because we are overloading
contextKey()/loadContext().
     */
    protected String[] getConfigLocations() 
{
        return null;
    }

