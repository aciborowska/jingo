I ran into the same issue as described in the referenced Stack Overflow discussion.
When converting from Spring 3.2.x to 4.0.0, the following code results in a javac compile error:
    mockMvc = MockMvcBuilders.webAppContextSetup(context).build();
Interestingly, the Eclipse compiler has no problem with this code, it only fails during a Maven build (which uses javac).  The error encountered was:
[ERROR] /Users/kkrueger/git/Delta-Spring/target/springsource/parentDeltaCoreSpring/rewards/src/main/java/rewardsonline/accounts/test/AbstractAccountControllerIntegrationTests.java:[64,52] incompatible types; inferred type argument(s) java.lang.Object do not conform to bounds of type variable(s) B
found   : <B>org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder<B>
required: java.lang.Object
I found a (somewhat) interesting thread about compiler differences here:  http://stackoverflow.com/questions/3000177/compilers-behave-differently-with-a-null-parameter-of-a-generic-method
The following code resolved the issue:
    mockMvc = MockMvcBuilders.<DefaultMockMvcBuilder> webAppContextSetup(context).build();
However, this does not match what is described in the reference guide at:  http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#spring-mvc-test-framework.  So we should either address the generic issue or revise the documentation.