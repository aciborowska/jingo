While testing some frustrating aspects of "prototypes versus Spring AOP" I got the described NullPointerException. Lars
The exception:
java.lang.NullPointerException
	at org.springframework.aop.target.ThreadLocalTargetSource.getTarget(ThreadLocalTargetSource.java:72)
	at com.foo.tests.spring.proxytest.PrototypeProxyTestCase.createThreadLocalBusinessInterface(PrototypeProxyTestCase.java:133)
	at com.foo.tests.spring.proxytest.PrototypeProxyTestCase.testClearNotASingletonDestroy(PrototypeProxyTestCase.java:84)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at com.intellij.rt.execution.junit2.JUnitStarter.main(JUnitStarter.java:31)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:86)
The test case:
  /**

Tests that I do not get a singleton using a 
{@link org.springframework.aop.framework.ProxyFactoryBean}
 when
the business interface is marked as a prototype. Will destroy the target.
   */
  public void testClearNotASingletonDestroy() 
{
    BusinessImpl business = createThreadLocalBusinessInterface(true);
    BusinessImpl business2 = createThreadLocalBusinessInterface(true);

    Assert.assertNotSame("The two proxied business interfaces are the same (singletons). ", business, business2);
  }

  /**

Creates a business implementation. Uses a singleton target source.
@param destroy if <code>true</code> then the target referenced by the target source is destroyed.
@return a business implementation.
   */
  private BusinessImpl createThreadLocalBusinessInterface(boolean destroy) 
Unknown macro: {    ProxyFactoryBean proxy = (ProxyFactoryBean) applicationContext.getBean("&thread-local-business");    ThreadLocalTargetSource targetSource = (ThreadLocalTargetSource) proxy.getTargetSource();    BusinessImpl business = (BusinessImpl) targetSource.getTarget();  // line 133 that generates the nullpointerexception.    Assert.assertTrue("Target is static", !targetSource.isStatic());    if (destroy) {
      targetSource.destroy();
    }    return business;  } 

The configuration:
  <bean id="thread-local-business" class="org.springframework.aop.framework.ProxyFactoryBean">
    <property name="targetSource" ref="thread-local-business-target-source"/>
    <property name="proxyInterfaces">
      <list>
        <value>com.foo.tests.spring.proxytest.Business</value>
      </list>
    </property>
  </bean>
  <bean id="thread-local-business-target-source" class="org.springframework.aop.target.ThreadLocalTargetSource">
    <property name="targetBeanName"><idref local="business-target"/></property>
  </bean>
  <bean id="prototype-thread-local-business" class="org.springframework.aop.framework.ProxyFactoryBean">
    <property name="targetSource" ref="prototype-thread-local-business-target-source"/>
    <property name="proxyInterfaces">
      <list>
        <value>com.foo.tests.spring.proxytest.Business</value>
      </list>
    </property>
  </bean>
  <bean id="prototype-thread-local-business-target-source" class="org.springframework.aop.target.ThreadLocalTargetSource" singleton="false">
    <property name="targetBeanName"><idref local="business-target"/></property>
  </bean>
  <bean id="business-target" class="com.foo.tests.spring.proxytest.impl.BusinessImpl" singleton="false"/>