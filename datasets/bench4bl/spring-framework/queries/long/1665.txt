AbstractBeanFactory->getBean
The method incorrectly creates instance of the bean in case it is the prototype:
...
else 
{

// It's a prototype -> create a new instance.

bean = createBean(name, mergedBeanDefinition, args);

}
...
There is passed the variable 'name' instead of transformed 'beanName'.
The result is that the  BeanNameAutoProxyCreator doesn't work properly.
Example:
  <bean id="autoProxyCreator" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
    <property name="proxyTargetClass"><value>true</value></property>
    <property name="interceptorNames">
      <list>
        <value>transactionInterceptor</value>
        <value>systemHibernateInterceptor</value>
        <value>endoHibernateInterceptor</value>
      </list>
    </property>
    <property name="beanNames">
      <list>
        <value>*Action</value>
      </list>      
    </property>
  </bean>
  <bean id="showListAction" name="/showList" class="com.gni.genibase.web.action.ShowList" singleton="false">
    <property name="systemManager">
      <ref bean="systemManager"/>
    </property>
  </bean>
autoProxyCreator bean gets beanName '/showList' instead of 'showListAction'. This name doesn't correspond to the declared 'beanNames' property (<value>*Action</value>)
In my opinion it should be:
...
// It's a prototype -> create a new instance.
bean = createBean(beanName, mergedBeanDefinition, args);
...