Since the cache field of the EhcacheFactoryBean is of type Cache instead of the interface Ehcache, when a cache has been registered in the CacheManager that does not extend Cache the factory will fail.  Specifically, the portion of afterPropertiesSet():
if (this.cacheManager.cacheExists(this.cacheName)) {
			if (logger.isDebugEnabled()) 
{
				logger.debug("Using existing EHCache cache region '" + this.cacheName + "'");
 			}
			this.cache = this.cacheManager.getCache(this.cacheName);
		}
will throw a ClassCastException because it uses getCache() instead of getEhcache().  An excerpt from one such exception:
java.lang.ClassCastException: net.sf.ehcache.constructs.blocking.SelfPopulatingCache cannot be cast to net.sf.ehcache.Cache
The solution would be to refactor the EhcacheFactoryBean class to use the Ehcache interface instead.  This may require some refactoring in classes that cast the result of getBean() to Cache (to be more explicitly type safe), but it shouldn't break because the implementations wouldn't change.