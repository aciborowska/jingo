Consider the following collections
Collection pass = ["hello", null]
Collection fail = [null, "hello"]
If CollectionUtil.hasUniqueCollection(pass) is run, it will return true
If CollectionUtil.hasUniqueCollection(fail) is run, it will return false
We routinely use queryForString/int in JdbcDaoSupport to return a single row, and take different action if an incorrectResultSizeException is thrown.  
This could possibly be fixed by first checking to see if elem == candidate before checking if candidate is null
<pre>
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import org.springframework.util.CollectionUtils;
import junit.framework.TestCase;
public class CollectionTest extends TestCase
{
	public void testSpring()
	{
		ArrayList pass = new ArrayList();
		ArrayList fail = new ArrayList();

		pass.add("hello");
		pass.add(null);

		fail.add(null);
		fail.add("hello");

		assertFalse(CollectionUtils.hasUniqueObject(pass));
		assertFalse(CollectionUtils.hasUniqueObject(fail));

	}

	public void testLocal()
	{
		ArrayList pass = new ArrayList();
		ArrayList fail = new ArrayList();

		pass.add("hello");
		pass.add(null);

		fail.add(null);
		fail.add("hello");

		assertFalse(hasUniqueObject(pass));
		assertFalse(hasUniqueObject(fail));

	}

	private static boolean hasUniqueObject(Collection coll)
	{
		if (coll.isEmpty())
		{
			return false;
		}
		Object candidate = null;
		for (Iterator it = coll.iterator(); it.hasNext()
		{
			Object elem = it.next();
			if (candidate ==null && elem == null)
			{
				return false;
			}
			if (candidate == null)
			{
				candidate = elem;
			}
			else if (candidate != elem)
			{				return false;			}
		}
		return true;
	}
}
</pre>