Calling registerSingleton to register a specific object instance as a singleton known to a BeanFactory works fine when the existing BeanDefinition is "compatible". However when the BeanDefinition for that name is "incompatible" incorrect behaviour occurs.
In one possible scenario, BeanIsNotAFactoryException gets thrown.
I'm using registerSingleton in unit test code to explicitly override certain definitions in the application's xml config file.
===code===
  Impl2 myImpl = new Impl2();
  GenericApplicationContext ctx = new GenericApplicationContext();
  XmlBeanDefinitionReader xmlReader = new XmlBeanDefinitionReader(ctx);
  xmlReader.loadBeanDefinitions(new ClassPathResource("example/context.xml"));
  ctx.getBeanFactory().registerSingleton("iface", myImpl);
  ctx.refresh();		
===code===
The above code works fine when the definition for bean "iface" is like this:
  <bean id="iface" class="example.Impl">
  </bean>
However when it looks like this, a BeanIsNotAFactoryException occurs in the ctx.refresh call:
  <bean id="iface" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
    ...
  </bean>
This is presumably because a BeanDefinition has been created when the original config file was parsed, and still
exists even though a singleton has been explicitly registered later.
I think that when registerSingleton is called, the BeanDefinition for that name should be recreated,
so that the definition matches the singleton object. This is presumably the behaviour that occurs when
  registerSingleton("somename", someObj)
is called when somename is not overriding any existing definition.
At the least, javadoc for registerSingleton should be updated to point out that the object registered for a
specific name must be "compatible" with the existing BeanDefinition for that same name.
A workaround is to explicitly register a compatible BeanDefinition, eg:
  RootBeanDefinition beanDef = new RootBeanDefinition(Impl2.class);
  ctx.registerBeanDefinition("iface", beanDef);
  ctx.getBeanFactory().registerSingleton("iface", myImpl);