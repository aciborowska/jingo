(I already mentioned it in the forum, but got no feedback (http://forum.springframework.org/showthread.php?t=30498).)
The DispatcherPortlet allows to use session-scoped beans by injecting a PortletRequestAttributes object into the RequestContextHolder. Unfortunately, this is only done for the action phase, but not for the render phase. So a session scoped bean is not available during the render phase. Now I really wonder why this is the case - or if it is just a bug.
We worked around it by writing a RequestContextInterceptor (reduced to the necessary):
public class RequestContextInterceptor implements HandlerInterceptor {
  public boolean preHandleRender(RenderRequest request_,
                                 RenderResponse response_,
                                 Object handler_) throws Exception 
{
    // Expose current RequestAttributes to current thread.
    PortletRequestAttributes requestAttributes = 
      new PortletRequestAttributes(request_);
    RequestContextHolder.setRequestAttributes(requestAttributes);
    return true;
  }

  public void afterRenderCompletion(RenderRequest request_,
                                    RenderResponse response_, 
                                    Object handler_,
                                    Exception ex_) throws Exception 
{
    PortletRequestAttributes requestAttributes = 
      (PortletRequestAttributes)RequestContextHolder.currentRequestAttributes();
    // Reset thread-bound RequestAttributes.
    requestAttributes.requestCompleted();
    RequestContextHolder.setRequestAttributes(null);
  }

}
The content of the both methods is more or less copied from DispatcherPortlet.doActionService(..). I only wonder why the same is not done for DispatcherPortlet.doRenderService(..).
JÃ¶rg