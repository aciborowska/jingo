 ValidationUtils.invokeValidator(validator, object, errors) throws NullPointerException if object is null:
java.lang.NullPointerException at org.springframework.validation.ValidationUtils.invokeValidator(ValidationUtils.java:53)
This happens when calling getClass() at line 53.
From my point of view the validator itself should decide if null is allowed or not. The step-by-step example assumes the same ( http://www.springframework.org/docs/MVC-step-by-step/Spring-MVC-step-by-step-Part-3.html ):
    public void validate(Object obj, Errors errors) {
        PriceIncrease pi = (PriceIncrease) obj;
        if (pi == null) 
{
            errors.rejectValue("percentage", "error.not-specified", null, "Value required.");
        }


I think it's irrelevant if the validator supports the object if it's null. So a simple patch looks like this:
Original:
if (!validator.supports(object.getClass())) {
Replacement:
if (null != object && !validator.supports(object.getClass())) {
