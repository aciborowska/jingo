During the call to preinstantiateSingletons(), if one of the beans fails to initialize, any beans created before it are not properly disposed of (destroy method not called.)
This creates a few problems since some beans may need to clean up resources such as threads (in our case, its a timer that isn't getting destroyed.)  On one hand its not a big deal since the failure to create the bean factory represents a fatal error in the application.  On the other hand, it makes development a little more of a problem since the entire application server needs to be shut-down in order to clean up the resources, whereas if the destroy methods were properly called we can simply fix the problem and redeploy.
Perhaps changing preinstantiateSingletons to something like:
public void preinstantiateSingletons() {
  try 
{
    // original method here...
  }
 catch( BeansException e ) 
{
    // Anything already placed in singleton cache should be destroyed
    destroySingletons();
    throw e;
  }
}
We could probably work around it by marking all our beans lazy then handling the pre-instantiate/destroy bits ourselves, but this seems like a pretty trivial thing to fix in Spring itself.