There is MS SQL server statement RAISERROR. Calling it causes SQLException. This exception is converted to BadSqlGrammarException by Spring. But grammar is correct.
The code:
===
        try 
{
            dataSource.getConnection().createStatement().execute("RAISERROR('Preved!', 16, 1)");
        }
 catch (SQLException e) 
{
            logger.error("e: " + e);
            logger.error("errorCode: " + e.getErrorCode());
            logger.error("sqlState: " + e.getSQLState());
        }
        try 
{
            new JdbcTemplate(dataSource).execute("RAISERROR('Preved!', 16, 1)");
        }
 catch (DataAccessException e) 
{
            logger.error("spring e: " + e);
        }
===
prints:
===
[Temp] e: com.microsoft.sqlserver.jdbc.SQLServerException: Preved!
[Temp] errorCode: 50000
[Temp] sqlState: S0001
[JdbcTemplate] Executing SQL statement [RAISERROR('Preved!', 16, 1)]
[Temp] spring e: org.springframework.jdbc.BadSqlGrammarException: StatementCallback; bad SQL grammar [RAISERROR('Preved!', 16, 1)]; nested exception is com.microsoft.sqlserver.jdbc.SQLServerException: Preved!
===
Look at http://msdn2.microsoft.com/en-us/library/ms177497.aspx:
===
RAISERROR is used to return messages back to applications using the same format as a system error or warning message generated by the SQL Server Database Engine.
===
Also from there seems like error codes equal or above 50000 are reserved for user errors (and 50000 is default in RAISERROR), all codes in that range maybe should be converted to UserServerErrorDataAccessException, or something I don't know what.