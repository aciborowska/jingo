While profiling the memory of our application, we discovered that the ServletRequestUtils.getXXXParameter methods allocate memory for an error message that is caught and eaten:
This code...
public static boolean getBooleanParameter(ServletRequest request, String name, boolean defaultVal) {
		try 
{
			return getRequiredBooleanParameter(request, name);
		}
		catch (ServletRequestBindingException ex) 
{
			return defaultVal;
		}
	}
...results in the creation of an exception object:
protected final void validateRequiredParameter(String name, Object parameter)
				throws ServletRequestBindingException {
			if (parameter == null) 
{
				throw new ServletRequestBindingException(
						"Required " + getType() + " parameter '" + name + "' is not present");
			}
		}
Attaching the output from a profiling session where getBooleanParameter was called ~300 times.
Possible solutions:
1) Use a StringBuffer to construct the message instead of (expensive) String concatentation;
2) Build the assembly smarts into ServletRequestBindingException so the message is only assembled when requested, i.e. throw new ServletRequestBindingException( getType(), name ).
In this case, given that there are a whole class of methods that depend on eating ServletRequestBindingExceptions, options 2 would seem prudent - defer the message construction until if/when it is needed (it would be avoided totally for the getXXXParameter calls).
Categorizing this as a bug vs. improvement, as the message construction uses excessive memory when other options are available.