The view caching in AbstractCachingViewResolver is not thread-safe. The comment and implementation are incorrect â€“ you DO really need synchronization, you DON'T really need atomicity in this case.
It's possible that two (or more) threads of execution can be accessing (line 62) and mutating (line 83) the viewMap at the same time.
The easiest solution is to make viewMap synchronized (line 31):
  private Map viewMap = Collections.synchronizedMap(new HashMap());
The get and put are still not atomic (you may actually end up loading the view multiple times initially), but it is safe and correct. I believe this was your intention as the loadView method could take a long time potentially, and ideally you'd like to load views in parallel.