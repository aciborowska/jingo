The javadoc for BeanFactory.getType(<bean_name>) specifies that it will "Determine the type of the bean with the given name. More specifically, determine the type of object that getBean(java.lang.String) would return for the given name."
However, when using AOP, there are cases where this will not hold true.  We have demonstrated two cases: 1) when using the lazy-init="true" attribute on a bean which will have an AOP proxy, and 2) when a bean using ApplicationContextAware calls getType(), for a bean which will have an AOP proxy, in it's init-method.
In both cases getType(<name>) can return a different type than getBean(<name>).class().  More specifically getType() will return the base class of the bean and not the proxy, which getBean().class() will return.  After calling getBean(), future calls to getType() will return the correct type, the proxy.  
We have ran into issues with the second case when using Mule + Spring.  
I have attached a sample Maven project demonstrating the first case, with lazy-init.
-Derek