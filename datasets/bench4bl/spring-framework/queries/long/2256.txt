The outdated JavaDoc is pasted below. The createDomNode method appears to have been removed a while back.
On a related matter, I'm updating in existing project to use 2.0. The createDomNode method may have been deprecated but I think its removal puts into question the backwards compatibility to 1.x. This (now incorrect) JavaDoc would appear to agree with me. Since the createDomNode method has been removed it is not possible to use 2.0 as a drop in replacement for 1.x in every case. This is not a big problem but would be useful if all minor caveats such as this were listed and linked to from claims of backwards compatibility.
	/**

Return the XML <code>Source</code> to transform. Subclasses must implement
<b>either</b> this method <b>or</b> <code>createDomNode</code>, which is
retained only for backward compatibility.
@param model the model Map
@param root name for root element. This can be supplied as a bean property
to concrete subclasses within the view definition file, but will be overridden
in the case of a single object in the model map to be the key for that object.
If no root property is specified and multiple model objects exist, a default
root tag name will be supplied.
@param request HTTP request. Subclasses won't normally use this, as
request processing should have been complete. However, we might to
create a RequestContext to expose as part of the model.
@param response HTTP response. Subclasses won't normally use this,
however there may sometimes be a need to set cookies.
@return the XSLT Source to transform
@throws Exception we let this method throw any exception; the
AbstractXlstView superclass will catch exceptions
	 */
	protected Source createXsltSource(
			Map model, String root, HttpServletRequest request, HttpServletResponse response)
			throws Exception 
{

		return null;
	}

