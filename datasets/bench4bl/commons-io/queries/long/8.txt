The bug is described by a one-line code      
FileUtils.copyFile(new File("c:/hello.txt"), new File("c:/hello.txt"));
Try run it and check hello.txt size before and after: you will find
that the file has been razed to 0 bytes.
It should be illegal to copy a file with the same path as the destination,
or better, with the same getCanonicalPath(), so I suggest the following 
enhancement:
------------ in FileUtils.java -------------
        //make sure we can write to destination
        if (destination.exists() && !destination.canWrite()) 
{
            String message =
                "Unable to open file " + destination + " for writing.";
            throw new IOException(message);
        }

        //makes sure it is not the same file        
        if(source.getCanonicalPath().equals(destination.getCanonicalPath())) 
{
            String message =
                "Unable to write file " + source + " on itself.";
            throw new IOException(message);
            
        }

– end –
this code should be safe regarding path and canonical path: you
are querying OS after existence test, and anyway you are sure
that there is a source file and it has a canonical path.
(anyway getCanonicalPath throws a IOException, which is sound
in the context)
hope this may help
daniele rizzi (drizzi@largesys.it)