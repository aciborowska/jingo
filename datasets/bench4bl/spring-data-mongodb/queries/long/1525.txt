I'm experiencing trouble deserializing an object that contains an empty EnumSet. My model contains the "stuff" field below : 






    public enum Stuff {




        FOO,




        BAR,




        BAZ




    }




Â 




    public EnumSet<Stuff> stuff;







Considering the following :






        repository.save(new Customer("Alice", "Smith", EnumSet.of(Customer.Stuff.BAR)));




        repository.save(new Customer("Bob", "Smith", EnumSet.noneOf(Customer.Stuff.class)));




        System.out.println(repository.findByFirstName("Alice"));




        System.out.println(repository.findByFirstName("Bob"));







Both customers are correctly stored into Mongo :






> db.customer.find()




{ "_id" : ObjectId("581dfc9d8d059f366d5d19f2"), "_class" : "hello.Customer", "firstName" : "Alice", "lastName" : "Smith", "stuff" : [ "BAR" ] }




{ "_id" : ObjectId("581dfc9d8d059f366d5d19f3"), "_class" : "hello.Customer", "firstName" : "Bob", "lastName" : "Smith", "stuff" : [ ] }







But line 4 raises a ConversionFailedException :






Caused by: org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.util.HashSet<?>] to type [java.util.EnumSet<?>] for value '[]'; nested exception is java.lang.ClassCastException: class java.lang.Enum not an enum




	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:42) ~[spring-core-4.3.3.RELEASE.jar:4.3.3.RELEASE]




	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192) ~[spring-core-4.3.3.RELEASE.jar:4.3.3.RELEASE]




	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:176) ~[spring-core-4.3.3.RELEASE.jar:4.3.3.RELEASE]




	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:823) ~[spring-data-mongodb-1.9.3.RELEASE.jar:na]




	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readCollectionOrArray(MappingMongoConverter.java:890) ~[spring-data-mongodb-1.9.3.RELEASE.jar:na]




	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readValue(MappingMongoConverter.java:1195) ~[spring-data-mongodb-1.9.3.RELEASE.jar:na]




	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.access$200(MappingMongoConverter.java:79) ~[spring-data-mongodb-1.9.3.RELEASE.jar:na]




	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1145) ~[spring-data-mongodb-1.9.3.RELEASE.jar:na]




	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getValueInternal(MappingMongoConverter.java:871) ~[spring-data-mongodb-1.9.3.RELEASE.jar:na]




	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$1.doWithPersistentProperty(MappingMongoConverter.java:284) ~[spring-data-mongodb-1.9.3.RELEASE.jar:na]




	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$1.doWithPersistentProperty(MappingMongoConverter.java:272) ~[spring-data-mongodb-1.9.3.RELEASE.jar:na]




	at org.springframework.data.mapping.model.BasicPersistentEntity.doWithProperties(BasicPersistentEntity.java:312) ~[spring-data-commons-1.12.3.RELEASE.jar:na]







Attached is an example from the the tutorial with the extra "stuff" field.
Thanks.