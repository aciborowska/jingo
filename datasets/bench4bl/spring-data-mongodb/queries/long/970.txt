If we in insert DBObject in database used method:






protected void populateIdIfNecessary(Object savedObject, Object id) {




  if (id == null) {




    return;




  }




  if (savedObject instanceof BasicDBObject) {




    DBObject dbObject = (DBObject) savedObject;




    dbObject.put(ID_FIELD, id);




    return;




  }




  MongoPersistentProperty idProp = getIdPropertyFor(savedObject.getClass());




  if (idProp == null) {




    return;




  }




  ConversionService conversionService = mongoConverter.getConversionService();




  BeanWrapper<PersistentEntity<Object, ?>, Object> wrapper = BeanWrapper.create(savedObject, conversionService);




  Object idValue = wrapper.getProperty(idProp, idProp.getType(), true);




  if (idValue != null) {




    return;




  }




  wrapper.setProperty(idProp, id);




}






where checked: 'savedObject instanceof BasicDBObject' and not store property with '_id'. Then if we remove DBObject from database for create query used:






private Query getIdQueryFor(Object object) {




  Assert.notNull(object);




  Class<?> objectType = object.getClass();




  MongoPersistentEntity<?> entity = mappingContext.getPersistentEntity(objectType);




  MongoPersistentProperty idProp = entity == null ? null : entity.getIdProperty();




  if (idProp == null) {




    throw new MappingException("No id property found for object of type " + objectType);




  }




  ConversionService service = mongoConverter.getConversionService();




  Object idProperty = null;




  idProperty = BeanWrapper.create(object, service).getProperty(idProp, Object.class, true);




  return new Query(where(idProp.getFieldName()).is(idProperty));




}






Where not checked:  'savedObject instanceof BasicDBObject' and throw exception. Why not checked removing object on 'savedObject instanceof BasicDBObject' if we insert BAsicDBObject and after remove then.