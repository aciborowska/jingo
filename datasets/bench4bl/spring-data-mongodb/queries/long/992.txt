Define abstract entity class Animal, add two sub-classes Cat, Dog
annotate them with @TypeAlias("dog") and @TypeAlias("cat")
define a simple CRUD repository and persist a Dog instance, then try to read - works fine. But if you create a new MongoDB context and try to read from animal collection without saving anything first an exception is raised: MappingInstantiationException: Failed to instantiate Animal.
The problem is that there are no sub-classes registered in the mappingContext until you persist a concrete class, so class can't be resolved by an alias.
The workaround is to pre-register all sub-classes in the context:






Set<Class<?>> annotated = reflections.getTypesAnnotatedWith(TypeAlias.class);




Â 




for(Class c : annotated) {




  mappingContext.getPersistentEntity(c);




}






It would be better to use the approach of Jackson library, define all subclasses along with their aliases in the base class:






@JsonSubTypes({




  @JsonSubTypes.Type(value = Dog.class , name = "dog"),




  @JsonSubTypes.Type(value = Cat.class, name = "cat")




})





