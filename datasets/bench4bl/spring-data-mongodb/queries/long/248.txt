






// domain




@Document(collection="users")




public class User {




    @Id




    private ObjectId id;




    private String name;




    private List<Activity> activities;




    ... // other fields of the document




}




 




public class Student {




    private ObjectId id;




    private String name;




    private List<Activity> activities;




}




 




public class Activity {




    private String name;




    private ObjectId id;




}




 




// Repository




 




public interface StudentRepository extends MongoRepository<User, ObjectId> {




    @Query(value = "{ 'activities.id' : ?0 }", fields = "{'id': 1, 'name':1, 'activities': 1}")




    public List<Student> findStudentsByActivityId(ObjectId id);




}






Repository method "findStudentsById" above returns empty list.
Debug log shows the following query 
DEBUG: org.springframework.data.mongodb.core.MongoTemplat e - find using query: { "activities.id" : { "$oid" : "4e50926a034ab67f11806c62"}} fields: 
{ "id" : 1 , "name" : 1 , "activities" : 1}
 for class: class com.domain.Student in collection: student
The query is using collection "student" which does not exist. 
Since my StudentRepository interface extends MongoRepository<User, ObjectId> , which is being created using "User" domain class, I was expecting the query to use "users" collection.
What is the correct way to achieve the above query to use users collection and map results to Student domain object.
Note: Query works fine if I annotate @Document(collections="users") on Student domain, but this would add mongodb dependency to student domain class which I want to avoid.
Ideally I think spring data should use "users" collection rather for the above query, unless over ridden by a Document annotation on the Student domain object.
