create an object like:






@Document




class MyDataObject {




  private Map<String, Long> impressionsByOSVersion;




}






add an entry to map like






myObject.osVersions.put("iPhone 4.3.2", 1L);






save this object using mongo operations i.e.
see exception:






java.lang.IllegalArgumentException: fields stored in the db can't have . in them. (Bad Key: 'iPhone 5.0.1')




        at com.mongodb.DBCollection.validateKey(DBCollection.java:1203)




        at com.mongodb.DBCollection._checkKeys(DBCollection.java:1171)




        at com.mongodb.DBCollection._checkKeys(DBCollection.java:1174)




        at com.mongodb.DBCollection._checkObject(DBCollection.java:1161)




        at com.mongodb.DBCollection.save(DBCollection.java:706)




        at com.mongodb.DBCollection.save(DBCollection.java:691)




        at org.springframework.data.mongodb.core.MongoTemplate$11.doInCollection(MongoTemplate.java:790)




        at org.springframework.data.mongodb.core.MongoTemplate.execute(MongoTemplate.java:368)




        at org.springframework.data.mongodb.core.MongoTemplate.saveDBObject(MongoTemplate.java:784)




        at org.springframework.data.mongodb.core.MongoTemplate.doSave(MongoTemplate.java:720)




        at org.springframework.data.mongodb.core.MongoTemplate.save(MongoTemplate.java:707)




        at org.springframework.data.mongodb.repository.support.SimpleMongoRepository.save(SimpleMongoRepository.java:72)




        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)




        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)




        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)




        at java.lang.reflect.Method.invoke(Method.java:601)




        at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:322)




        at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:307)




        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)




        at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202)




        at $Proxy3022.save(Unknown Source)






if I extend MappingMongoConverter and use it, the save works.






class KeyEscapingMongoConverter extends MappingMongoConverter {




 




    public KeyEscapingMongoConverter(MongoDbFactory mongoDbFactory,




        MappingContext<? extends MongoPersistentEntity<?>, MongoPersistentProperty> mappingContext) {




        super(mongoDbFactory, mappingContext);




    }




 




    @Override




    protected Map<Object, Object> readMap(TypeInformation<?> type, DBObject dbObject) {




        return unescapeKeys(super.readMap(type, dbObject));




    }




 




    @Override




    protected DBObject writeMapInternal(Map<Object, Object> map, DBObject dbo, TypeInformation<?> propertyType) {




        return super.writeMapInternal(escapeKeys(map), dbo, propertyType);




    }




 




    @SuppressWarnings("unchecked")




    private <K, V> Map<K, V> escapeKeys(Map<K, V> map) {




        Map<K, V> escaped = newHashMap();




        for (Object key : map.keySet()) {




            Object newKey = key;




            if (key instanceof String) {




                newKey = escapeMongoValue((String) key);




            }




            escaped.put((K) newKey, map.get(key));




        }




        return escaped;




    }




 




    @SuppressWarnings("unchecked")




    private <K, V> Map<K, V> unescapeKeys(Map<K, V> map) {




        Map<K, V> unescaped = newHashMap();




        for (Object key : map.keySet()) {




            Object newKey = key;




            if (key instanceof String) {




                newKey = unescapeMongoValue((String) key);




            }




            unescaped.put((K) newKey, map.get(key));




        }




        return unescaped;




    }




 




    private String escapeMongoValue(String raw) {




        return raw.replaceAll("\\.", "ZZ");




    }




 




    private String unescapeMongoValue(String raw) {




        return raw.replaceAll("ZZ", "\\.");




    }




}





