I have a method that returns a list of ancestors for the given node in nested set.






public List<G> getAncestors(G group) {




 




  int lft = group.getLeft();




  int rgt = group.getRight();




 




  Query query = Query.query(Criteria.where(LEFT).lt(lft).and(RIGHT).gt(rgt));




 




  query.sort().on(LEFT, Order.ASCENDING);




 




  return mongoTemplate.find(query, clazz, collectionName);




}






I found that it returns wrong nodes, after debugging I discovered that only first parameter in a query is passed so the query is equivalent to Query.query(Criteria.where(LEFT).lt(lft)) which is not what I expected.
I suppose that problem is in QueryMapper class in DBObject getMappedObject(DBObject query, MongoPersistentEntity<?> entity) method in the last conditional branch:






   public DBObject getMappedObject(DBObject query, MongoPersistentEntity<?> entity) {




 




     DBObject newDbo = new BasicDBObject();




 




     for (String key : query.keySet()) {




        String newKey = key;




	Object value = query.get(key);




 




        if (isIdKey(key, entity)) {




 




               ...




 




        } else if (value instanceof DBObject) {




           newDbo.put(newKey, getMappedObject((DBObject) value, entity));




  	   return newDbo; // should it be continue instead here as far as we inside the loop?




        }




 




        newDbo.put(newKey, converter.convertToMongoType(value));




     }




 




     return newDbo;




  }





