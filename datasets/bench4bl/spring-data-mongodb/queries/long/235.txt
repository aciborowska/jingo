I've encountered a bug when trying to reference unstructured, multi-level data (as a Map) in Spring Data Document using MongoDB.  The bug occurs when the data contains a list.
I'm trying to represent the following object:






{




  '_id': (Object ID Here)




  'name': 'john',




  'data': {




             'pet': 'cat',




             'other': [{'some':'thing'}, {'another':'thing2'}],




             'more': { 'unstructured': 'info' }




           }




}






With the following class:






@Document




public class Person {




  ObjectId id;




  String name;




  Map<String, Object> data; // Schema-less data for which I do not know the structure in advance




}






When trying to load this object from MongoDB using Spring Data, I get a IllegalArgumentException (stack trace below) in MappingMongoConverter.findTypeToBeUsed because it tries to call dbObject.get(CUSTOM_TYPE_KEY) on a DBArray (because "other" is a DBArray).






java.lang.IllegalArgumentException: BasicBSONList can only work with numeric keys, not: [_class]




	at org.bson.types.BasicBSONList._getInt(BasicBSONList.java:161)




	at org.bson.types.BasicBSONList._getInt(BasicBSONList.java:152)




	at org.bson.types.BasicBSONList.get(BasicBSONList.java:104)




	at org.springframework.data.document.mongodb.convert.MappingMongoConverter.findTypeToBeUsed(MappingMongoConverter.java:736)




	at org.springframework.data.document.mongodb.convert.MappingMongoConverter.getMoreConcreteTargetType(MappingMongoConverter.java:759)




	at org.springframework.data.document.mongodb.convert.MappingMongoConverter.read(MappingMongoConverter.java:138)




	at org.springframework.data.document.mongodb.convert.MappingMongoConverter.readMap(MappingMongoConverter.java:715)




	at org.springframework.data.document.mongodb.convert.MappingMongoConverter.getValueInternal(MappingMongoConverter.java:641)




	at org.springframework.data.document.mongodb.convert.MappingMongoConverter$2.doWithPersistentProperty(MappingMongoConverter.java:240)




	at org.springframework.data.document.mongodb.convert.MappingMongoConverter$2.doWithPersistentProperty(MappingMongoConverter.java:230)




	at org.springframework.data.mapping.BasicPersistentEntity.doWithProperties(BasicPersistentEntity.java:112)




	at org.springframework.data.document.mongodb.convert.MappingMongoConverter.read(MappingMongoConverter.java:230)




	at org.springframework.data.document.mongodb.convert.MappingMongoConverter.read(MappingMongoConverter.java:174)




	at org.springframework.data.document.mongodb.convert.MappingMongoConverter.read(MappingMongoConverter.java:128)




	at org.springframework.data.document.mongodb.MongoTemplate$ReadDbObjectCallback.doWith(MongoTemplate.java:1655)




	at org.springframework.data.document.mongodb.MongoTemplate.executeFindMultiInternal(MongoTemplate.java:1426)




	at org.springframework.data.document.mongodb.MongoTemplate.doFind(MongoTemplate.java:1186)




	at org.springframework.data.document.mongodb.MongoTemplate.find(MongoTemplate.java:587)




	at org.springframework.data.document.mongodb.repository.AbstractMongoQuery$Execution.readCollection(AbstractMongoQuery.java:106)




	at org.springframework.data.document.mongodb.repository.AbstractMongoQuery$SingleEntityExecution.execute(AbstractMongoQuery.java:194)




	at org.springframework.data.document.mongodb.repository.AbstractMongoQuery.execute(AbstractMongoQuery.java:84)






Instead, data should be created as a Map with proper objects inside, including a List<Map> for "other"