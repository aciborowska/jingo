SimpleStepExecutionSplitter does a split and puts StepExecutions into HashSet.
Yarn component receiving this fails to use HashSet.contains() method.
2013-09-26 16:14:15,398 INFO [AbstractBatchAppmaster] - XXX contains=false obj=[StepExecution: id=2, version=0, name=master1:partition0, status=STARTING, exitStatus=EXECUTING, readCount=0, filterCount=0, writeCount=0 readSkipCount=0, writeSkipCount=0, processSkipCount=0, commitCount=0, rollbackCount=0, exitDescription=, StepExecution: id=3, version=0, name=master1:partition1, status=STARTING, exitStatus=EXECUTING, readCount=0, filterCount=0, writeCount=0 readSkipCount=0, writeSkipCount=0, processSkipCount=0, commitCount=0, rollbackCount=0, exitDescription=] class=class java.util.HashSet
If new List or Set is created and entries copied there, contain() methods succeed and it looks like entries are on different order.
2013-09-26 16:14:15,399 INFO [AbstractBatchAppmaster] - XXX list contains=true obj=[StepExecution: id=2, version=0, name=master1:partition0, status=STARTING, exitStatus=EXECUTING, readCount=0, filterCount=0, writeCount=0 readSkipCount=0, writeSkipCount=0, processSkipCount=0, commitCount=0, rollbackCount=0, exitDescription=, StepExecution: id=3, version=0, name=master1:partition1, status=STARTING, exitStatus=EXECUTING, readCount=0, filterCount=0, writeCount=0 readSkipCount=0, writeSkipCount=0, processSkipCount=0, commitCount=0, rollbackCount=0, exitDescription=] class=class java.util.ArrayList
2013-09-26 16:14:15,400 INFO [AbstractBatchAppmaster] - XXX set contains=true obj=[StepExecution: id=3, version=0, name=master1:partition1, status=STARTING, exitStatus=EXECUTING, readCount=0, filterCount=0, writeCount=0 readSkipCount=0, writeSkipCount=0, processSkipCount=0, commitCount=0, rollbackCount=0, exitDescription=, StepExecution: id=2, version=0, name=master1:partition0, status=STARTING, exitStatus=EXECUTING, readCount=0, filterCount=0, writeCount=0 readSkipCount=0, writeSkipCount=0, processSkipCount=0, commitCount=0, rollbackCount=0, exitDescription=] class=class java.util.HashSet
org.springframework.batch.core.partition.support.SimpleStepExecutionSplitter.split(StepExecution, int):






Set<StepExecution> set = new HashSet<StepExecution>(contexts.size());




 




for (Entry<String, ExecutionContext> context : contexts.entrySet()) {




 




  // Make the step execution name unique and repeatable




  String stepName = this.stepName + STEP_NAME_SEPARATOR + context.getKey();




 




  StepExecution currentStepExecution = jobExecution.createStepExecution(stepName);




 




  boolean startable = getStartable(currentStepExecution, context.getValue());




 




  if (startable) {




    set.add(currentStepExecution);




  }




}




 




jobRepository.addAll(set);




return set;






Could it be that jobRepository.addAll modifies step execution entries thus changing hashcode resulting HashSet internal array to be out of order and i.e. contains() and remove() methods will fail.
This happened after spring batch was upgraded from 2.1.9 to 2.2.1.