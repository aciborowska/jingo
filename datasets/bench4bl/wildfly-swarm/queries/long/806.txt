Both the JPA+JAX-RS+CDI+JTA examples tests are now passing even though they should be failing. The tests have:






browser.navigate().to("http://localhost:8080/rollbackMsg");




assertThat(browser.getPageSource().contains("5"));







curl-ing that URL indeed says 5, but opening it in the browser shows Could not find MessageBodyWriter for response object of type: java.lang.Integer of media type: text/html and there's an exception in the log.
In the debugger, it's also clear that browser.getPageSource() contains the error message. The reason why the assertion doesn't fail is that the FEST Assert API is used wrongly. Earlier in the test, it's used correctly: 






assertThat(browser.getPageSource()).contains("{\"id\":1,\"name\":\"Penny\"}");







With a fix, the tests start to fail, but they are easy to fix: just make the rollbackMsg and commitMsg resource methods @Produces("text/plain"), for which a marshaller exists. The number converted to plain text is then wrapped into some short HTML, but that doesn't cause a problem. Another option would be to use a plain HTTP client to access those resources, instead of a browser.