Given a multi-module Maven project where the top-level module foo-web depends on modules foo-service and foo-model, where foo-web has jar packaging with a Main class






    public static void main(String[] args) throws Exception {




        Container container = new Container();




Â 




        WARArchive deployment = ShrinkWrap.create(WARArchive.class);




        deployment.addClass(LibraryBean.class);




        ClassLoader cl = Main.class.getClassLoader();




        deployment.addAsWebInfResource(new ClassLoaderAsset("WEB-INF/web.xml", cl), "web.xml");




        deployment.addAsWebInfResource(new ClassLoaderAsset("WEB-INF/faces-config.xml", cl), "faces-config.xml");




        deployment.addAsWebResource(new ClassLoaderAsset("books.xhtml", cl), "books.xhtml");




        deployment.addAllDependencies();




        container.start().deploy(deployment);




    }







when the Main class is run directly from my Eclipse workspace, the dependent modules do not get discovered.
When running mvn package and starting the Swarm JAR via java -jar foo-web-swarm.jar, everything is fine.
This appears to be caused by ArtifactManager.allArtifacts() not providing a suitable archive name for class folders. A class folder like ../foo-service/target/classes will end up in the generated WAR as WEB-INF/lib/85cbee12-5c68-403d-8cd3-f088e315ec3f. Since this library is missing the .jar extension, it will be ignored.