I haven't had time to create a test case for this yet, but this is what I'm seeing in an app of one my consultancy clients:
I configured a DomainClassConverter bean in XML (BTW, app has everything configured in a root context, DispatcherServlet context is empty). An @Configuration class is defined as well, which is also annotated with @EnableJpaRepositories with a package string as its value. When I debug the Repositories constructor on startup, I see that no beans of type RepositoryFactoryInformation are found in the given ListableBeanFactory, even though that does contain beans for the various JPA repository interfaces defined in the project. As a result, I'm getting binding errors when the code relies on the configured DomainClassConverter.
However, when I replace the @EnableJpaRepositories with <jpa:repositories/> having the same base package everything works as expected and RepositoryFactoryInformation beans are found for all repo interfaces.
I'll try to find some time to reproduce this in a test case, but figured I'd better report this ASAP in case you might be able to quickly reproduce this yourself. 