I'm having problems integrating the latest Spring Data JPA and Spring Data MongoDB projects. I'm on the process of upgrading my project's dependencies due to a couple of major releases from Spring, notably Spring Core and Spring Security. Here's my Maven properties for an overview of the versions used in my application:






 




<properties>




    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>




    




    <spring.core.version>3.1.0.RELEASE</spring.core.version>




    <spring.security.core.version>3.1.0.RELEASE</spring.security.core.version>




    <spring.social.core.version>1.0.1.RELEASE</spring.social.core.version>




 




    <querydsl.version>2.2.5</querydsl.version>




    <org.cloudfoundry.version>0.8.1</org.cloudfoundry.version>




 




    <!-- Works because both JPA and Mongo versions uses the same Commons version -->




    <spring.data.commons.core.version>1.2.0.M1</spring.data.commons.core.version>




    <spring.data.jpa.version>1.1.0.M1</spring.data.jpa.version>




    <spring.data.mongo.version>1.0.0.M4</spring.data.mongo.version>




    ...




</properties> 






I tried using the latest JPA and Mongo versions:






 




<properties>




    ...




    <!-- Conflict due to inconsistent dependencies on Spring Data Commons Core -->




    <spring.data.commons.core.version>1.2.0.RC1</spring.data.commons.core.version>




    <spring.data.jpa.version>1.0.2.RELEASE</spring.data.jpa.version>




    <spring.data.mongo.version>1.0.0.RC1</spring.data.mongo.version>




    ...




</properties> 






But I get the following exception:






 




Caused by: 




java.lang.NoSuchMethodError: org.springframework.data.repository.query.parser.Part.getProperty()Lorg/springframework/data/repository/query/parser/Property;




	at org.springframework.data.jpa.repository.query.JpaQueryCreator.toPredicate(JpaQueryCreator.java:163)




	at org.springframework.data.jpa.repository.query.JpaQueryCreator.create(JpaQueryCreator.java:95)




	at org.springframework.data.jpa.repository.query.JpaQueryCreator.create(JpaQueryCreator.java:49)




	at org.springframework.data.repository.query.parser.AbstractQueryCreator.createCriteria(AbstractQueryCreator.java:109)




	at org.springframework.data.repository.query.parser.AbstractQueryCreator.createQuery(AbstractQueryCreator.java:88)




	at org.springframework.data.repository.query.parser.AbstractQueryCreator.createQuery(AbstractQueryCreator.java:73)




	at org.springframework.data.jpa.repository.query.PartTreeJpaQuery$QueryPreparer.<init>(PartTreeJpaQuery.java:102)




	at org.springframework.data.jpa.repository.query.PartTreeJpaQuery.<init>(PartTreeJpaQuery.java:59)




	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$CreateQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:92)




	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$CreateIfNotFoundQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:159)




	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$AbstractQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:71)




	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.<init>(RepositoryFactorySupport.java:268)




	at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:142)




	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getObject(RepositoryFactoryBeanSupport.java:114)




	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getObject(RepositoryFactoryBeanSupport.java:38)




	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:142)




	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getObjectFromFactoryBean(FactoryBeanRegistrySupport.java:102)




	at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:1441)




	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:305)




	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)




	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:848)




	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:790)




	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:707)




	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:478)




	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)




	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:284)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1106)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)




	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)




	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225)




	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)




	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)




	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.autowireResource(CommonAnnotationBeanPostProcessor.java:442)




	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.getResource(CommonAnnotationBeanPostProcessor.java:416)




	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$ResourceElement.getResourceToInject(CommonAnnotationBeanPostProcessor.java:549)




	at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:150)




	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)




	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessPropertyValues(CommonAnnotationBeanPostProcessor.java:303)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1106)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)




	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)




	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225)




	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)




	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)




	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:585)




	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:913)




	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:464)




	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:384)




	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:283)




	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111)




	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:672)




	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:403)




	at org.eclipse.jetty.server.handler.ContextHandler.startContext(ContextHandler.java:664)




	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:239)




	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1212)




	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:610)




	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:453)




	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:59)




	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:36)




	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:183)




	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:485)




	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:138)




	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:140)




	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:53)




	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:604)




	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:535)




	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:398)




	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:332)




	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:59)




	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:117)




	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:59)




	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:546)




	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:221)




	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:59)




	at org.eclipse.jetty.util.component.AggregateLifeCycle.doStart(AggregateLifeCycle.java:45)




	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:53)




	at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:90)




	at org.eclipse.jetty.server.Server.doStart(Server.java:262)




	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:59)




	at org.eclipse.jetty.xml.XmlConfiguration$1.run(XmlConfiguration.java:1203)




	at java.security.AccessController.doPrivileged(Native Method)




	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1126)




	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)




	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)




	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)




	at java.lang.reflect.Method.invoke(Method.java:597)




	at org.eclipse.jetty.start.Main.invokeMain(Main.java:469)




	at org.eclipse.jetty.start.Main.start(Main.java:612)




	at org.eclipse.jetty.start.Main.parseCommandLine(Main.java:265)




	at org.eclipse.jetty.start.Main.main(Main.java:79)






So I tried backtracking and see what older versions will work:






 




<properties>




    ...




    <!-- Conflict due to inconsistent dependencies on Spring Data Commons Core -->




    <spring.data.commons.core.version>1.2.0.M1</spring.data.commons.core.version>




    <spring.data.jpa.version>1.0.2.RELEASE</spring.data.jpa.version>




    <spring.data.mongo.version>1.0.0.M4</spring.data.mongo.version>




    ...




</properties> 






But I get the following exception:






 




java.lang.NoClassDefFoundError: Could not initialize class org.springframework.data.jpa.repository.query.AbstractJpaQuery$1




	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.getExecution(AbstractJpaQuery.java:98)




	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:83)




	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:301)




	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)




	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:110)




	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)




	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:155)




	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)




	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202)




	at $Proxy65.findByTypeAndMessageAndArguments(Unknown Source)




	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)




	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)




	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)




	at java.lang.reflect.Method.invoke(Method.java:597)




	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:318)




	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:183)




	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150)




	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:110)




	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)




	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202)




	at $Proxy66.findByTypeAndMessageAndArguments(Unknown Source)




	at org.krams.tutorial.aop.service.JpaErrorLogService.save(JpaErrorLogService.java:26)




	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)




	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)




	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)




	at java.lang.reflect.Method.invoke(Method.java:597)




	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:318)




	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:183)




	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150)




	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:110)




	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)




	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202)




	at $Proxy67.save(Unknown Source)




	at org.krams.tutorial.aop.ErrorLogAspect.logAround(ErrorLogAspect.java:70)




	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)




	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)




	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)




	at java.lang.reflect.Method.invoke(Method.java:597)




	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:621)




	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:610)




	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:65)




	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)




	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202)




	at $Proxy80.post(Unknown Source)




	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)




	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)




	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)




	at java.lang.reflect.Method.invoke(Method.java:597)




	at org.springframework.scheduling.support.ScheduledMethodRunnable.run(ScheduledMethodRunnable.java:64)




	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:53)




	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)




	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)




	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)




	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)




	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:180)




	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:204)




	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)




	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)




	at java.lang.Thread.run(Thread.java:662)






I tried further:






 




<properties>




    ...




    <!-- Conflict due to inconsistent dependencies on Spring Data Commons Core -->




    <spring.data.commons.core.version>1.1.0.RELEASE</spring.data.commons.core.version>




    <spring.data.jpa.version>1.0.2.RELEASE</spring.data.jpa.version>




    <spring.data.mongo.version>1.0.0.M4</spring.data.mongo.version>




    ...




</properties> 






But I get the following exception:






 




Caused by: java.lang.VerifyError: Cannot inherit from final class




	at java.lang.ClassLoader.defineClass1(Native Method)




	at java.lang.ClassLoader.defineClassCond(ClassLoader.java:632)




	at java.lang.ClassLoader.defineClass(ClassLoader.java:616)




	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:141)




	at java.net.URLClassLoader.defineClass(URLClassLoader.java:283)




	at java.net.URLClassLoader.access$000(URLClassLoader.java:58)




	at java.net.URLClassLoader$1.run(URLClassLoader.java:197)




	at java.security.AccessController.doPrivileged(Native Method)




	at java.net.URLClassLoader.findClass(URLClassLoader.java:190)




	at org.eclipse.jetty.webapp.WebAppClassLoader.loadClass(WebAppClassLoader.java:415)




	at org.eclipse.jetty.webapp.WebAppClassLoader.loadClass(WebAppClassLoader.java:377)




	at org.springframework.data.mongodb.repository.MongoRepositoryFactoryBean$MongoRepositoryFactory$MongoQueryLookupStrategy.resolveQuery(MongoRepositoryFactoryBean.java:220)




	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.<init>(RepositoryFactorySupport.java:303)




	at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:157)




	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getObject(RepositoryFactoryBeanSupport.java:120)




	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getObject(RepositoryFactoryBeanSupport.java:39)




	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:142)




	... 76 more






At the end I was forced to return to an older but working configuration (which was my original setup before upgrading to Spring 3.1.RELEASE, Spring Security 3.1.RELEASE, QueryDSL 2.2.5):






 




<properties>




    ...




    <!-- Works because both JPA and Mongo versions uses the same Commons version -->




    <spring.data.commons.core.version>1.2.0.M1</spring.data.commons.core.version>




    <spring.data.jpa.version>1.1.0.M1</spring.data.jpa.version>




    <spring.data.mongo.version>1.0.0.M4</spring.data.mongo.version




    ...




</properties> 






My application works properly with this configuration, even after upgrading to Spring 3.1.RELEASE and etc.
I know the reason why I'm encountering those errors earlier because Spring Data JPA and Mongo have different Commons Core dependency versions. And I noticed some of the classes are either renamed, repacked, or has been deleted. 
My concern is when will Spring Data JPA get the latest Spring Data Commons Core version? The Spring Data MongoDb project is already using the latest version, so the ball is now in JPA's court.
Another concern is when will we get parallel updates for both the JPA and Mongo so that every time both are released they always point to the latest Spring Data Commons Core? If this can't be achieved, does this mean that JPA and Mongo must have their own respective "commons" dependency but then it would not be a "common" dependency anymore.
I have plans of mixing other Spring Data projects but I fear that I will encounter this issue again as some of the umbrella projects progress faster. This is a blocker because I can't use the latest features or fixes for a specific project. 
Thanks for reading