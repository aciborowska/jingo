On occasion, I use property based JPA annotations rather than field based annotations (specifically in the case where some of the values to be persisted are computed in a getter, rather than being a field). Spring Data Evans has a regression where it appears not to build/process the meta model correctly in the case where:

You're using property based JPA annotations
You have a collection, with generic type of an interface
There's a getter whose property name is NOT the same as the field (camel cased)
You want to make the getter for said collection to be @Transient

In this case, SD fails to start up correctly for some reason, complaining of:






testExample(example.data.RepositoryTest)  Time elapsed: 1.286 sec  <<< ERROR!




org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jpaMapppingContext': Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: Metamodel must not be null!




        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1553)




        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539)




        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)




        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302)




        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)




        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298)




        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)




        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:684)




        at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760)




        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)




        at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)




        at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:83)




        at example.data.RepositoryTest.testExample(RepositoryTest.java:10)




        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)




        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)




        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)




        at java.lang.reflect.Method.invoke(Method.java:483)




        at org.junit.internal.runners.TestMethodRunner.executeMethodBody(TestMethodRunner.java:99)




        at org.junit.internal.runners.TestMethodRunner.runUnprotected(TestMethodRunner.java:81)




        at org.junit.internal.runners.BeforeAndAfterRunner.runProtected(BeforeAndAfterRunner.java:34)




        at org.junit.internal.runners.TestMethodRunner.runMethod(TestMethodRunner.java:75)




        at org.junit.internal.runners.TestMethodRunner.run(TestMethodRunner.java:45)




        at org.junit.internal.runners.TestClassMethodsRunner.invokeTestMethod(TestClassMethodsRunner.java:71)




        at org.junit.internal.runners.TestClassMethodsRunner.run(TestClassMethodsRunner.java:35)




        at org.junit.internal.runners.TestClassRunner$1.runUnprotected(TestClassRunner.java:42)




        at org.junit.internal.runners.BeforeAndAfterRunner.runProtected(BeforeAndAfterRunner.java:34)




        at org.junit.internal.runners.TestClassRunner.run(TestClassRunner.java:52)




        at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)




        at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)




        at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)




        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)




        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)




        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)




        at java.lang.reflect.Method.invoke(Method.java:483)




        at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)




        at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)




        at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)




        at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)




        at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)




Caused by: java.lang.IllegalArgumentException: Metamodel must not be null!




        at org.springframework.util.Assert.notNull(Assert.java:112)




        at org.springframework.data.jpa.mapping.JpaPersistentPropertyImpl.<init>(JpaPersistentPropertyImpl.java:89)




        at org.springframework.data.jpa.mapping.JpaMetamodelMappingContext.createPersistentProperty(JpaMetamodelMappingContext.java:77)




        at org.springframework.data.jpa.mapping.JpaMetamodelMappingContext.createPersistentProperty(JpaMetamodelMappingContext.java:38)




        at org.springframework.data.mapping.context.AbstractMappingContext$PersistentPropertyCreator.createAndRegisterProperty(AbstractMappingContext.java:449)




        at org.springframework.data.mapping.context.AbstractMappingContext$PersistentPropertyCreator.addPropertiesForRemainingDescriptors(AbstractMappingContext.java:442)




        at org.springframework.data.mapping.context.AbstractMappingContext.addPersistentEntity(AbstractMappingContext.java:296)




        at org.springframework.data.mapping.context.AbstractMappingContext$PersistentPropertyCreator.createAndRegisterProperty(AbstractMappingContext.java:470)




        at org.springframework.data.mapping.context.AbstractMappingContext$PersistentPropertyCreator.doWith(AbstractMappingContext.java:427)




        at org.springframework.util.ReflectionUtils.doWithFields(ReflectionUtils.java:607)




        at org.springframework.data.mapping.context.AbstractMappingContext.addPersistentEntity(AbstractMappingContext.java:295)




        at org.springframework.data.mapping.context.AbstractMappingContext.addPersistentEntity(AbstractMappingContext.java:257)




        at org.springframework.data.mapping.context.AbstractMappingContext.initialize(AbstractMappingContext.java:373)




        at org.springframework.data.jpa.repository.config.JpaMetamodelMappingContextFactoryBean.createInstance(JpaMetamodelMappingContextFactoryBean.java:73)




        at org.springframework.data.jpa.repository.config.JpaMetamodelMappingContextFactoryBean.createInstance(JpaMetamodelMappingContextFactoryBean.java:26)




        at org.springframework.beans.factory.config.AbstractFactoryBean.afterPropertiesSet(AbstractFactoryBean.java:134)




        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1612)




        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1549)




        ... 38 more






I attach a minimal test case to reproduce the problem. You can cause the problem not to occur by changing any of:

pom.xml version to 1.6.2.RELEASE, or 1.6.3.BUILD-SNAPSHOT (thus demonstrating a regression)
Change the getter property name to match that of the field
Mark the field @Transient as well as the property
Change the generic type of the collection to be Object rather than MyInterface !? (I really don't understand why this would prevent the issue?)

I presume that it's somehow incorrectly picking up the field as a candidate item for the meta model (incorrect on the grounds that I've exclusively used property based annotations), but then failing somehow, which then causes the exception seen here?