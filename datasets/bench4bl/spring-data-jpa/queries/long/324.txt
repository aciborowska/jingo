I have the following types hierarchy:






public interface Category {




    long getId();




 




    void setId(long id);




 




    ...




}












@Entity




@Table(name = "categories")




@Access(AccessType.FIELD)




public class CategoryImpl implements Category {




    @Id




    @GeneratedValue




    private long id;




 




    @Override




    public long getId() {




        return id;




    }




 




    @Override




    public void setId(long id) {




        this.id = id;




    }




 




    ...




}












public interface Product {




    ...




 




    Category getCategory();




 




    void setCategory(Category category);




}












@Entity




@Access(AccessType.FIELD)




@Table(name = "products")




public class ProductImpl implements Product {




    @ManyToOne(targetEntity = CategoryImpl.class)




    @JoinColumn(name = "category_id")




    private Category category;




 




    @Override




    public Category getCategory() {




        return category;




    }




 




    @Override




    public void setCategory(Category category) {




        this.category = category;




    }






And repository for Product objects:






public interface ProductRepository extends CrudRepository<ProductImpl, Long> {




    Page<Product> findByCategoryId(long categoryId, Pageable pageable);




}






During context initialization I've got the following exception:






Caused by: org.springframework.data.mapping.PropertyReferenceException: No property id found for type ua.com.artisanart.dom.products.Category




        at org.springframework.data.mapping.PropertyPath.<init>(PropertyPath.java:75)




        at org.springframework.data.mapping.PropertyPath.create(PropertyPath.java:327)




        at org.springframework.data.mapping.PropertyPath.create(PropertyPath.java:307)




        at org.springframework.data.mapping.PropertyPath.create(PropertyPath.java:330)




        at org.springframework.data.mapping.PropertyPath.create(PropertyPath.java:353)




        at org.springframework.data.mapping.PropertyPath.create(PropertyPath.java:307)




        at org.springframework.data.mapping.PropertyPath.from(PropertyPath.java:271)




        at org.springframework.data.mapping.PropertyPath.from(PropertyPath.java:245)




        at org.springframework.data.repository.query.parser.Part.<init>(Part.java:72)




        at org.springframework.data.repository.query.parser.PartTree$OrPart.<init>(PartTree.java:180)




        at org.springframework.data.repository.query.parser.PartTree$Predicate.buildTree(PartTree.java:260)




        at org.springframework.data.repository.query.parser.PartTree$Predicate.<init>(PartTree.java:240)




        at org.springframework.data.repository.query.parser.PartTree.<init>(PartTree.java:71)




        at org.springframework.data.jpa.repository.query.PartTreeJpaQuery.<init>(PartTreeJpaQuery.java:57)




        at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$CreateQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:90)




        at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$CreateIfNotFoundQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:162)




        at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$AbstractQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:68)




        at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.<init>(RepositoryFactorySupport.java:279)




        at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:147)




        at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getObject(RepositoryFactoryBeanSupport.java:153)




        at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getObject(RepositoryFactoryBeanSupport.java:43)




        at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:142)




        ... 37 more






JpaQueryLookupStrategy ignores targetEntity attribute of ManyToOne annotation on field category. I suppose it should use it to resolve concrete subtype of the field.