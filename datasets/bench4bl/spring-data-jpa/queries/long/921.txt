 I am using spring project. Here is my POM snippet 






.....




<!-- Spring Data module for JPA repositories. -->




<dependency>




    <groupId>org.springframework.data</groupId>




    <artifactId>spring-data-jpa</artifactId>




    <version>${spring-data-jpa.version}</version>  //1.10.1.RELEASE




    <scope>compile</scope>




    <exclusions>




        <exclusion>




            <groupId>org.slf4j</groupId>




            <artifactId>jcl-over-slf4j</artifactId>




        </exclusion>




    </exclusions>




</dependency>




 




<dependency>




    <groupId>org.eclipse.persistence</groupId>




    <artifactId>javax.persistence</artifactId>




    <version>${javax.persistence.version}</version>  //2.1.1




    <scope>compile</scope>




</dependency>




 




<!-- Hibernate entity manager with JPA 2 support. 




<dependency>




    <groupId>org.hibernate</groupId>




    <artifactId>hibernate-entitymanager</artifactId>




    <version>${hibernate-entitymanager.version}</version>  // 5.1.0.Final




    <scope>runtime</scope>




    <exclusions>




        <exclusion>




            <groupId>org.hibernate.javax.persistence</groupId>




            <artifactId>hibernate-jpa-2.1-api</artifactId>




        </exclusion>




        <exclusion>




            <groupId>org.jboss.spec.javax.transaction</groupId>




            <artifactId>jboss-transaction-api_1.2_spec</artifactId>




        </exclusion>




        <exclusion>




            <groupId>xml-apis</groupId>




            <artifactId>xml-apis</artifactId>




        </exclusion>




        <exclusion>




            <groupId>org.jboss.logging</groupId>




            <artifactId>jboss-logging</artifactId>




        </exclusion>




        <exclusion>




            <groupId>org.javassist</groupId>




            <artifactId>javassist</artifactId>




        </exclusion>




    </exclusions>




</dependency>




 




<dependency>




    <groupId>org.javassist</groupId>




    <artifactId>javassist</artifactId>




    <version>${javassist.version}</version>    // 3.20.0-GA




    <scope>runtime</scope>




</dependency>




 




<dependency>




    <groupId>org.hibernate</groupId>




    <artifactId>hibernate-validator</artifactId>




    <version>${hibernate-validator.version}</version>   // 5.2.4.Final




    <scope>runtime</scope>




    <exclusions>




        <exclusion>




            <groupId>org.jboss.logging</groupId>




            <artifactId>jboss-logging</artifactId>




        </exclusion>




    </exclusions>




</dependency>




 




<dependency>




    <groupId>org.hibernate</groupId>




    <artifactId>hibernate-validator-annotation-processor</artifactId>




    <version>${hibernate-validator.version}</version>  // 5.2.4.Final




    <scope>compile</scope>




    <optional>true</optional>




</dependency>




.....







 I have a spring Data JPA repository






public interface LmsRoleLmsFeatureRepository extends CrudRepository<LmsRoleLmsFeature, Long> {




    List<LmsRoleLmsFeature> findByLmsRoleIdIn(Collection<Long> ids);




}







Here is my spring configuration






@Configuration




@EnableTransactionManagement(mode = AdviceMode.PROXY, proxyTargetClass = false, order = 2)




@EnableJpaRepositories(




    basePackages = "a.b.c.repositories",




    entityManagerFactoryRef = "entityManagerFactory",




    transactionManagerRef = "transactionManager"




)




@Import({DatabasePropertiesConfig.class})




public class PersistenceConfig {




 




    private static final String PROPERTY_NAME_HIBERNATE_DIALECT = "hibernate.dialect";




    private static final String PROPERTY_NAME_HIBERNATE_MAX_FETCH_DEPTH = "hibernate.max_fetch_depth";




    private static final String PROPERTY_NAME_HIBERNATE_JDBC_FETCH_SIZE = "hibernate.jdbc.fetch_size";




    private static final String PROPERTY_NAME_HIBERNATE_JDBC_BATCH_SIZE = "hibernate.jdbc.batch_size";




 




    private static final String[] ENTITYMANAGER_PACKAGES_TO_SCAN = {"a.b.c.entities", "a.b.c.converters"};




 




    @Bean(destroyMethod = "close")




    public DataSource dataSource() {




        BasicDataSource dataSource = new BasicDataSource();




        dataSource.setDriverClassName(env.getProperty("driverClassName"));




        dataSource.setUrl(env.getProperty("url"));




        dataSource.setUsername(env.getProperty("username"));




        dataSource.setPassword(env.getProperty("password"));




        return dataSource;




    }




 




    @Bean




    public JpaTransactionManager transactionManager() {




         JpaTransactionManager transactionManager = new JpaTransactionManager();




         transactionManager.setEntityManagerFactory(entityManagerFactory().getObject());




         return transactionManager;




    }




 




    @Bean




    public HibernateJpaVendorAdapter vendorAdaptor() {




         HibernateJpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();




         return vendorAdapter;




    }




 




    @Bean




    public LocalContainerEntityManagerFactoryBean entityManagerFactory() {




 




        LocalContainerEntityManagerFactoryBean entityManagerFactoryBean = new LocalContainerEntityManagerFactoryBean();




        entityManagerFactoryBean.setJpaVendorAdapter(vendorAdaptor());




        entityManagerFactoryBean.setDataSource(dataSource());




        entityManagerFactoryBean.setPersistenceProviderClass(HibernatePersistenceProvider.class);




        entityManagerFactoryBean.setPackagesToScan(ENTITYMANAGER_PACKAGES_TO_SCAN);   




        entityManagerFactoryBean.setSharedCacheMode(SharedCacheMode.ENABLE_SELECTIVE);




        entityManagerFactoryBean.setValidationMode(ValidationMode.NONE);




        entityManagerFactoryBean.setJpaProperties(jpaHibernateProperties());




 




        return entityManagerFactoryBean;




    }




 




    private Properties jpaHibernateProperties() {




        Properties properties = new Properties();




         properties.put(PROPERTY_NAME_HIBERNATE_DIALECT, env.getProperty(PROPERTY_NAME_HIBERNATE_DIALECT));




         properties.put(PROPERTY_NAME_HIBERNATE_MAX_FETCH_DEPTH, env.getProperty(PROPERTY_NAME_HIBERNATE_MAX_FETCH_DEPTH));




         properties.put(PROPERTY_NAME_HIBERNATE_JDBC_FETCH_SIZE, env.getProperty(PROPERTY_NAME_HIBERNATE_JDBC_FETCH_SIZE));




         properties.put(PROPERTY_NAME_HIBERNATE_JDBC_BATCH_SIZE, env.getProperty(PROPERTY_NAME_HIBERNATE_JDBC_BATCH_SIZE));




 




         return properties;       




    }




 




}







This code works fine. When I run my application Spring application context is load properly. But when I change my application to hibernate 5.2. As I read from Hibernate ORM 5.2 release that hibernate-entitymanager module no longer exists. Its functionality has been consolidated into hibernate-core. So I changed my POM to this






....




<dependency>




    <groupId>org.hibernate</groupId>




    <artifactId>hibernate-core</artifactId>




    <version>${hibernate-core.version}</version>   //5.2.0.Final




    <scope>runtime</scope>




    <exclusions>




        <exclusion>




            <groupId>org.hibernate.javax.persistence</groupId>




            <artifactId>hibernate-jpa-2.1-api</artifactId>




        </exclusion>




        <exclusion>




            <groupId>org.jboss.spec.javax.transaction</groupId>




            <artifactId>jboss-transaction-api_1.2_spec</artifactId>




        </exclusion>




        <exclusion>




            <groupId>xml-apis</groupId>




            <artifactId>xml-apis</artifactId>




        </exclusion>




        <exclusion>




            <groupId>org.jboss.logging</groupId>




            <artifactId>jboss-logging</artifactId>




        </exclusion>




        <exclusion>




            <groupId>org.javassist</groupId>




            <artifactId>javassist</artifactId>




        </exclusion>




    </exclusions>




</dependency>




 




<!-- Hibernate entity manager with JPA 2 support. 




<dependency>




    <groupId>org.hibernate</groupId>




    <artifactId>hibernate-entitymanager</artifactId>




    <version>${hibernate-entitymanager.version}</version>




    <scope>runtime</scope>




            <exclusions>




                ...




            </exclusions>




        </dependency>




-->




 




.....







See comment out my hibernate-entitymanager dependency and include just hibernate-core dependency. But now when I run my application I get the following error






Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'lmsRoleLmsFeatureRepository': Invocation of init method failed; nested exception is org.hibernate.HibernateException: Could not determine a type for class: java.util.Collection




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1578) ~[spring-beans-4.3.0.RELEASE.jar:4.3.0.RELEASE]




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545) ~[spring-beans-4.3.0.RELEASE.jar:4.3.0.RELEASE]




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.3.0.RELEASE.jar:4.3.0.RELEASE]




	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.0.RELEASE.jar:4.3.0.RELEASE]




	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.0.RELEASE.jar:4.3.0.RELEASE]




	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.0.RELEASE.jar:4.3.0.RELEASE]




	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) ~[spring-beans-4.3.0.RELEASE.jar:4.3.0.RELEASE]




	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:756) ~[spring-beans-4.3.0.RELEASE.jar:4.3.0.RELEASE]




	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:861) ~[spring-context-4.3.0.RELEASE.jar:4.3.0.RELEASE]




	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:541) ~[spring-context-4.3.0.RELEASE.jar:4.3.0.RELEASE]




	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:128) ~[spring-test-4.3.0.RELEASE.jar:4.3.0.RELEASE]




	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:60) ~[spring-test-4.3.0.RELEASE.jar:4.3.0.RELEASE]




	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.delegateLoading(AbstractDelegatingSmartContextLoader.java:108) ~[spring-test-4.3.0.RELEASE.jar:4.3.0.RELEASE]




	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.loadContext(AbstractDelegatingSmartContextLoader.java:251) ~[spring-test-4.3.0.RELEASE.jar:4.3.0.RELEASE]




	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:98) ~[spring-test-4.3.0.RELEASE.jar:4.3.0.RELEASE]




	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:116) ~[spring-test-4.3.0.RELEASE.jar:4.3.0.RELEASE]




	... 25 more




Caused by: org.hibernate.HibernateException: Could not determine a type for class: java.util.Collection




	at org.hibernate.internal.SessionFactoryImpl.resolveParameterBindType(SessionFactoryImpl.java:1023) ~[hibernate-core-5.2.0.Final.jar:5.2.0.Final]




	at org.hibernate.query.criteria.internal.CriteriaBuilderImpl.parameter(CriteriaBuilderImpl.java:588) ~[hibernate-core-5.2.0.Final.jar:5.2.0.Final]




	at org.springframework.data.jpa.repository.query.ParameterMetadataProvider.next(ParameterMetadataProvider.java:161) ~[spring-data-jpa-1.10.2.RELEASE.jar:?]




	at org.springframework.data.jpa.repository.query.ParameterMetadataProvider.next(ParameterMetadataProvider.java:138) ~[spring-data-jpa-1.10.2.RELEASE.jar:?]




	at org.springframework.data.jpa.repository.query.JpaQueryCreator$PredicateBuilder.build(JpaQueryCreator.java:244) ~[spring-data-jpa-1.10.2.RELEASE.jar:?]




	at org.springframework.data.jpa.repository.query.JpaQueryCreator.toPredicate(JpaQueryCreator.java:180) ~[spring-data-jpa-1.10.2.RELEASE.jar:?]




	at org.springframework.data.jpa.repository.query.JpaQueryCreator.create(JpaQueryCreator.java:109) ~[spring-data-jpa-1.10.2.RELEASE.jar:?]




	at org.springframework.data.jpa.repository.query.JpaQueryCreator.create(JpaQueryCreator.java:49) ~[spring-data-jpa-1.10.2.RELEASE.jar:?]




	at org.springframework.data.repository.query.parser.AbstractQueryCreator.createCriteria(AbstractQueryCreator.java:109) ~[spring-data-commons-1.12.2.RELEASE.jar:?]




	at org.springframework.data.repository.query.parser.AbstractQueryCreator.createQuery(AbstractQueryCreator.java:88) ~[spring-data-commons-1.12.2.RELEASE.jar:?]




	at org.springframework.data.repository.query.parser.AbstractQueryCreator.createQuery(AbstractQueryCreator.java:73) ~[spring-data-commons-1.12.2.RELEASE.jar:?]




	at org.springframework.data.jpa.repository.query.PartTreeJpaQuery$QueryPreparer.<init>(PartTreeJpaQuery.java:118) ~[spring-data-jpa-1.10.2.RELEASE.jar:?]




	at org.springframework.data.jpa.repository.query.PartTreeJpaQuery$CountQueryPreparer.<init>(PartTreeJpaQuery.java:241) ~[spring-data-jpa-1.10.2.RELEASE.jar:?]




	at org.springframework.data.jpa.repository.query.PartTreeJpaQuery.<init>(PartTreeJpaQuery.java:68) ~[spring-data-jpa-1.10.2.RELEASE.jar:?]




	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$CreateQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:103) ~[spring-data-jpa-1.10.2.RELEASE.jar:?]




	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$CreateIfNotFoundQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:214) ~[spring-data-jpa-1.10.2.RELEASE.jar:?]




	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$AbstractQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:77) ~[spring-data-jpa-1.10.2.RELEASE.jar:?]




	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.<init>(RepositoryFactorySupport.java:435) ~[spring-data-commons-1.12.2.RELEASE.jar:?]




	at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:220) ~[spring-data-commons-1.12.2.RELEASE.jar:?]




	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.initAndReturn(RepositoryFactoryBeanSupport.java:266) ~[spring-data-commons-1.12.2.RELEASE.jar:?]




	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet(RepositoryFactoryBeanSupport.java:252) ~[spring-data-commons-1.12.2.RELEASE.jar:?]




	at org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean.afterPropertiesSet(JpaRepositoryFactoryBean.java:92) ~[spring-data-jpa-1.10.2.RELEASE.jar:?]




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1637) ~[spring-beans-4.3.0.RELEASE.jar:4.3.0.RELEASE]




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1574) ~[spring-beans-4.3.0.RELEASE.jar:4.3.0.RELEASE]




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545) ~[spring-beans-4.3.0.RELEASE.jar:4.3.0.RELEASE]




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.3.0.RELEASE.jar:4.3.0.RELEASE]




	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.0.RELEASE.jar:4.3.0.RELEASE]




	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.0.RELEASE.jar:4.3.0.RELEASE]




	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.0.RELEASE.jar:4.3.0.RELEASE]




	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) ~[spring-beans-4.3.0.RELEASE.jar:4.3.0.RELEASE]




	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:756) ~[spring-beans-4.3.0.RELEASE.jar:4.3.0.RELEASE]




	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:861) ~[spring-context-4.3.0.RELEASE.jar:4.3.0.RELEASE]




	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:541) ~[spring-context-4.3.0.RELEASE.jar:4.3.0.RELEASE]




	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:128) ~[spring-test-4.3.0.RELEASE.jar:4.3.0.RELEASE]




	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:60) ~[spring-test-4.3.0.RELEASE.jar:4.3.0.RELEASE]




	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.delegateLoading(AbstractDelegatingSmartContextLoader.java:108) ~[spring-test-4.3.0.RELEASE.jar:4.3.0.RELEASE]




	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.loadContext(AbstractDelegatingSmartContextLoader.java:251) ~[spring-test-4.3.0.RELEASE.jar:4.3.0.RELEASE]




	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:98) ~[spring-test-4.3.0.RELEASE.jar:4.3.0.RELEASE]




	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:116) ~[spring-test-4.3.0.RELEASE.jar:4.3.0.RELEASE]







I removed all the hiberante dependencies from my local m2 directory. Then again run maven update so only hibernate 5.2 core dependency should be present on maven local repository. But getting the same error. I also posted it to stackoverflow 
http://stackoverflow.com/questions/37676476/migrating-to-hibernate-5-2-is-giving-error-caused-by-org-hibernate-hibernateexc
Am I doing something wrong or is it a bug. Kindly check. Previously I just upgraded my Spring-data-jpa version and everything started working. This time I faced this issue with hibernate 5.2. With hibernate 5.1 everything is working fine. Currently I am using spring 4.3, spring-data-jpa 1.10.2 and hibernate-entitymanager 5.1.0.
Thanks & Regards
Basit Mahmood Ahmed
