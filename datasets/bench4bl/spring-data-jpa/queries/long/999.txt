When both dependent and parent entity uses an IdClass, and the parent PK includes a Date object, a "not a managed type"-exception is thrown, upon saving an entity through a JpaRepository. This happens in the Hibernate MetamodelImpl class, but is never caught. Excepted behavior is something in the lines of what happens in the JpaMetamodelEntityInformation class' isIdentifierDerivationNecessary method, where the exception thrown is caught and the Date value is subsequently properly set.
Example of entity classes where this is an issue:






@Entity




@IdClass(DependentEnitityPK.class)




public class DependentEntity implements Serializable {




 




    private static final long serialVersionUID = 57243934835566499L;




 




    @Id




    @Temporal(TemporalType.TIMESTAMP)




    @Column(name = "dato")




    private Date aDate;




 




    @Id




    @ManyToOne




    @JoinColumns({@JoinColumn(name = "departure_date", referencedColumnName = "departure_date"),




            @JoinColumn(name = "trainnr", referencedColumnName = "train_trainnr")})




    private ParentEntity theParent;




 




    ....




} 













public class DependentEntityPK implements Serializable {




 




    private Date aDate;




 




    private ParentEntityPK theParent;




    ....




} 













@Entity




@IdClass(ParentEntityPK.class)




public class Train implements Serializable {




    @Id




    @ManyToOne




    @JoinColumn(name = "train_trainnr", referencedColumnName = "trainnr")




    private Train theTrain;




 




    @Id




    @Temporal(TemporalType.DATE)




    @Column(name = "departure_date")




    private Date departureDate;




    ....




} 













public class ParentEntityPK implements Serializable {




 




    private Date departure_date;




    private int theTrain;




    ....




} 







Everything is fine when saving just the parent entity, where the mentioned exception is caught as described above. I see no reason for why it should not be caught when saving the dependent entity. Stepping through the code, there is no problem with the Date object in the dependent entity IdClass, only when it is trying to derive the properties of the parent's IdClass. This happens in the setPropertyValue method in the JpaMetamodelEntityInformation class.
The point where the exception should be caught is in the tryFindSingularIdAttributeNameOrUseFallback method in the same class, where the mentioned MetamodelImpl class is called.