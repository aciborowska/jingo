When the "jobConfiguration" bean is defined:
      	<bean id="jobConfiguration" parent="simpleJob">
		<property name="beanName" value="ibSplit"/>
		<property name="steps">
                .... ... ...
      the framework (org.springframework.batch.execution.configuration.MapJobConfigurationRegistry) registers the job with the "beanName" value, and then re-registers it with the bean's "id" value due to the BeanAwareness:
    springframework/batch/core/configuration/JobConfiguration.java:
    /** 

The callback from 
{@link BeanNameAware}
 comes after the setters, so it
will always overwrite the name with the bean id.

@see org.springframework.beans.factory.BeanNameAware#setBeanName(java.lang.String)
     */
    public void setBeanName(String name) 
{
        this.name = name;
    }
 

    Hence I commented <!-- <property name="beanName" value="ibSplit"/> --> and changed the "id" to the actual jobname. I guess the way it works right now is the intended behavior, but that is not how it worked before according to the code I picked up.
