XML spring context sample :
    <bean id="john" class="java.lang.String">
        <constructor-arg index="0" value="John"/>
    </bean>
    <bean id="jane" class="java.lang.String">
        <constructor-arg index="0" value="Jane"/>
    </bean>
    <batch:job id="firstJob" job-repository="jobRepository">
        <batch:step id="firstJobFirstStep" next="firstJobSecondStep">
            <batch:tasklet>
                <bean class="spring.batch.test.InnerBeanStepScopedTest$Hello" scope="step">
                    <property name="name" ref="jane"/>
                </bean>
            </batch:tasklet>
        </batch:step>
        <batch:step id="firstJobSecondStep">
            <batch:tasklet>
                <bean class="spring.batch.test.InnerBeanStepScopedTest$Hello" scope="step">
                    <property name="name" ref="john"/>
                </bean>
            </batch:tasklet>
        </batch:step>
    </batch:job>
The output produced is:
    19:08:03.885 [main] INFO  s.b.t.InnerBeanStepScopedTest$Hello - Hello John!
    19:08:03.975 [main] INFO  s.b.t.InnerBeanStepScopedTest$Hello - Hello John!
Now, the question is: where is Jane? :o)
If the two tasklets are unscoped (just remove scope="step") then the ouput is:
    19:13:20.801 [main] INFO  s.b.t.InnerBeanStepScopedTest$Hello - Hello Jane!
    19:13:20.921 [main] INFO  s.b.t.InnerBeanStepScopedTest$Hello - Hello John!
Yes, Jan is back!
So, dependency injection fails on step scoped inner anonymous beans. 
Workaround: name inner beans with an id attribute... but it's boring (me).