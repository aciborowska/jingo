I have a job definition with a step definition such as:
<bean id="step2" parent="taskletStep">
					<property name="tasklet">
						<bean class="PerformCommissionRunTasklet" scope="step">
							<aop:scoped-proxy/>
						</bean>
					</property>		
				</bean>
but the following exception is thrown:
Caused by: org.springframework.batch.io.exception.BatchCriticalException: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.PerformCommissionRunTasklet#1b814a5': Scope 'step' is not active for the current thread; consider defining a scoped proxy for this bean if you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: No context holder available for step scope
	at org.springframework.batch.execution.step.tasklet.TaskletStep.execute(TaskletStep.java:134)
	at org.springframework.batch.execution.job.simple.SimpleJob.execute(SimpleJob.java:89)
	at org.springframework.batch.execution.launch.SimpleJobLauncher$1.run(SimpleJobLauncher.java:85)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)
	at org.springframework.batch.execution.launch.SimpleJobLauncher.run(SimpleJobLauncher.java:80)
	at BatchManagerImpl.launchComMonthEndJob(BatchManagerImpl.java:352)
	... 168 more
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.com.siebre.compensation.batch.PerformCommissionRunTasklet#1b814a5': Scope 'step' is not active for the current thread; consider defining a scoped proxy for this bean if you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: No context holder available for step scope
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160)
	at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:33)
	at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.getTarget(Cglib2AopProxy.java:660)
	at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:610)
	at com.siebre.compensation.batch.PerformCommissionRunTasklet$$EnhancerByCGLIB$$39336c95.execute(<generated>)
	at org.springframework.batch.execution.step.tasklet.TaskletStep$1.doInIteration(TaskletStep.java:124)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:324)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:201)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:131)
	at org.springframework.batch.execution.step.tasklet.TaskletStep.execute(TaskletStep.java:122)
	... 173 more
Caused by: java.lang.IllegalStateException: No context holder available for step scope
	at org.springframework.batch.execution.scope.StepScope.getContext(StepScope.java:127)
	at org.springframework.batch.execution.scope.StepScope.get(StepScope.java:68)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:283)
	... 183 more
The problem is due to the asymmetry between the implementation of TaskletStep.execute() and AbstractStep.execute().
In AbstractStep.execute(), the execution logic is delegated to class SimpleStepExecutor,  which will register step context when started.
public void execute(final StepExecution stepExecution) throws BatchCriticalException, JobInterruptedException {
		final StepInstance stepInstance = stepExecution.getStep();
		Assert.notNull(stepInstance);
		boolean isRestart = stepInstance.getStepExecutionCount() > 0 ? true : false;
		ExitStatus status = ExitStatus.FAILED;
		try {
			stepExecution.setStartTime(new Date(System.currentTimeMillis()));
			// We need to save the step execution right away, before we start
			// using its ID. It would be better to make the creation atomic in
			// the caller.
			updateStatus(stepExecution, BatchStatus.STARTED);
			StepContext parentStepContext = StepSynchronizationManager.getContext();
			final StepContext stepContext = new SimpleStepContext(stepExecution, parentStepContext, streamManager);
			StepSynchronizationManager.register(stepContext);
....
but in TaskletStep.execute(),  there is no stepContext being registered.
public void execute(StepExecution stepExecution) throws JobInterruptedException, BatchCriticalException {
		stepExecution.setStartTime(new Date());
		updateStatus(stepExecution, BatchStatus.STARTED);
		ExitStatus exitStatus = ExitStatus.FAILED;
		try {
			// We are using the RepeatTemplate as a vehicle for the listener
			// so it can be set up cheaply here with standard properties.
			RepeatTemplate template = new RepeatTemplate();
			template.setCompletionPolicy(new SimpleCompletionPolicy(1));
			template.setListeners(listeners);
			exitStatus =template.iterate(new RepeatCallback() {
				public ExitStatus doInIteration(RepeatContext context) throws Exception 
{
					return tasklet.execute();
				}
 
			});
			updateStatus(stepExecution, BatchStatus.COMPLETED);
		}
		catch (Exception e) 
{
			logger.error("Encountered an error running the tasklet");
			updateStatus(stepExecution, BatchStatus.FAILED);
			throw new BatchCriticalException(e);
		}
		finally 
{
			stepExecution.setExitStatus(exitStatus);
			stepExecution.setEndTime(new Date());
			jobRepository.saveOrUpdate(stepExecution);
		}
	}
...
