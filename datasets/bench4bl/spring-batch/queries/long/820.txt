When storing an Integer into the 'OBJECT_VAL BLOB' field on the 'EXECUTION_CONTEXT' table I receive the exception below, seemingly caused by a 'Data Type Mismatch' (Also See Below) for the field.  Line 178 of the JdbcExecutionContextDao (lobCreator.setBlobAsBytes(ps, 5, SerializationUtils.serialize((Serializable) value)) can be changed to: 
byte[] b = SerializationUtils.serialize((Serializable) value );
lobCreator.setBlobAsBinaryStream( ps, 8, new ByteArrayInputStream( b ), b.length );
... and the problem seems to be resolved, however I am not sure how this would work on other databases.  It may be worthwhile to allow a flexibility of what LobHandler is used so that the user is not always forced into using the 'DefaultLobHandler'.  It seems that Spring recommends using the 'OracleLobHandler' for Oracle specific environments and allowing this flexibility could essentially lead a way around the problem for us, i.e. creating a 'DB2LobHandler' where we could change the behavior of the 'setBlobAsBytes'.
This seems to be a specific DB2 issue caused by trying to a 'ByteArray' into a Blob field where a Byte InputStream appears to store without issue.  The 'SQLWarning' trace below seems to be a side effect of this warning, however it in turn throws an exception that causes our job to rollback.
Log message:
2008-09-03 15:18:23,126 DEBUG [org.springframework.jdbc.core.JdbcTemplate] SQLWarning ignored: SQL state 'null', error code '0', message [Input data type mismatch, see chained exceptions; will retry execution using describe input information. Please change application to use an input data type that matches the database column type as required by JDBC semantics.]
Which then creates this Exception:
java.lang.Error: SQLWarning chain holds value that is not a SQLWarning
	at java.sql.SQLWarning.getNextWarning(SQLWarning.java:111)
	at org.springframework.jdbc.core.JdbcTemplate.handleWarnings(JdbcTemplate.java:1172)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:567)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:594)
	at TestBlobExceptionyUtil.testBlobHandler(TestExceptionDisplayUtil.java:67)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:615)
	at junit.framework.TestCase.runTest(TestCase.java:154)
	at junit.framework.TestCase.runBare(TestCase.java:127)
	at org.springframework.test.ConditionalTestCase.runBare(ConditionalTestCase.java:76)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)
Which has a root cause of:
com.ibm.db2.jcc.c.SqlException: DB2 SQL error: SQLCODE: -301, SQLSTATE: 42895, SQLERRMC: 8
