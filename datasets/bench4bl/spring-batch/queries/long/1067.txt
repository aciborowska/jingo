Consider the following flow:
    <split id="split1">
        <next on="FAILED" to="step3"/>
            <fail on="COMPLETED" />
            <flow>
                <step name="step1"/>
            </flow>
            <flow>
                <step name="failingStep"/>
            </flow>
    </split>
    <step name="step3"/>
What should happen:
1) Since step1 exits with COMPLETED and failingStep exits with FAILED, and FAILED is higher precedence in BatchStatus, step3 should execute (based on the split1's transitions).  
2) The status of split1 should end up as FAILED and the final status (after step3) should be COMPLETED (step3's result).
What is happening:
1) EndState.handle() always returns COMPLETED, so when SplitState.handle() calculates the status of split1, the result is COMPLETED (not FAILED).
2) EndState.handle() always updates the same JobExecution's status, so it is seen by the framework as the aggregate of the statuses of all the steps.