Hi,
I configure a ExponentialBackOffPolicy like this:






 




    <bean id="exponentialBackOffPolicy" class="org.springframework.batch.retry.backoff.ExponentialBackOffPolicy"




        p:initialInterval="500" p:maxInterval="30000" p:multiplier="2" />






and use it for DeadLockLoserDataAccessException. Then I intentionally throw a DeadLockLoserDataAccessException in the main part of my item processor code and observe the behaviour. However, the retry never backoffs exponentially. I trace through the RetryTemplate class (in particulary lines 197 - 256 in 2.1.7 release), and the backOffPolicy and its context seem stateless in runtime:






 




	protected <T> T doExecute(RetryCallback<T> retryCallback, RecoveryCallback<T> recoveryCallback, RetryState state)




			throws Exception, ExhaustedRetryException {




 




		RetryPolicy retryPolicy = this.retryPolicy;




		BackOffPolicy backOffPolicy = this.backOffPolicy;




 




...




		// Start the backoff context...




		BackOffContext backOffContext = backOffPolicy.start(context);




...




		backOffPolicy.backOff(backOffContext);




...






That is, the backOffPolicy is never updated and the backOffContext is never saved after the call to backoff, hence the interval stays the same value.
I submitted the same issue to the Spring forum and StackOverflow and no answer, hence created this issue.
Thanks, Kev
