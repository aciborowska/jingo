Job Identifier is documented as being a strategy (and as such, is an interface).  However, the interface really seems to define a value object that is used as a unique key.  Thus, the primary use for a JobInstance is .equals() and .hashCode().
E.g. 
if (registry.containsKey(jobIdentifier)) 
{
				return ((JobExecutionHolder) registry.get(jobIdentifier)).getExecution();
			}

This requires that .equals() and .hashCode() are consistently implemented across all implementations of JobInterface.  I don't have my copy of "Effective Java" around, but it's pretty clear in how unlikely that is (especially with no documentation about the fact that it will be used that way).
A more appropriate alternative would be to convert JobIdentifier to a value object and provide factories for conveniently populating different properties (e.g. JobIdentifier newScheduledJobIdentifier(String jobName, Date scheduleDate)).