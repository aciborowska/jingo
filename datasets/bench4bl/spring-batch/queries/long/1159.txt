Exceptions in readers and writers seems to be handled nicely, but there seems to be a problem throwing skippable exception from processor. StepExecution's processSkipCount is incremented, skip listeners are called and step listener's afterStep() gets correct counts in StepExecution has correct counts. But PROCESS_SKIP_COUNT is never incremented in database - allways 0. Sometimes even filterCount is incremented in StepExecution instead of processSkipCount. I tried to debug through sources but got pretty lost I've checked that HibernateTemplate.flush() is called everytime in the writer. 
This is part of our parent step configuration (FaultTolerantStepFactoryBean) used for all batches (i believe there should be no problem)
		<property name="retryableExceptionClasses">
			<list>
				<value>org.springframework.dao.RecoverableDataAccessException</value>
				<value>org.springframework.dao.TransientDataAccessException</value>
			</list>
		</property>
		<property name="skippableExceptionClasses" value="java.lang.Exception" />
		<property name="fatalExceptionClasses">
			<list>
				<value>cz.mycompany.FatalProcessingException</value>
				<value>org.springframework.batch.core.JobInterruptedException</value>
			</list>
		</property>
Problem appeared to be there quite some time. Previously we used 2.0.0.M2 and it was already there.