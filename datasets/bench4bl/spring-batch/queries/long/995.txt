if (retryPolicy == null) {
	SimpleRetryPolicy simpleRetryPolicy = new SimpleRetryPolicy(retryLimit);
	if (!retryableExceptionClasses.isEmpty()) 
{ // otherwise we
		// retry all exceptions
		simpleRetryPolicy.setRetryableExceptionClasses(retryableExceptionClasses);
	}
	simpleRetryPolicy.setFatalExceptionClasses(fatalExceptionClasses);
	ExceptionClassifierRetryPolicy classifierRetryPolicy = new ExceptionClassifierRetryPolicy();
	HashMap<Class<? extends Throwable>, RetryPolicy> exceptionTypeMap = new HashMap<Class<? extends Throwable>, RetryPolicy>();
	for (Class<? extends Throwable> cls : retryableExceptionClasses) 
{
		exceptionTypeMap.put(cls, simpleRetryPolicy);
	}
	classifierRetryPolicy.setPolicyMap(exceptionTypeMap);
	retryPolicy = classifierRetryPolicy;
}
SimpleRetryPolicy is for some reason wrapped in ExceptionClassifierRetryPolicy. This not only seems unnecessary, but also ignores the fatalExceptionClasses (unless they subclass the retryableExceptionClasses).
The most interesting thing however is that using simpleRetryPolicy directly severely breaks the FaultTolerantStepFactoryBeanTests.