i am using a BatchConfigurer with @EnableBatchProcessing. another @Configuration class uses @ImportResource to include some xml-based job configuration using the batch namespace.
now i got exceptions regarding cglib vs. jdk proxying on startup. removing the batch xml "fixes" it.
debugging into this, it looks like the BeanDefinition of the StepScope coming from Java Config is not registered with a beanClassName of "org.springframework.batch.core.scope.StepScope", but looks like the following:






Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.batch.core.configuration.annotation.StepScopeConfiguration; factoryMethodName=stepScope; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/batch/core/configuration/annotation/StepScopeConfiguration.class]






so, the CoreNamespaceUtils do not find it and register their own StepScope.
making things worse, Java Config works with a default of StepScope.autoProxy = false while the xml namespace one defaults to true.
the StepScope from the xml namespace is (at least in my case) registered later, seems to win (or is applied at least), causes the errors (i do not want autoProxy-ing).