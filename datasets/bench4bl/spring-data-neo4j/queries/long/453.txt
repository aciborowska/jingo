https://groups.google.com/forum/#!topic/neo4j/sp8UkNiYh8w has the description, but it's pasted here regardless:
I have a POJO annotated thusly:
@NodeEntity
public class Platform {
	@GraphId
	private Long nodeId;
	@Indexed
	private String platformId;
...
Now, in some other code elsewhere, I'm having a Neo4jTemplate instance perform a ".lookup(...) like so:
Platform platform = template.lookup(Platform.class, "platformId", platformId).to(Platform.class).singleOrNull();
platformId holds a legal value ("1", in fact).
I get an exception thrown in IndexProvider (specifically in IndexProviderImpl) in "getIndex" like so:
        if (providedIndexName==null || providedIndexName.equals(defaultIndexName)) 
{
            throw new IllegalStateException("Index name for "+property+" must differ from the default name: "+defaultIndexName);
        }


Now, providedIndexName is null since none was annotated in the POJO.  The defaultIndexName is, unsurprisingly, "Platform".  In fact, the "property" parameter into the method has the value "class java.lang.String platformId rel: false idx: true" and the instanceType parameter is "class com.proj.vonneumanns.entities.Platform".  Seems about right.
So, should I be using the .lookup(...) method?  Or am I misunderstanding with respect to how I should be annotating my POJO above?  I do not want to use the legacy indices, so I don't want to specify indexName or indexType, and based on what I've seen so far from the blogs and updates, the POJO is annotated correctly for the latest SDN (i.e. 3.0.1).
(And concerning the use of "findUniqueEntity" instead of "lookup", Neo4jOperations does not currently have this method, while Neo4jTemplate does, just in case this is useful info.)