I have a very simple repository (extends GraphRepository) with this method:
Layer findLayerByNameAndOem(String name, String oem);
My understanding is this should find the layer where both name and oem match.  This fails.  It finds all Layer instances with the same name.  Both fields are @Indexed.
My test is this:
	@Test
	@Transactional
	public void findLayerByNameAndOem_returnsSingleResult() 
{
		repository.save(new Layer("development1", "SUXX"));
		repository.save(new Layer("development2", "SUXX"));
		Layer retrievedLayer = repository.findLayerByNameAndOem("development1", "SUXX");
		assertNotNull(retrievedLayer);
		assertEquals("retrieved illustration fileName matches", "development", retrievedLayer.getName());
		assertEquals("retrieved illustration name matches", "SUXX", retrievedLayer.getOem());
	}

and the stack trace is:
java.util.NoSuchElementException: More than one element in IteratorWrapper(non-empty iterator). First element is '
{layer=Node[5]}
' and the second element is '
{layer=Node[6]}
'
	at org.neo4j.helpers.collection.IteratorUtil.singleOrNull(IteratorUtil.java:118)
	at org.neo4j.helpers.collection.IteratorUtil.singleOrNull(IteratorUtil.java:260)
	at org.springframework.data.neo4j.conversion.QueryResultBuilder$1.singleOrNull(QueryResultBuilder.java:94)
	at org.springframework.data.neo4j.repository.query.GraphRepositoryQuery.dispatchQuery(GraphRepositoryQuery.java:96)
...