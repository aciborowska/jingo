Using spring-data-neo4j, I create two classes using @RelationshipEntity(type="OWNS") to link a Person class to both a Pet and Car.
@RelationshipEntity(type="OWNS")
public class OwnsCar {  
    @Indexed
    private String name;
    @StartNode
    private Person person;
    @EndNode
    private Car car;
}
@RelationshipEntity(type="OWNS")
public class OwnsPet {
    @Indexed
    private String name;
    @EndNode
    private Person person;
    @StartNode
    private Pet pet;
}
This saves to the Graph Database properly with no problems, as I can query the actual Node and Relationship and see they type, etc.
But when I attempt to use @RelatedTo(type="OWNS", elementClass=Pet.class) I either get a class cast exception, or when using lazy-initialization I get incorrect results.
@NodeEntity
public class Person {   
    @Indexed
    private String name;
    @RelatedTo(type="OWNS", direction=Direction.OUTGOING, elementClass=Pet.class)
    private Set<Pet> pets;
    @RelatedTo(type="OWNS", direction=Direction.OUTGOING, elementClass=Car.class)
    private Set<Car> cars;
} 
The result I get when I attempt to print our my person(my toString() has been omitted, but it simply calls the toString() for each field) is this:
Person [nodeId=1, name=Nick, pets=[Car [nodeId=3, name=Thunderbird]], cars=[Car [nodeId=3, name=Thunderbird]]]
