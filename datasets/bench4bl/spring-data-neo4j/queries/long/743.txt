





package keyron.socialnet.facebook.database.neo4j.model;




 




import lombok.Data;




import lombok.EqualsAndHashCode;




import lombok.NoArgsConstructor;




import lombok.ToString;




import org.neo4j.ogm.annotation.Relationship;




import org.neo4j.ogm.annotation.typeconversion.DateLong;




 




import java.io.Serializable;




import java.util.Date;




import java.util.Set;




 




@EqualsAndHashCode(callSuper = true)




@Data




@ToString(callSuper = true)




@NoArgsConstructor




public class FacebookAccount extends FacebookEntity implements Serializable {




 




    //service fields




    Boolean doesExist;




 




    @DateLong




    Date hydrationDate;




    @DateLong




    Date lastEncounter = new Date();




 




    Boolean areFriendsVisible;




    Boolean areInfoVisible;




 




    //proper Facebook properties




    String name;




    String first_name;




    String last_name;




    String gender;




    String locale;




    String email;




    String username;




 




    @Relationship(type = "LIVES_IN", direction = Relationship.OUTGOING)




    FacebookAccountAttribute livesin;




 




    @Relationship(type = "HAS_LIVED", direction = Relationship.OUTGOING)




    Set<FacebookAccountAttribute> hasLivedIn;




 




    @Relationship(type = "HAS_EXPERIENCE", direction = Relationship.OUTGOING)




    Set<FacebookAccountAttribute> experience;




 




    @Relationship(type = "HAS_AS_FRIEND", direction = Relationship.OUTGOING)




    Set<FacebookAccount> friends;




 




    @Relationship(type = "FOLLOWING", direction = Relationship.OUTGOING)




    Set<FacebookAccount> following;




 




    @Relationship(type = "IS_FOLLOWED_BY", direction = Relationship.INCOMING)




    Set<FacebookAccount> followers;




 




}




 




 




 public FacebookAccount saveAccount(@NotNull FacebookAccount account) {




        long startExecutionTime = System.currentTimeMillis();




        boolean saveok = false;




        int count = 0;




        //to avoid duplicates




        try {




            FacebookAccount faAlreadyInDB = facebookNeo4jEntityFactory.getByFacebookId(account.getFacebookId(), FacebookAccount.class);




            if (faAlreadyInDB != null) {




                account.setId(faAlreadyInDB.getId());




            }




        } catch (Exception e) {




            log.error("FacebookNeo4jEntityFactory.getByFacebookId", e);




        }




 




        facebookAccountRepository.save(account, 1);




        log.info("saving time for \n" + account.toString() + "\n is ms: " + (System.currentTimeMillis() - startExecutionTime));




        return account;




    }




 












During saving of large data (i.e. large number of connected nodes), even if:

all other nodes are already stored in the db
depth is set to 1 (because i want the relations)
save seems to be completed successfull (without errors or logs)

memory heap occupation increase (and never release even if i shut down the client). After some saving of this kind, neo4j die for exaustion.