Consider the case of a user who has many badges.  Badge is an abstract class with several concrete subclasses implementing specialized behavior.  Only one node of each Badge subtype (should) exist in the graph, so multiple users may all hold a badge in common and therefore it would be possible to traverse the graph between users via badges.  Badges are eagerly fetches when retrieving a user via UserRepository.
This should be a trivial case to implement, but I'm observing an unexpected behavior.  The id attribute (or any other attribute that the concrete subclasses of Badge inherit from Badge) is NOT being populated as expected when badges are eagerly fetched upon retrieval via UserRepository.  An interesting (and devastating) consequence of this is that if the user is modified and saved, it appears to SDN that these badges associated to the User are NEW nodes (on account of the fact that they don't have an id).  This results in NEW nodes being added to the graph- and thus, badges are inadvertently duplicated!  It then becomes impossible to traverse the graph between users via badges.  
In an associated forum post (http://forum.springsource.org/showthread.php?126206-Polymorphism-with-SDN), Michael Hunger has confirmed that this SHOULD work as I expect.  I suppose, as a corollary then, the behavior I'm observing is NOT correct.
At his request, I'm attaching an extremely simple STS project that demonstrates the unexpected behavior I'm observing.