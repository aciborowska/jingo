I am using spring data + neo4j.  In my entities, I initially setup custom IDs to act as my unique id, like so 






Post.java






 




public Post 




.... 




@Indexed 




private Long id; 




.... 




 






this worked fine for a query on my repo like: 






PostController.java






.... 




Post myNewPost = postRepository.findByPropertyValue("id", someLongId); 




.... 






however, when I tried derived queries, I kept getting a null pointer 
exception. 






PostController.java






.... 




Post anotherNewPost = postRepository.findById(someLongId); 




.... 






in the repo interface I used: 






PostRepository.java






.... 




public interface PostRepository extends GraphRepository<Post> {




 




	Post findById(Long id);




}




 




.... 






I switched Long with String (entity & on down) and the derived query worked.






 




public Post 




.... 




@Indexed 




private String id; 




.... 




 




.... 




public interface PostRepository extends GraphRepository<Post> {




 




	Post findById(String id);




}




 




....




 






Michael Hunger suggested it is a bug related to "the automatic conversion to numeric indexing for lucene for range queries, but which then fails to work with direct lookups and or lucene query syntax."
Please reference Michael's comment here: http://groups.google.com/group/neo4j/browse_thread/thread/6a1d2f4bf514fa6b