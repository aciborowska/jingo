If IService is an interface and Service its @NodeEntity annotated implementing class, then this declaration should be valid, because the concrete type is given with the elementClass attribute:






@RelatedTo(elementClass = Service.class, type = "foo", direction = Direction.OUTGOING)




private Set<IService> services;






Currently this is not accepted with this error:
Caused by: org.springframework.data.neo4j.mapping.InvalidEntityTypeException: Type interface com.example.IService is neither a @NodeEntity nor a @RelationshipEntity
	at org.springframework.data.neo4j.support.mapping.Neo4jMappingContext.createPersistentEntity(Neo4jMappingContext.java:48)
	at org.springframework.data.neo4j.support.mapping.Neo4jMappingContext.createPersistentEntity(Neo4jMappingContext.java:38)
	at org.springframework.data.mapping.context.AbstractMappingContext.addPersistentEntity(AbstractMappingContext.java:234)
	at org.springframework.data.mapping.context.AbstractMappingContext$PersistentPropertyCreator.doWith(AbstractMappingContext.java:395)
	at org.springframework.util.ReflectionUtils.doWithFields(ReflectionUtils.java:513)
	at org.springframework.data.mapping.context.AbstractMappingContext.addPersistentEntity(AbstractMappingContext.java:246)
	at org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(AbstractMappingContext.java:165)
	at org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(AbstractMappingContext.java:140)
	at org.springframework.data.neo4j.support.node.NodeEntityStateFactory.getEntityState(NodeEntityStateFactory.java:38)
	at org.springframework.data.neo4j.aspects.support.node.Neo4jNodeBacking.ajc$before$org_springframework_data_neo4j_aspects_support_node_Neo4jNodeBacking$1$74591ff9(Neo4jNodeBacking.aj:122)
	...