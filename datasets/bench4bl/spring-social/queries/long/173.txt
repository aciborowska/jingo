Both TwitterErrorHandler and FacebookErrorHandler are written to inspect the body of an error response to determine what went wrong. And they expect the body to be in JSON form. That's fine if the error is being served by Twitter's or Facebook's application. But if the error happens upstream at the web server, the body will likely be HTML and not JSON. (See SOCIAL-144 for one example.)
TwitterErrorHandler and FacebookErrorHandler should be more resilient to non-JSON responses. At very least, they should fail gracefully when they encounter non-JSON body content.