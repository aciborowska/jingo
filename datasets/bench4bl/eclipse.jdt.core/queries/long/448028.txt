Version: Luna SR1 (4.4.1)Build id: M20140925-0400andVersion: Mars (4.5)Build id: I20140918-0330In the following example the method err1() compiles ok when using JDK Compilance 1.7 but issues an error when set to 1.8:package e44.j8.err;public class F { public static interface I {/*empty*/} public static class C implements I {/*empty*/} public static class W T extends I  implements I { // --- problem is triggered only, when there is a vararg-parameter public W(final T t, final Object... o) { super(); } } // --- needed to trigger problem public static final  T  T inspect(final T t) { return t; } // --- this compiles ok when having JDK Compilance set to 1.7 ! public static final W C  err1() { final C c = new C(); final Object o = new Object(); return inspect(new W  (c, o)); // - ERROR: Cannot infer type arguments for W   F.java } public static final W C  wrn1() { final C c = new C(); final Object o = new Object(); // --- giving the type-parameter yields a warning // --- comparing that to the error of method err1() it does not make much sense return inspect(new W C (c, o)); // - WARNING: Redundant specification of type arguments  F.C  F.java } public static final W C  ok1() { final C c = new C(); // --- no extra vararg-paramaeter return inspect(new W  (c)); // - OK } public static final W C  ok2() { final C c = new C(); final Object o = new Object(); // --- no check-method return new W  (c, o); // - OK } public static final W C  ok3() { final C c = new C(); // --- no check-method return new W  (c); // - OK } public static final W C  ok4() { final C c = new C(); final Object o = new Object(); // --- this also compiles (my solution for now) final W C  w = new W  (c, o); return inspect(w); }}