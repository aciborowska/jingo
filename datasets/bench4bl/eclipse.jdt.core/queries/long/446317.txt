Similar to https://bugs.eclipse.org/bugs/show_bug.cgi?id=444803 we found slightly different variants using Lambdas/Inner Classes etc. where the ECJ generates invalid bytecode and causes following Exception during verifying:Exception in thread "main" java.lang.VerifyError: Bad type on operand stackException Details: Location: java8/ecjissues/AnotherEcjProblem$Sub. init (Ljava8/ecjissues/AnotherEcjProblem;)V @8: invokedynamic Reason: Type uninitializedThis (current frame, stack[2]) is not assignable to 'java8/ecjissues/AnotherEcjProblem$Sub'See following code:// ----------------------------------------------------------------------import java.util.function.Consumer;@SuppressWarnings("all")public class AnotherEcjProblem { private final String text = "Bug?"; public static void main(String[] args) { new AnotherEcjProblem().doIt(); } private void doIt() { new Sub(); } private class Super T  { public Super(Consumer T  consumer) { } } private class Sub extends Super String  { public Sub() { super(s -  System.out.println(text)); // super(s -  System.out.println("miep")); } }}// ----------------------------------------------------------------------import java.util.HashMap;import java.util.Map;import java.util.function.Function;public class EclipseCompilerAndLambdaCrash { public static void main(String[] args) { new EclipseCompilerAndLambdaCrash().run(); } public void run() { class Inner { public Inner() { System.out.println("miep"); } } Map String, Inner  map = new HashMap  (); Function String, Inner  function = (name) -  { Inner i = map.get(name); if (i == null) { i = new Inner(); map.put(name, i); } return i; }; function.apply("test"); }}// ----------------------------------------------------------------------Tested with 4.4.1 and eclipse-SDK-N20141007-2000-win32-x86_64