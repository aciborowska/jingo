Created attachment 246271Code triggering the bug.When $deserializeLambda$ deserializes the captured arguments of a serializable lambda that captures the enclosing instance, it does not account for the captured instance when computing argument indexes.The $deserializeLambda$ method for example code attached passes twice index 0 to java.lang.invoke.SerializedLambda.getCapturedArg to obtain either the capture instance or the captured integer.It looks like a simple coding mistake in org.eclipse.jdt.internal.compiler.codegen.CodeStream. In method generateSyntheticBodyForDeserializeLambda, in loop "for (int p=0,max=outerLocalVariables.length;p max;p++)" the loop index "p" is used in place of the argument index "index" to generated the argument to "java.lang.invoke.SerializedLambda.getCapturedArg".