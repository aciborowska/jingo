The following program doesn't compile with Eclipse but compiles fine with javac:---------------------------------------------------------package test;import java.util.function.BiFunction;import java.util.function.Function;import java.util.function.Predicate;import java.util.stream.Stream;public class Test { static  T  Tuple2 Seq T , Seq T   splitAtDoesntCompile(Stream T  stream, long position) { return seq(stream) .zipWithIndex() .partition(t -  t.v2   position) .map((v1, v2) -  tuple( v1.map(t -  t.v1), v2.map(t -  t.v1) )); } static  T  Tuple2 Seq T , Seq T   splitAtCompiles(Stream T  stream, long position) { return seq(stream) .zipWithIndex() .partition(t -  t.v2   position) .map((v1, v2) -  Test. Seq T , Seq T  tuple( v1.map(t -  t.v1), v2.map(t -  t.v1) )); } static  T  Seq T  seq(Stream T  stream) { return null; } static  T1, T2  Tuple2 T1, T2  tuple(T1 v1, T2 v2) { return null; }}interface I T  { T get();  U  I U  map(Function T, U  f);}interface Seq T  { Seq Tuple2 T, Long   zipWithIndex(); Tuple2 Seq T , Seq T   partition(Predicate ? super T  predicate);  R  Seq R  map(Function ? super T, ? extends R  mapper);}class Tuple2 T1, T2  { T1 v1; T2 v2;  R  R map(BiFunction T1, T2, R  function) { return null; }}---------------------------------------------------------The problematic call is the call to Test.tuple() from within the lambda. The Eclipse compiler doesn't seem to be able to correctly infer the generic types Test. Seq T , Seq T  tuple().