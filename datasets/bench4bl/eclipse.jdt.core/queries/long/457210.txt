This might be related to bug 444024?I tried compiling a bigger workspace with Luna SR1, Eclipse Mars M4, and also with a Mars version built on top of Stephan's "external annotations" branch. In this version I have the following: given the following class fragment:public class HtmlRunReporter implements ITxPerClassListener, IResultReporter { @Nonnull final private OutputHelper m_outputHelper; @Nullable private HtmlOut m_o; public HtmlRunReporter(@Nonnull OutputHelper outputDir) { m_outputHelper = outputDir; }with:- this being the ONLY constructor- project set to 1.6 level- Nullity checks present with the "old" annotations (declaration jsr305 style)I get 2 errors on a full build:The @Nonnull field m_o may not have been initializedThe @Nonnull field m_outputHelper may not have been initializedIf I just change something and save, causing an incremental compile the error about m_o disappears.If I then for instance remove the @Nonnull from the constructor parameter and save the other error disappears.Adding the @Nonnull back and save - no error still -  the code is now the same as before, yet all errors are gone.The last one, where you really need to play with the @Nonnull to make it disappear is odd. It seems that any change to nullness information "fixes" that problem in incremental build, for instance adding a @Nullable or @Nonnull somewhere else.The first problem does not occur if I add "m_o = null" inside the constructor.Changing JDK and language level to 1.7 has no effect on the problem.No idea if it is related, but what is also noticeable is that the editor's error markings (in the gutter) also behave bad: they are often present when the error has been gone from "problems" and vice versa.