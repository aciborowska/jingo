In the AuthorizationCodeTokenGranter, the following call:
		AuthorizationRequest authorizationRequest = authorizationRequestFactory.createAuthorizationRequest(parameters,  pendingAuthorizationRequest.getApprovalParameters(),
				clientId, grantType, pendingAuthorizationRequest.getScope());
Creates a new AuthorizationRequest which is then passed to the TokenServices to make a token. This AuthorizationRequest object preserves the approvalParameters map from the stored AuthorizationRequest but discards the authorizationParameters map and replaces it with the parameters map from the token request. This is a problem for OpenID Connect, where the call to the AuthorizationEndpoint contains a "nonce" parameter (among others) that must be preserved and available to the token service so that it can be injected into the claims fields of the ID Token. Other parameters on the request to the AuthorizationEndpoint may also influence token creation. 
We see two options for resolving this:
 1) Merge the two parameter maps and give precedence to one of them (probably the AuthorizationEndpoint parameters, stored in the pendingAuthorizationRequest object). This is a fairly simple fix to code, but it conflates two different parameter sets in the authorization code flow.
 2) Add a third parameter map to AuthorizationRequest: tokenParameters. This requires more surgery but allows us to keep the three different parameter sets separate. It is significantly cleaner API architecture, but it has the downside of potentially conflating things for the non-authorization-code flows.
We prefer option #2, but either approach should fix this. We can submit a pull request very quickly for either of these if you would like.