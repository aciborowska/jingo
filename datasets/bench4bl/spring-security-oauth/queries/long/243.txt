/**

 */
package org.springframework.security.oauth2.provider.token;

import java.util.Collections;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.datasource.embedded.EmbeddedDatabase;
import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;
import org.springframework.security.oauth2.common.OAuth2AccessToken;
import org.springframework.security.oauth2.common.OAuth2RefreshToken;
import org.springframework.security.oauth2.provider.AuthorizationRequest;
import org.springframework.security.oauth2.provider.OAuth2Authentication;
import org.springframework.security.oauth2.provider.token.TestRandomValueTokenServices.TestAuthentication;
/**

@author lookis
 */
public class TestRandomValueTokenServicesForJdbcTokenStore {

    private TokenStore tokenStore;
    private RandomValueTokenServices services;
    @Before
    public void createStore() throws Exception 
{
        EmbeddedDatabase db = new EmbeddedDatabaseBuilder().addDefaultScripts().build();
        tokenStore = new JdbcTokenStore(db);
        services = new RandomValueTokenServices();
        services.setTokenStore(tokenStore);
        services.afterPropertiesSet();
        services.setSupportRefreshToken(true);
    }

    @Test
    public void testDuplicateRefreshToken() throws Exception {
        OAuth2Authentication expectedAuthentication = new OAuth2Authentication(
                new AuthorizationRequest("id", Collections.singleton("read"), null, null),
                new TestAuthentication("test", false));
        OAuth2AccessToken accessToken = services.createAccessToken(expectedAuthentication);
        OAuth2RefreshToken refreshToken = accessToken.getRefreshToken();
        try 
{
            tokenStore.readRefreshToken(refreshToken.getValue());
        }
 catch (DataAccessException e) 
{
            Assert.fail(e.getMessage());
        }
    }
}