A scanner is made of a memcache scanner and a store files scanner.  When a flush happens, the memcache content gets turned into a store file and is added to the list of already existing scanners.  Currently the two scanners run autonomously.  Ben Maurer points out that if we were returning values out of the memcache because they were of lower value than store file content, the lower pegging that was going on in memcache doesn't make it across when we pick up the memcache values in the flushed store file; we just keep on with whatever the lowest among the store files that were in place before the flush.
Its a hard one to spot but should be easy to make a test for it.
Ben Maurer also points out that in StoreFileScanner, we should not register the observer until after the scanners have been setup:

  public StoreFileScanner(final Store store, final long timestamp,
    final byte [][] targetCols, final byte [] firstRow)
  throws IOException {
    super(timestamp, targetCols);
    this.store = store;
    this.store.addChangedReaderObserver(this);
    try {
      openScanner(firstRow);
...

