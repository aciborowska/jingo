We have seen this in our tests. The region gets closed, but the region close handler gets an unexpected exception causing the region to stay in closing state until RS is restarted. 
The Phoenix and security coprocessors were loaded in that region. Here is the stack trace: 



java.util.ConcurrentModificationException

	at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:901)

	at java.util.ArrayList$Itr.next(ArrayList.java:851)

	at org.apache.hadoop.hbase.coprocessor.CoprocessorHost$Environment.shutdown(CoprocessorHost.java:442)

	at org.apache.hadoop.hbase.regionserver.RegionCoprocessorHost$RegionEnvironment.shutdown(RegionCoprocessorHost.java:155)

	at org.apache.hadoop.hbase.coprocessor.CoprocessorHost.shutdown(CoprocessorHost.java:272)

	at org.apache.hadoop.hbase.regionserver.RegionCoprocessorHost$5.postEnvCall(RegionCoprocessorHost.java:496)

	at org.apache.hadoop.hbase.regionserver.RegionCoprocessorHost.execOperation(RegionCoprocessorHost.java:1761)

	at org.apache.hadoop.hbase.regionserver.RegionCoprocessorHost.postClose(RegionCoprocessorHost.java:489)

	at org.apache.hadoop.hbase.regionserver.HRegion.doClose(HRegion.java:1502)

	at org.apache.hadoop.hbase.regionserver.HRegion.close(HRegion.java:1349)

	at org.apache.hadoop.hbase.regionserver.handler.CloseRegionHandler.process(CloseRegionHandler.java:138)

	at org.apache.hadoop.hbase.executor.EventHandler.run(EventHandler.java:128)

	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)

	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)

	at java.lang.Thread.run(Thread.java:745)


