From comments in the code it appears that the JsonMessageConverter could be extended in order to configure the jsonObjectMapper.






	private ObjectMapper jsonObjectMapper = new ObjectMapper();




 




...




 




	/**




	 * Subclass and override to customize.




	 */




	protected void initializeJsonObjectMapper() {




		jsonObjectMapper.configure(DeserializationConfig.Feature.FAIL_ON_UNKNOWN_PROPERTIES, false);




	}






Extending this class and overriding the initializeJsonObjectMapper() method does not offer much since the jsonObjectMapper object is private.  Perhaps it was intended that this object be protected?  If that were the case then it would be possible to send/receive less JSON-friendly classes by doing something like this in a subclass of JsonMessageConverter:
jsonObjectMapper.getDeserializationConfig().addMixInAnnotations(SomePayload.class, SomePayloadMixin.class);