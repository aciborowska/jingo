OrcAcidUtils.getLastFlushLength() should check for file existence first.  Currently causes unnecessary/confusing logging:

org.apache.hadoop.ipc.RemoteException(java.io.FileNotFoundException): File does not exist: /domains/adl/rrslog/data_history/rrslog/r\

rslog/hot/server_date=2016-08-19/delta_0005913_0005913/bucket_00023_flush_length

        at org.apache.hadoop.hdfs.server.namenode.INodeFile.valueOf(INodeFile.java:71)

        at org.apache.hadoop.hdfs.server.namenode.INodeFile.valueOf(INodeFile.java:61)

        at org.apache.hadoop.hdfs.server.namenode.FSNamesystem.getBlockLocationsInt(FSNamesystem.java:1860)

        at org.apache.hadoop.hdfs.server.namenode.FSNamesystem.getBlockLocations(FSNamesystem.java:1831)

        at org.apache.hadoop.hdfs.server.namenode.FSNamesystem.getBlockLocations(FSNamesystem.java:1744)

        at org.apache.hadoop.hdfs.server.namenode.NameNodeRpcServer.getBlockLocations(NameNodeRpcServer.java:693)

        at org.apache.hadoop.hdfs.protocolPB.ClientNamenodeProtocolServerSideTranslatorPB.getBlockLocations(ClientNamenodeProtocolSe\

rverSideTranslatorPB.java:373)

        at org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos$ClientNamenodeProtocol$2.callBlockingMethod(ClientName\

nodeProtocolProtos.java)

        at org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine.java:640)

        at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:982)

        at org.apache.hadoop.ipc.Server$Handler$1.run(Server.java:2313)

        at org.apache.hadoop.ipc.Server$Handler$1.run(Server.java:2309)

        at java.security.AccessController.doPrivileged(Native Method)

        at javax.security.auth.Subject.doAs(Subject.java:422)

        at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1724)

        at org.apache.hadoop.ipc.Server$Handler.run(Server.java:2307)



        at org.apache.hadoop.ipc.Client.getRpcResponse(Client.java:1552)

        at org.apache.hadoop.ipc.Client.call(Client.java:1496)

        at org.apache.hadoop.ipc.Client.call(Client.java:1396)

        at org.apache.hadoop.ipc.ProtobufRpcEngine$Invoker.invoke(ProtobufRpcEngine.java:233)

        at com.sun.proxy.$Proxy14.getBlockLocations(Unknown Source)

        at org.apache.hadoop.hdfs.protocolPB.ClientNamenodeProtocolTranslatorPB.getBlockLocations(ClientNamenodeProtocolTranslatorPB\

.java:270)

        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

        at java.lang.reflect.Method.invoke(Method.java:497)

        at org.apache.hadoop.io.retry.RetryInvocationHandler.invokeMethod(RetryInvocationHandler.java:278)

        at org.apache.hadoop.io.retry.RetryInvocationHandler.invoke(RetryInvocationHandler.java:194)

        at org.apache.hadoop.io.retry.RetryInvocationHandler.invoke(RetryInvocationHandler.java:176)

        at com.sun.proxy.$Proxy15.getBlockLocations(Unknown Source)

        at org.apache.hadoop.hdfs.DFSClient.callGetBlockLocations(DFSClient.java:1236)

        at org.apache.hadoop.hdfs.DFSClient.getLocatedBlocks(DFSClient.java:1223)

        at org.apache.hadoop.hdfs.DFSClient.getLocatedBlocks(DFSClient.java:1211)

        at org.apache.hadoop.hdfs.DFSInputStream.fetchLocatedBlocksAndGetLastBlockLength(DFSInputStream.java:309)

        at org.apache.hadoop.hdfs.DFSInputStream.openInfo(DFSInputStream.java:274)

        at org.apache.hadoop.hdfs.DFSInputStream.<init>(DFSInputStream.java:266)

        at org.apache.hadoop.hdfs.DFSClient.open(DFSClient.java:1536)

        at org.apache.hadoop.hdfs.DistributedFileSystem$4.doCall(DistributedFileSystem.java:330)

        at org.apache.hadoop.hdfs.DistributedFileSystem$4.doCall(DistributedFileSystem.java:326)

        at org.apache.hadoop.fs.FileSystemLinkResolver.resolve(FileSystemLinkResolver.java:81)

        at org.apache.hadoop.hdfs.DistributedFileSystem.open(DistributedFileSystem.java:326)

        at org.apache.hadoop.fs.FileSystem.open(FileSystem.java:782)

        at org.apache.hadoop.hive.ql.io.orc.OrcRawRecordMerger.getLastFlushLength(OrcRawRecordMerger.java:513)

        at org.apache.hadoop.hive.ql.io.orc.OrcRawRecordMerger.<init>(OrcRawRecordMerger.java:460)

at org.apache.hadoop.hive.ql.io.orc.OrcInputFormat.getRawReader(OrcInputFormat.java:1525)

        at org.apache.hadoop.hive.ql.txn.compactor.CompactorMR$CompactorMap.map(CompactorMR.java:631)

        at org.apache.hadoop.hive.ql.txn.compactor.CompactorMR$CompactorMap.map(CompactorMR.java:610)

        at org.apache.hadoop.mapred.MapRunner.run(MapRunner.java:54)

        at org.apache.hadoop.mapred.MapTask.runOldMapper(MapTask.java:453)

        at org.apache.hadoop.mapred.MapTask.run(MapTask.java:343)

        at org.apache.hadoop.mapred.YarnChild$2.run(YarnChild.java:168)

        at java.security.AccessController.doPrivileged(Native Method)

        at javax.security.auth.Subject.doAs(Subject.java:422)

        at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1724)

        at org.apache.hadoop.mapred.YarnChild.main(YarnChild.java:162)



Also,

2016-08-02 01:05:01,107 INFO  [org.apache.hadoop.hive.ql.txn.AcidHouseKeeperService-0]: txn.TxnHandler (TxnHandler.java:timeOutLocks(2836)) - Deleted 9 ext locks from HIVE_LOCKS due to timeout (vs. 1 found. List: [738]) maxHeartbeatTime=1470099601000



Note that the msg says "Deleted 9 ext locks..."  It actually delete 1 ext which has 9 internal components.  Need to follow up on this.
Also,
TxnHandler has

        LOG.info(quoteString(key) + " locked by " + quoteString(TxnHandler.hostname));



and a corresponding "unlock" msg which flood the metastore log.