Is it intentional that SequencedHashMap.indexOf(Object key) throws a 
NullPointerException when the key does not exist in the map?
Shouldn't it return -1 in those situations?
Here is an addition to the TestSequencedHashMap which examplifies the problem
public void testIndexOf() throws Exception {
  Object[] keys = getKeys();
  int expectedSize = keys.length;
  Object[] values = getValues();
  for (int i = 0; i < expectedSize; i++) 
{
    labRat.put(keys[i], values[i]);
  }
  // test that the index returned are in the same order that they were 
  // placed in the map
  for (int i=0;i<keys.length;i++) 
{
    assertEquals("indexOf with existing key failed",i,labRat.indexOf(keys[i]));
  }
  // test non existing key..
  assertEquals("test with non-existing key failed",-1,labRat.indexOf
("NonExistingKey"));
}