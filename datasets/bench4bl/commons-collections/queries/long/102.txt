The following methods as defined by the Bag interface violate their 
corresponding definitions in the Collection interface:
add(Object), addAll(Collection)
  The Collection interface specifies that the add method should return true if 
the collection changes as a result of the call.  Since a bag's size always 
increases as a result of an add operation, Bag.add should always return true.  
The bag interface specifies that add(Object) will only return true if the 
object was not already in the unique set.
remove(Object)
  The Collection interface states that only one occurrence of a given object 
should be removed as a result of this method.  The Bag interface specifies that 
all occurrences will be removed.
removeAll(Collection)
retainAll(Collection)
containsAll(Collection)
  The Collection specification does not respect cardinality for these methods; 
the Bag interface does.
The add, addAll and remove methods can be fixed easily, and code relying on the 
old behavior can be rewritten simply using existing Bag methods:
   boolean r = bag.add(obj)
can be replaced with:
   boolean r = !bag.contains(obj);
   bag.add(obj)
And
   boolean r = bag.remove(obj)
can be replaced with
   boolean r = bag.remove(obj, bag.getCount(obj));
The existing bulk operations could be implemented with static utility methods 
in CollectionUtils (or possibly BagUtils), which would allow a smooth migration 
path for code that relies on the current bulk operation behavior.