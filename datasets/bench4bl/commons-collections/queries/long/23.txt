I created two beanmaps, both around objects of the same class, to try to
effectively clone the underlying objects (this was before I looked harder and
realized that BeanMap.clone() would try to instantiate a new object on its own).
I found that this fails with a java.lang.IllegalArgumentException: The bean of
type: com.isx.isaf.IsafAgentDescription has no property called: class
The reason: BeanMap's underlying introspector notices the read-only property of
"class" (the class of the bean object), and has a get() entry for it that has
no matching put.
When AbstractMap.putAll iterates through the values, it tries to put() the class
value and this causes the failure.
The workarounds is to reimplement putAll() outside the map and catch exceptions 
for every failed put (this should be the only one unless the bean itself has 
other read-only properties).  
BeanMap.clone() correctly checks for read-only properties and doesn't try to 
set them, but is limited to beans that have zero-parameter constructors; its 
real problem is that it is still "protected" in BeanMap, not public.  
Possible fix is to override putAll() from AbstractMap and check if the
property is read-only before calling put() and ignoring it if it is.  Options
involving fixing put() itself would cause more problems than solutions, IMHO.
Another fix is to catch the "class" property and filter it out completely so
it never shows up in the keySet or entrySet at all.