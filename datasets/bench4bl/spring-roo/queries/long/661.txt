I am creating an interface in an addon by calling createPhysicalType() on MutablePhysicalTypeMetadataProvider. My ClassOrInterfaceTypeDetails has PhysicalTypeCategory.INTERFACE, and the MethodMetadata has a null body.
However, the generated method does have a body:






public void invoke(Object payload) {




}






This can be handled correctly by avoiding the call to setBody() on the MethodDeclaration inside the addMethod() method of JavaParserMethodMetadata. The challenge would be determining how to make sure there is awareness at that level that this MethodMetadata is for an interface type (as far as I can tell that context is not currently available). It could potentially be handled higher up the stack by always passing a NULL body for interface methods or abstract methods while passing an empty but non-null body for non-abstract class methods:






// Set the body




if (method.getBody() == null || method.getBody().length() == 0) {




    /* and if not a method declared on an interface or an abstract method */




    d.setBody(new BlockStmt());




} 





