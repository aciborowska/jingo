Ex for One-to-Many relation between Owner and Pets in clinic sample :
Owner.java
....
@OneToMany(cascade = CascadeType.ALL, mappedBy = "owner")
    private Set<Pet> pets = new HashSet<Pet>();
....
OwnerController_Roo_Controller.aj
....
@RequestMapping(value = "/owner", method = RequestMethod.POST)
    public String OwnerController.create(@Valid Owner owner, BindingResult result, ModelMap modelMap) {
        if (owner == null) throw new IllegalArgumentException("A owner is required");
        if (result.hasErrors()) 
{
            modelMap.addAttribute("owner", owner);
            modelMap.addAttribute("pets", Pet.findAllPets());
            modelMap.addAttribute("owner_birthDay_date_format", org.joda.time.format.DateTimeFormat.patternForStyle("S-", org.springframework.context.i18n.LocaleContextHolder.getLocale()));
            return "owner/create";
        }
        owner.persist();
        return "redirect:/owner/" + owner.getId();
    }
....
The line to retrieve all database pets ( modelMap.addAttribute("pets", Pet.findAllPets()); ) is generated for nothing. Nowhere this "pets" attribute is used.
I use ROO on a database that contains million of "pets". This means that "Owner" creation form takes ages to load for nothing. 
