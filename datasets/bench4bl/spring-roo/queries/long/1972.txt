Create the following database on your MySQL server:
create table Goose (
  id bigint not null,
  version int not null default 1,
  parentGooseId bigint,
  firstName varchar(30),
  lastName varchar(30),
  maidenName varchar(30),
  primary key(id),
  index(maidenName),
  CONSTRAINT MamaGoose FOREIGN KEY (parentGooseId) REFERENCES Goose(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
I've called the database 'farm', and placed it on 10.0.1.4.
Fire up roo in a new directory and paste in (assuming you have the MySQL JDBC connector available):
project --topLevelPackage tld.mydomain.myproject
persistence setup --provider OPENJPA --database MYSQL --userName mother --password goose --databaseName farm --hostName 10.0.1.4
database reverse engineer --package ~.domain --schema schema
finder list --class ~.domain.Goose
finder add findGooseByMaidennameEquals
exit
then start roo again imediately, you get:
    ____  ____  ____  
   / __ \/ __ \/ __ \ 
  / /_/ / / / / / / / 
 / , _/ // / /_/ /  
// ||___/___/    1.1.1.RELEASE [rev 156ccd6]
Welcome to Spring Roo. For assistance press TAB or type "hint" then hit ENTER.
[Roo Add-on Index XML Eager Download] Downloaded 0% of roobot.xml.zip
[Roo Add-on Index XML Eager Download] Downloaded 100% of roobot.xml.zip
[FelixDispatchQueue] Dynamic finder is unable to match 'MaidennameEquals' token of 'findGooseByMaidennameEquals' finder definition in Goose.java
If you do once more
finder list --class ~.domain.Goose
then you also get an empty list, instead of a nicely populated one.
The only workaround at the moment as far as I know is not to close your roo session.
Cheers
   Nik