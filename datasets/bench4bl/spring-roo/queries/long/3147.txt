Here are the steps to reproduce the problem:
1. Run roo command > entity jpa --class ~.JavaDocLost
2. Edit the resulting file to add a class JavaDoc comment. The file should look like this:
import org.springframework.roo.addon.javabean.RooJavaBean;
import org.springframework.roo.addon.jpa.activerecord.RooJpaActiveRecord;
import org.springframework.roo.addon.tostring.RooToString;
/**

Sample JavaDoc class comment
 */
@RooJavaBean
@RooToString
@RooJpaActiveRecord
public class JavaDocLost {
}

3. Run roo command > field string --fieldName javaDocGone
Observed result: the class comment we added in step #2 is now removed.
Expected result: JavaDoc is preserved.
The resulting java file looks like:
import org.springframework.roo.addon.javabean.RooJavaBean;
import org.springframework.roo.addon.jpa.activerecord.RooJpaActiveRecord;
import org.springframework.roo.addon.tostring.RooToString;
@RooJavaBean
@RooToString
@RooJpaActiveRecord
public class JavaDocLost {
    private String javaDocGone;
}
This might be related to ROO-635, but the discussion for that issue suggests that JavaDoc should not be lost - i.e. the java parser being used by Roo should be preserving JavaDoc comments. Maybe Roo isn't emitting them?
Given that Roo supports a domain-driven design approach, it is important to me that at a minimum the purpose of each entity is clearly documented as a JavaDoc class comment. Having Roo wipe these comments out (and all other comments, as per ROO-635) is a real annoyance.
