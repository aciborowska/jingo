= How to replicate =
When compiling roo from source code, the roo-dev script is found in bootstrap/ folder.
If one runs the roo-dev(.bat) file in that folder, you get the error shown below.
= Details =
The issue is related to ROO-644. The problem is that bootstrap/ is a maven project and when roo is being started in that folder, it reads the pom.xml found there and fails (because of ROO-163, but that's another issue).
My suggestion would be to move the roo-dev scripts to a non-maven folder, or at least update the readme.txt with information regarding this issue, as creating sym links is not possible in all Windows versions.






 




C:\roo-src\bootstrap>roo-dev




    ____  ____  ____




   / __ \/ __ \/ __ \




  / /_/ / / / / / / /




 / _, _/ /_/ / /_/ /




/_/ |_|\____/\____/    1.1.0.M3 [rev 11cd70c]




 




 




Welcome to Spring Roo. For assistance press TAB or type "hint" then hit ENTER.




[FelixDispatchQueue] Maven pom.xml must provide a <groupId> for the <project>




                     java.lang.IllegalArgumentException: Maven pom.xml must provide a <groupId> for the <project>




                         at org.springframework.roo.support.util.Assert.notNull(Assert.java:112)




                         at org.springframework.roo.addon.maven.MavenProjectMetadataProvider.get(MavenProjectMetadataProvider.java:95)




                         at org.springframework.roo.metadata.DefaultMetadataService.get(DefaultMetadataService.java:130)




                         at org.springframework.roo.metadata.DefaultMetadataService.get(DefaultMetadataService.java:149)




                         at org.springframework.roo.addon.gwt.GwtFileListener.onFileEvent(GwtFileListener.java:46)




                         at org.springframework.roo.file.monitor.polling.PollingFileMonitorService.publish(PollingFileMonitorService.java:344)




                         at org.springframework.roo.file.monitor.polling.PollingFileMonitorService.scanAll(PollingFileMonitorService.java:318)




                         at org.springframework.roo.process.manager.internal.MonitoringRequestCommand.callback(MonitoringRequestCommand.java:36)




                         at org.springframework.roo.process.manager.internal.MonitoringRequestCommand.callback(MonitoringRequestCommand.java:15)




                         at org.springframework.roo.process.manager.internal.DefaultProcessManager.doTransactionally(DefaultProcessManager.java:177)




                         at org.springframework.roo.process.manager.internal.DefaultProcessManager.completeStartup(DefaultProcessManager.java:99)




                         at org.springframework.roo.process.manager.internal.DefaultProcessManager$1.frameworkEvent(DefaultProcessManager.java:62)




                         at org.apache.felix.framework.util.EventDispatcher.invokeFrameworkListenerCallback(EventDispatcher.java:767)




                         at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:724)




                         at org.apache.felix.framework.util.EventDispatcher.run(EventDispatcher.java:942)




                         at org.apache.felix.framework.util.EventDispatcher.access$000(EventDispatcher.java:54)




                         at org.apache.felix.framework.util.EventDispatcher$1.run(EventDispatcher.java:106)




                         at java.lang.Thread.run(Unknown Source)






