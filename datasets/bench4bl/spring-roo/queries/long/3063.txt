Hi,
we're using an abstract base class for all of our entities to have some common code, such as a common equals() method, a findById(), etc. This baseclass is not a MappedSuperclass, but simply adds some common functionality. In Roo 1.1.5 the following worked flawlessly.
Using






public abstract class AbstractEntity<T extends AbstractEntity> {




	public T findById(Long id) {




		//get a finder via reflection and return the entity




		return (T) null;




	}




}






and






@RooJavaBean




@RooToString




@RooJpaActiveRecord




public class SomeEntity extends AbstractEntity<SomeEntity> {




	private String name;




}






deletes the generated Jpa_ActiveRecord.aj file for SomeEntity:
Deleted SRC_MAIN_JAVA\demo\SomeEntity_Roo_Jpa_ActiveRecord.aj - empty
When adding @RooJpaActiveRecord(mappedSuperclass=true) on AbstractEntity as a workaround, Roo generates invalid code in the ActiveRecord.aj file for AbstractEntity.