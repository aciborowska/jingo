We have multiple web applications running under tc Server 2.8. Each webapp uses a common gemfire cache and replicated region. Since we cannot control the order that webapps are deployed, each webapp is configured to create the cache and region using Spring data gemfire (spring dependency injection). This works fine when starting up tc Server with the webapps deploying sequentially. However, if we set startStopThreads=0 in the tc Server server.xml so that the webapps are deployed in parallel, there is a race condition in creating the gemfire cache. Getting error:
com.gemstone.gemfire.cache.CacheClosedException: The cache is closed.
Unfortunately, using spring data gemfire to create the cache and region, there is no way to synchronize this. I believe the underlying gemfire code should be synchronized to avoid this problem.
Usign startStopThreads=0 reduces our startup time by 50% so this is very useful. 
To replicate this problem, create two or more web applications, which create a common cache and region using spring data gemfire, and deploy them in tc Server. Enable startStopThreads=0 and startup tc Server on a machine with multiple CPUs or cores. You might have to do this a few times to get the error.