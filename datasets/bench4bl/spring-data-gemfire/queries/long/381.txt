It was discovered by Jeff Cherng, Field Engineer working with State Farm, in the latest GA version of Spring Data GemFire (SDG) (@ the time of this bug creation, 1.5.2) that the RegionFactoryBean ignores the DataPolicy value on a nested or referenced RegionAttributes bean definition.
If a user specifies a GemFire Region bean definition in the Spring context using Spring Data GemFire's RegionFactoryBean class directly rather than using SDG's XML namespace (gfe) or one of SDG's strongly-typed FactoryBeans, e.g. PartitionedRegionFactoryBean for a GemFire PARTITION Region, to create a Region, the RegionFactoryBean will not respect the value of the DataPolicy on a nested or referenced RegionAttributes bean definition defined in the Spring context configuration meta-data.
For instance, given the following Spring (SDG) XML configuration metadata...






<bean id="Example" class="org.springframework.data.gemfire.RegionFactoryBean">




    <property name="attributes">




        <bean class="org.springframework.data.gemfire.RegionAttributesFactoryBean"




                   p:dataPolicy="PERSISTENT_PARTITION"




                   p:statisticsEnabled="true">




            <property name="partitionAttributes">




                <bean class="org.springframework.data.gemfire.PartitionAttributesFactoryBean" p:redundantCopies="1" p:recoveryDelay="0"/>




            </property>




        </bean>




    </property>




</bean>






Here, the user is trying to create a PARTITION Region, however is using Spring Data GemFire's RegionFactoryBean class to do so, which is ignoring the value (i.e. PERSISTENT_PARTITION) of the DataPolicy attribute on the nested RegionAttributesFactoryBean. bean definition.