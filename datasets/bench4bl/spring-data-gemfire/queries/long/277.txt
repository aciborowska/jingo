Does Spring Data Gemfire Repository abstraction support OQL joins across regions ?






Person.java












// getter, setter omitted




@Region("Person")




public class Person extends Entity {




    private String firstName;




    private String secondName;




    private String carVIN;




}












Car.java












// getter and setter omitted




@Region("Car")




public class Car extends Entity {




 




    private String vin;




    private String manufacturer;




    private String model;




    private int year;




    private UUID ownerId;




}












public interface PersonRepository extends GemfireRepository<Person, UUID> {




 




    @Query("<trace> select p from /Person p, /Car c where p.carVIN = c.vin")




    public List<Person> findCarOwners();




 




}






On the server, the trace shows up as 






<trace> select p from /Person p, /Person c where p.carVIN = c.vin






If i directly use the QueryService from the Pool, i do get results with the same query






Pool gemfirePool = (Pool) applicationContext.getBean("gemfirePool");




QueryService queryService = gemfirePool.getQueryService();




SelectResults<Person> results = (SelectResults<Person>) queryService.newQuery("<trace> select p from /Person p, /Car c where p.carVIN = c.vin").execute();




for ( Person p : results.asList()) {




  System.out.println(p);




}






On the server, i see the trace as 






<trace> select p from /Person p, /Car c where p.carVIN = c.vin






Is a feature for something like this planned ?
At the very least, the documentation should mention known limitations.
Thank you.
Adil.