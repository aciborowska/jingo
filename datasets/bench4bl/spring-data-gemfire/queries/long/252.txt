When an application defines 2 or more different application domain objects, for instance...






@Region("Users")




public class AdminUser extends User {




  ...




}




Â 




@Region("Users")




public class GuestUser extends User {




  ...




}






Where each domain object is stored in multiple different, but identically named Subregions in GemFire, where the SDG XML namespace-based configuration meta-data might look like the following...






<gfe:replicated-region id="Local" persistent="false">




  <gfe:replicated-region name="Admin" persistent="false">




    <gfe:replicated-region name="Users" persistent="false"/>




  </gfe:replicated-region>




  <gfe:replicated-region name="Guest" persistent="false">




    <gfe:replicated-region name="Users" persistent="false"/>




  </gfe:replicated-region>




</gfe:replicated-region>






Then Spring Data GemFire's Repository extension support infrastructure fails to properly associate the corresponding application domain object to the appropriate Subregion, i.e. ...
AdminUser to /Local/Admin/Users
and...
GuestUser to /Local/Guest/Users