I have 2 beans defined in Application Context:






@Bean




public HibernateExceptionTranslator hibernateExceptionTranslator() {




  return new HibernateExceptionTranslator();




}




Â 




@Bean




public RedisConnectionFactory redisConnectionFactory() {




  Properties devProps = localDevProps();




  JedisConnectionFactory cf = new JedisConnectionFactory();




  return cf;




}






Both implement PersistenceExceptionTranslator and both TransactionalRepositoryFactoryBeanSupport and PersistenceExceptionTranslationRepositoryProxyPostProcessor creates default PersistenceExceptionTranslationInterceptor which auto-discover all implementation of this interface. Finally at runtime I get JedisException when a JPA/Hibernate Exception expected.






org.springframework.data.redis.RedisSystemException: Unknown jedis exception; nested exception is javax.persistence.PersistenceException: org.hibernate.exception.SQLGrammarException: could not execute statement




	at org.springframework.data.redis.connection.jedis.JedisExceptionConverter.convert(JedisExceptionConverter.java:57)




	at org.springframework.data.redis.connection.jedis.JedisExceptionConverter.convert(JedisExceptionConverter.java:36)




	at org.springframework.data.redis.connection.jedis.JedisConverters.toDataAccessException(JedisConverters.java:138)




	at org.springframework.data.redis.connection.jedis.JedisConnectionFactory.translateExceptionIfPossible(JedisConnectionFactory.java:151)




	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:58)




	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)




	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:163)




	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)





