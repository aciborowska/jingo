The interface TypedTuple<V> extends Comparable<Double> instead of TypedTuple<V> extends Comparable<TypedTuple<V>>. 
That means code like this:






SortedSet<ZSetOperations.TypedTuple<String>> lb= new TreeSet<>();




Set<ZSetOperations.TypedTuple<String>> users = zSetOperations.reverseRangeWithScores(USERS, 0, 0);




lb.addAll(users);






will throw a ClassCastException 






Exception in thread "main" java.lang.ClassCastException: org.springframework.data.redis.core.DefaultTypedTuple cannot be cast to java.lang.Double




	at org.springframework.data.redis.core.DefaultTypedTuple.compareTo(DefaultTypedTuple.java:27)




	at java.util.TreeMap.compare(TreeMap.java:1290)




	at java.util.TreeMap.put(TreeMap.java:538)




	at java.util.TreeSet.add(TreeSet.java:255)




	at java.util.AbstractCollection.addAll(AbstractCollection.java:344)




	at java.util.TreeSet.addAll(TreeSet.java:312)




	at org.dripstat.lb.Leaderboard.getLeaderboardForUser(Leaderboard.java:36)






Making the Comparable use Double instead of TypedTuple<V> means it can't be used by any of Java's sort() methods since they pass the object itself to the compare() method.
This is a major flaw and will bite a lot of people with runtime exceptions.