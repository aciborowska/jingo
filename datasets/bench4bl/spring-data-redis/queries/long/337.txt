The problem is in MessageListenerAdapter in approximately 113 line (version 1.3.2.RELEASE), where using reflection youâ€™re extracting methods to be invoked by listener.
Problem appears, when Listener is subclass of another class with the same method definition (i.e class A has abstract method doSmth and class B extends A and implements doSmth method). 
Then, methods array is populated with wrong number of method which then are invoked on listener (one for each parent classes that have same method definition), which can lead to invoking same method on listener several times.
You can reproduce this bug with those steps:
1. Create abstract class






AbstractTest.java






public abstract class AbstractTest {




   public abstract void foo(); 




} 






2. Create implementation to this class






Test.java






public class Test extends AbstractTest {




   @Override




   public void foo() {




      System.out.println("in foo");




   } 




} 






3. Define Test as spring bean and as message listener






<bean id="test" class="Test"/>




 <redis:listener-container connection-factory="jedisConnectionFactory">




        <redis:listener ref="test" method="foo" topic="testTopic"/>




    </redis:listener-container>






When message will come to topic 'testTopic', method foo will be invoked twice. 