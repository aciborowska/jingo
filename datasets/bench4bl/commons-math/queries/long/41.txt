Here is the (hopefully) correct implementation of the spline interpolator.
        if (c == null) {
            // Number of intervals. The number of data points is N+1.
            int n = xval.length - 1;
            // Check whether the xval vector has ascending values.
            // Separation should be checked too (not implemented: which 
criteria?).
            for (int i = 0; i < n; i++) {
                if (xval[i] >= xval[i + 1]) 
{
                    throw new IllegalArgumentException("Dataset must specify 
sorted, ascending x values.");
                }
            }
            // Vectors for the equation system. There are n-1 equations for the 
unknowns s[i] (1<=i<=N-1),
            // which are second order derivatives for the spline at xval[i]. At 
the end points, s[0]=s[N]=0.
            // Vectors are offset by -1, except the lower diagonal vector which 
is offset by -2. Layout:
            // d[0]*s[1]+u[0]*s[2]                                           = b
[0]
            // l[0]*s[1]+d[1]*s[2]+u[1]*s[3]                                 = b
[1]
            //           l[1]*s[2]+d[2]*s[3]+u[2]*s[4]                       = b
[2]
            //                           ...
            //                     l[N-4]*s[N-3]+d[N-3]*s[N-2]+u[N-3]*s[N-1] = b
[N-3]
            //                                   l[N-3]*s[N-2]+d[N-2]*s[N-1] = b
[N-2]
            // Vector b is the right hand side (RHS) of the system.
            double b[] = new double[n - 1];
            // Vector d is diagonal of the matrix and also holds the computed 
solution.
            double d[] = new double[n + 1];
            // Setup right hand side and diagonal.
            double dquot = (yval[1] - yval[0]) / (xval[1] - xval[0]);
            for (int i = 0; i < n - 1; i++) 
{
                // TODO avoid recomputing the term
                //    (yval[i + 2] - yval[i + 1]) / (xval[i + 2] - xval[i + 1])
                // take it from the previous loop pass. Note: the interesting 
part of performance
                // loss is the range check in the array access, not the 
computation itself.
                double dquotNext = 
                    (yval[i + 2] - yval[i + 1]) / (xval[i + 2] - xval[i + 1]);
                b[i] = 6.0 * (dquotNext - dquot);
                d[i+1] = 2.0 * (xval[i + 2] - xval[i]);
                dquot = dquotNext;
            }
            // u[] and l[] (for the upper and lower diagonal respectively) are 
not
            // really needed, the computation is folded into the system solving 
loops.
            // Keep this for documentation purposes:
            //double u[] = new double[n - 2]; // upper diagonal
            //double l[] = new double[n - 2]; // lower diagonal
            // Set up upper and lower diagonal. Keep the offsets in mind.
            //for (int i = 0; i < n - 2; i++) 
{
            //  u[i] = xval[i + 2] - xval[i + 1];
            //  l[i] = xval[i + 2] - xval[i + 1];
            //}
            // Solve the system: forward pass.
            for (int i = 0; i < n - 2; i++) 
{
                double delta = xval[i + 2] - xval[i + 1];
                double deltaquot = delta / d[i+1];
                d[i + 2] -= delta * deltaquot;
                b[i + 1] -= b[i] * deltaquot;
            }
            // Solve the system: backward pass.
            d[n - 1] = b[n - 2] / d[n - 1];
            for (int i = n - 3; i >= 0; i--) 
{
                d[i+1] = (b[i] - (xval[i + 2] - xval[i + 1]) * d[i + 2]) / d
[i+1];
            }
            // Compute coefficients as usual polynomial coefficients.
            // Not the best with respect to roundoff on evaluation, but simple.
            c = new double[n][4];
            // set the start values (this is for a natural spline)
            d[0] = d[n] = 0;
            double delta;
            for (int i = 0; i < n; i++) 
{
                delta = xval[i + 1] - xval[i];
                c[i][3] = (d[i+1] - d[i]) / delta / 6.0;
                c[i][2] = d[i] / 2.0;
                c[i][1] =
                    (yval[i + 1] - yval[i]) / delta -
                        (d[i+1] + 2.0 * d[i]) * delta / 6.0;
                c[i][0] = yval[i];
            }
        }