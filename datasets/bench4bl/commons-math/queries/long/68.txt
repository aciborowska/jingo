In MathUtilsTest I found the following code:
    public void testAddAndCheck() {
        int big = Integer.MAX_VALUE;
        int bigNeg = Integer.MIN_VALUE;
        assertEquals(big, MathUtils.addAndCheck(big, 0));
        try 
{
            int res = MathUtils.addAndCheck(big, 1);
        }
 catch (ArithmeticException ex) {}
        try 
{
            int res = MathUtils.addAndCheck(bigNeg, -1);
        }
 catch (ArithmeticException ex) {}
    }
    public void testMulAndCheck() {
        int big = Integer.MAX_VALUE;
        int bigNeg = Integer.MIN_VALUE;
        assertEquals(big, MathUtils.mulAndCheck(big, 1));
        try 
{
            int res = MathUtils.mulAndCheck(big, 2);
        }
 catch (ArithmeticException ex) {}
        try 
{
            int res = MathUtils.mulAndCheck(bigNeg, 2);
        }
 catch (ArithmeticException ex) {}
    }
    public void testSubAndCheck() {
        int big = Integer.MAX_VALUE;
        int bigNeg = Integer.MIN_VALUE;
        assertEquals(big, MathUtils.subAndCheck(big, 0));
        try 
{
            int res = MathUtils.subAndCheck(big, -1);
        }
 catch (ArithmeticException ex) {}
        try 
{
            int res = MathUtils.subAndCheck(bigNeg, 1);
        }
 catch (ArithmeticException ex) {}
    }
These tests pass even if the expected excepiton is thrown. All three should be
reworked with fail() statements at the end of the try block like so:
        try 
{
            int res = MathUtils.subAndCheck(big, -1);
            fail("Didn't throw exceptions when subtracting one over the maximum");
        }
 catch (ArithmeticException ex) {}
        try 
{
            int res = MathUtils.subAndCheck(bigNeg, 1);
            fail("Didn't throw exceptions when subtracting one over the maximum");
        }
 catch (ArithmeticException ex) {}
I doubt there's a real bug here, but if there is, these tests won't find it.