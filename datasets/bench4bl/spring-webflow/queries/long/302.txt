A deadlock situation can occur when UNHANDLED flow execution exceptions occur during JSF navigation handling. In addition, I've been able to reproduce other undesireable behavior in other points where unhandled exceptions can be thrown.
Specifically the issues I noted are:
Case 1:

Flow launched by a command link component
Flow startup or starting view-state render action throws unhandled exception
Result:
The jsf view that invoked the command redisplays the current view (non-swf) but conversation is left locked and unreferenceable from that point. 

Case 2:

Flow launched by direct browser link (no component tree previously exists)
Flow startup action throws unhandled exception
Result:
JSF faces servlet tries render a view with the same name as the servlet path [which is arbitrary as far as SWF is concerned]

Case 3:

Flow refreshed by browser click or redirect
View state render action throws unhandled exception
Result:
The previous view is redisplayed and the tracked flow execution is lost making it impossible to postback. If post back with the key did occur, deadlock would result as the conversation was left locked after the unhandled exception was thrown.

Case 4:

Flow event processed (as part of navigation handling)
Transition action throws a unhandled exception
Result:
Results in the unhandled exception propagating all the way to the servlet container. Going back in the browser and signaling the event again triggers deadlock as the conversation was left locked.

The bottom line is with 1.0.3 and in a JSF environment only unhandled flow execution exceptions are going to present locking problems. If all exceptions are handled by the flow execution, there should be no problems.