In FlowHandlerMapping.getHandlerInternal(), the first line says:
String flowId = flowUrlHandler.getFlowId(request);
The javadoc for getFlowId() says: "@return the flow id, or null if no flow id is present"
The second line is:
if (getApplicationContext().containsBean(flowId)) {
containsBean in AbstractBeanFactory eventually passes by BeanFactoryUtils.transformedBeanName, with as first line:
Assert.notNull(name, "'name' must not be null");
with the parameter name being set as the flowId.
The consequence of all this is that FlowUrlHandler throws an exception if it cannot find a flow id in the request. The javadoc for getHandlerInternal() says:
"@return the corresponding handler instance, or <code>null</code> if none found", so it seems to me that null should be returned instead of throwing an exception.
The problem occurs when a request comes in for an mvc controller (no flow id in the request) and the url mapping (in our case a SimpleUrlMapping) comes after the FlowHandlerMapping. The SimpleUrlHandlerMapping doesn't get a chance of resolving the correct handler.
WORKAROUND:
We've made a simple extension of FlowHandlerMapping to work around this issue, which seems to work fine:
public class NullFlowIdEnabledFlowHandlerMapping extends FlowHandlerMapping {
    protected Object getHandlerInternal(HttpServletRequest request) throws Exception {
        if(super.getFlowUrlHandler().getFlowId(request)  == null) 
{
            return null;
        }
        return super.getHandlerInternal(request);
    }
}