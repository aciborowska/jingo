My flow jumps to external system using externalRedirect in regular view state. Then it returns back using _flowExecutionKey automatically attached to external redirect URL and continues. Everything works well when I'm using MVC FlowController. Unfortunatelly my flow is running in portlet. When I'm trying to go back using attached _flowExecutionKey my flow executes the previous state. It calls transition that has been executed just before view state with externalRedirect. I have used the same flow to test both MVC and portlet solutions. The second one differs. I get the 'old' _flowExecutionKey (for previous state) in the external redirect and my external application can't go back to contunue the flow. It's going to run external redirect again. 
I have looked for the sources and compared resonse generation in both cases (MVC and portlets). A have also compared methods generating different types of responses (ApplicationView, FlowDefinitionRedirect, FlowExecutionRedirect, handleExternalRedirect) in both cases to make sure. 
In my opinion the bug is in PortletFlowController in handleActionRequestInternal(...) method. There is an anonymous ResponseInstructionHandler subclass Most of its methods uses responseInstruction.getFlowExecutionKey() to produce response except one handleExternalRedirect method that uses local variable flowExecutionKey. This variable contains key that refers to state that has been just executed. A new _flowExecutionKey should be given using responseInstruction as it is in the other methods. 
When I have changed this line to
String url = argumentHandler.createExternalUrl(redirect, responseInstruction.getFlowExecutionKey(), context); 
everything works well. 