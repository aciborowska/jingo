After upgrading from SWF ea to rc1, if a form has one or more validation errors, all the information entered on that form is lost (ie it reverts to the previous state before the form was submitted).
What this means is that if there is a single validation error on the page all the data entered on that page is lost.
I traced the SWF RC1/MyFaces source code through and it seems that the org.springframework.webflow.executor.jsf.FlowPhaseListener.prepareApplicationView() is always making a call to javax.faces.application.ViewHandler.createView() (implemented by org.apache.myfaces.application.jsp.JspViewHandlerImpl) and sets it in the FacesContext. What createView() does is create a new empty viewRoot, (losing any information submitted in the last request) so when MyFaces renders the view, it refreshes the components from the model, not from the previous request. This logic happens as part of the FlowPhaseListener.beforePhase() when the PhaseEvent's phaseId is PhaseId.RENDER_RESPONSE.
What SWF-ea does (in PlowPhaseListener.prepareView()) is just update the FlowExecutionKey in the FlowExecutionHolder and in the FacesContext.externalContext.requestMap, so when MyFaces renders the view, it still has access to the previous request's components and their state.
Not sure what the appropriate fix is (I haven't delved too much further into the high-level logic of those components), but at the end of the FlowPhaseListener.beforePhase() method, the FacesContext.viewRoot should still have a handle to the viewRoot that was created as part of the form submission.  What I have done for a local fix is to check to see if there are messages in the FacesContext, and if so, leave the existing viewRoot in the FacesContext.