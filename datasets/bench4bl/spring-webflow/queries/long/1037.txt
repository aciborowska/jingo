We're encountering a problem where WebFlow redirects to non-SSL addresses when using an SSL front end/proxy.  Basically, the incoming request is SSL, it gets captured by the load balancer and turned into a non-SSL request to the web server.  When WebFlow does a redirect, because the incoming request is non-SSL, it tries to redirect to a non-SSL address.  The solution is to look for a header injected by the proxy to indicate the original request was SSL.  This would be easily enough done with a modification to the FlowHandlerAdapter.sendRedirect method.  Because most of the fields in FlowHandlerAdapter are private, however, we couldn't simply extend and override the sendRedirect method in a custom FlowHandlerAdapter.  Trying to create a separate FlowHandlerAdapter, however, also did not work, because, even though the FlowController has a setFlowHandlerAdapter method, it takes as an argument not an interface, but rather the concrete class FlowHandlerAdapter.
This seems like an error in the API for FlowController.  Though in theory you have the ability to create a custom FlowHandlerAdapter, since there's no easy way to extend the class, and since it is a concrete class rather than an interface reference, it appears to be impossible to use this feature easily.
For now, we may have to resort to forking the WebFlow source code and directly modifying the FlowHandlerAdapter class ourselves, which seems to be an exceptionally kludgy approach.