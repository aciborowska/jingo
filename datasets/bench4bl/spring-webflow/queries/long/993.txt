In a existing "non osgi" project, if I asked for spring-core version=2.5.6 I'd end up with one version of Spring Framework core .jar in my local repo.  In a new OSGI project, if I asked for org.springframework.core version=2.5.6 I'd end up with another version of Spring Framework core in my local repo [the OSGi version, with all OSGI-enabled dependencies].  But that'd be ok, because those two versions and their transient dependencies are indexed under different artifact ids and don't interfere with one another.
On the other hand, if I my first project asked for org.springframework.core version=2.5.6 and resolved that in Maven Central, my new OSGi project would try and use that artifact directly it would end up with transitive dependencies that are not OSGI compliant--because they were resolved against Maven Central.  That's the issue Thomas pointed out - and this issue effects all web flow artifacts in Maven Central.
2.0.6 should publish under different artifact ids in central to prevent this conflict from arising.