I am seeing a channel leak in DefaultHttpClient due to a race condition between the ReadTimeoutHandler and adding the 'full-http-response' channel handler that handles exceptions gracefully. 

### Task List

- [x] Steps to reproduce provided
- [ ] Stacktrace (if present) provided
- [x] Example that reproduces the problem uploaded to Github
- [x] Full description of the issue provided (see below)

### Steps to Reproduce

1. Run ChannelLeakSpec in example project
2. Observe requests are finished, and pool still has aquired connections

I basically made a test that fires off a 50 requests in parallel with a 1 ms read timeout. After all the responses are joined I inspected the FixedChannelPool that was in use and it had 18 or so connections that were not released.

1ms is a small read timeout, however I am observing this occasionally with a 500ms read timeout. 1ms was just easier to reproduce the issue.

### Expected Behaviour

Read timeout exceptions should always return channels to the pool

### Actual Behaviour

Sometimes connections are not returned to the pool.

### Environment Information

Mac osx
Micronaut 1.1.3
openjdk version "1.8.0_202"
OpenJDK Runtime Environment (Zulu 8.36.0.1-CA-macosx) (build 1.8.0_202-b05)
OpenJDK 64-Bit Server VM (Zulu 8.36.0.1-CA-macosx) (build 25.202-b05, mixed mode)


### Example Application
https://github.com/dhoff1985/micronaut-channel-leak

