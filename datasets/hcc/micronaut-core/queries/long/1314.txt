### Steps to Reproduce

1. Create a simple websocket server
2. Create a blocking client. Example in Python;
```
from websocket import create_connection

ws = create_connection("ws://localhost:8080/ws")
ws.recv()
```
3. ctrl-c the python client

### Expected Behaviour

When a channel disappears, the session should be closed

### Actual Behaviour

The `@OnClose` method is never called despite a WebSocketSessionClosedEvent being published;

`96037 [nioEventLoopGroup-1-4] DEBUG io.micronaut.context.event.ApplicationEventPublisher  - Publishing event: io.micronaut.websocket.event.WebSocketSessionClosedEvent[source=WebSocket Session: OdrmMRW1fujVO4R2Tbw8Lw==]`

By cleanly closing the session (i.e. adding `ws.close()` to the example Python script) the `@OnClose` method is called.

### Environment Information

- **Operating System**: OSX
- **Micronaut Version:** 1.0.3
- **JDK Version:** 1.8

### Example Application

```
@ServerWebSocket
public class WebSocketController {
    private static final Logger LOGGER = LoggerFactory.getLogger(WebSocketController.class);

    @OnOpen
    public void onOpen(WebSocketSession session) {
        LOGGER.info("Registered");
    }

    @OnMessage
    public void onMessage(
            String message,
            WebSocketSession session) {
        LOGGER.info(message);
    }

    @OnClose
    public void onClose(
            WebSocketSession session) {
        LOGGER.info("Unregistered");
    }
}
```