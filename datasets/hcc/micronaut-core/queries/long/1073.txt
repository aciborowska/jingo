Updated Micronaut 1.0.2 and application will not register with Eureka. This is not a problem with Eureka 1.0.1.

In working through the problem, I created a MyEurekaAutoRegistration bean that replaces EurekaAutoRegistration with additional logging to track down the problem. In 1.0.2 of Micronaut, auto registration fails on line number 186 
```  instanceInfo.getMetadata().putAll(instanceMetadata.asMap(String.class, String.class));``` 

This fails because the values of instanceMetadata has more than just strings. The map key "interfaces" contains a map of <String, String>.  

The values of instanceMetadata are: 

```[AMAZON_EC2, [{ipv4=10.0.x.x, mac=0e:3f:3d:x:x:x, id=eni-0bd0a3b31ef57xxxx, gateway=vpc-da759xxx, network=subnet-30b2xxx}], us-east-1a, ip-10-0-x-xec2.internal, ec2-52-54-x-x.compute-1.amazonaws.com, m5.large, i-014760f75377xxx, us-east-1, 93718231xxx, ami-f560xxx, 52.54.x.x, 10.0.x.x, false, ip-10-0-x-x.ec2.internal, i-014760f7537xxxxx].```

In Micronaut 1.0.1 instanceMetadata is an empty map. It appears that the breaking change between 1.0.1 and 1.0.2 is in that instance.getMetadata() used to return an empty Map in 1.0.1 and returns more than just a Map of Strings in 1.0.2.

This is related to working on a work around for https://github.com/micronaut-projects/micronaut-core/issues/1071 and uses the same Git repo - https://github.com/TeachForward/eureka-example

This issue can be recreated by building the master branch and deploying to Eureka in AWS. 

```./gradlew clean buildDocker -Pdocker.tag.version=true```

### Steps to Reproduce

1. Clone the repository and build
2. Deploy to docker in AWS (I can provide more details on our setup if needed)
3. Wait for app to startup, register with Eureka, and begin health checking

### Expected Behaviour

When building an application and having it register with Eureka in Micronaut 1.0.2 the application should successfully register as the app is starting up.

### Actual Behaviour

The application gets an error registering with Eureka because it is expecting a Map of <String, String> but gets a Map with one of the values being another Map instead of a String.

### Environment Information

- Ubuntu
- Micronaut 1.0.2
- 8

### Example Application

- https://github.com/TeachForward/eureka-example
- branch https://github.com/TeachForward/eureka-example/tree/issue-1071-workaround is with Eureka 1.0.1 and seems to work fine.

