Hi guys,

I encountered an issue when proxying HTTP requests. The returned HTTP responses are missing bodies.

Suppose I have 2 backend endpoints:

- `/backend/success` that returns a simple JSON payload
- `/backend/failure` that throws an exception

And 2 proxied endpoints:

- `/success` that forwards to `/backend/success`
- `/failure` that forwards to `/backend/failure`

### Expected Behaviour

For successful backend requests:
```
> curl -H 'Accept:application/json' http://localhost:8080/backend/success
{"text":"hello world"}
> curl -H 'Accept:application/json' http://localhost:8080/success
{"text":"hello world"}
```

For failed backend requests:
```
> curl -H 'Accept:application/json' http://localhost:8080/backend/failure
{"message":"Internal Server Error: fail"}
> curl -H 'Accept:application/json' http://localhost:8080/failure
{"message":"Internal Server Error: fail"}
```

### Actual Behaviour

For successful backend requests:
```
> curl -H 'Accept:application/json' http://localhost:8080/backend/success
{"text":"hello world"}
> curl -H 'Accept:application/json' http://localhost:8080/success
{}
```

For failed backend requests:
```
> curl -H 'Accept:application/json' http://localhost:8080/backend/failure
{"message":"Internal Server Error: fail"}
> curl -H 'Accept:application/json' http://localhost:8080/failure
null
```

### Environment Information

- **Operating System**: macOS
- **Micronaut Version:** 1.3.3
- **JDK Version:** 12

### Example Application

The following code captures the gist of how I am proxying the requests:

```java
public class Application {

    public static void main(String[] args) {
        Micronaut.run(Application.class);
    }

    @Controller
    public static class Proxy {

        private RxHttpClient client;

        @Inject
        public Proxy(@Client("http://localhost:8080") RxHttpClient client) {
            this.client = client;
        }

        @Get("/success")
        public Single<HttpResponse<ByteBuffer>> success() {
            return client.exchange(GET("/backend/success"))
                    .firstOrError();
        }
        @Get("/failure")
        public Single<HttpResponse<ByteBuffer>> fail() {
            return client.exchange(GET("/backend/failure"))
                    .onErrorResumeNext(error -> {
                        if (error instanceof HttpClientResponseException) {
                            var responseError = (HttpClientResponseException) error;
                            var errorResponse = responseError.getResponse();
                            return Flowable.just((HttpResponse<ByteBuffer>) errorResponse);
                        }

                        return Flowable.error(error);
                    })
                    .firstOrError();
        }
    }

    @Controller("/backend")
    public static class BackendController {

        @Get("/success")
        public Single<Message> success() {
            return Single.just(new Message("hello world"));
        }

        @Get("/failure")
        public Single<Message> fail() {
            throw new IllegalArgumentException("fail");
        }
    }

    public static class Message {

        private String text;

        public Message(String text) {
            this.text = text;
        }

        public String getText() {
            return text;
        }
    }
}
```