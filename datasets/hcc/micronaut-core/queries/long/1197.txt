Basically `@CachePut` only works if `async=true`, but only if it is defined in combination with `@CacheConfig` on the class level.
For examples see README in the github repo linked below. 

### Task List

- [*] Steps to reproduce provided
- [*] Stacktrace (if present) provided
- [*] Example that reproduces the problem uploaded to Github
- [*] Full description of the issue provided (see below)

### Steps to Reproduce

See README in the github repo linked below. 

### Expected Behaviour
The default `async=false` should not cause the method to return something else than the return value from the method.
If I modify `serviceA.get(keyA)` to `serviceA.get(keyA).map(s -> s)` the following error is thrown:
```
ERROR i.m.h.n.stream.HttpStreamsHandler - Error occurred writing stream response: class io.reactivex.internal.operators.flowable.FlowableJust cannot be cast to class java.lang.String (io.reactivex.internal.operators.flowable.FlowableJust is in unnamed module of loader 'app'; java.lang.String is in module java.base of loader 'bootstrap')
java.lang.ClassCastException: class io.reactivex.internal.operators.flowable.FlowableJust cannot be cast to class java.lang.String (io.reactivex.internal.operators.flowable.FlowableJust is in unnamed module of loader 'app'; java.lang.String is in module java.base of loader 'bootstrap')
	at io.reactivex.internal.operators.single.SingleMap$MapSingleObserver.onSuccess(SingleMap.java:57)
	...
 ```

Also, as I understand it it should be enough to declare `@CachePut` on a method, with no other annotations required.

### Environment Information

- **Operating System**: Mac OS
- **Micronaut Version:** 1.0.4
- **JDK Version:** 11

### Example Application

https://github.com/luckyswede/micronaut-cachetest
