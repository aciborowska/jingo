The following code snippet works in 1.0.4 but throws an exception in 1.1.0.

```kotlin
class HelloController {

    @Put("/upload", consumes = [MediaType.ALL])
    fun putObject(@Body body: Flowable<ByteBuffer<*>>, request: HttpRequest<*>) {
        body.subscribeOn(Schedulers.io()).subscribe {
            println(it.readableBytes())
            println(it.getByte(0)) // <-- fail here; buffer already disposed.
        }
    }

}
```

### Steps to Reproduce

- run a server with the sample controller
- upload some content to the endpoint: `curl http://localhost:8080/upload --upload-file /path/to/some/data`

### Expected Behaviour

Handle body content reactively using ByteBuffer.

### Actual Behaviour

Throws the following exception:

```
Caused by: io.netty.util.IllegalReferenceCountException: refCnt: 0
	at io.netty.buffer.AbstractByteBuf.ensureAccessible(AbstractByteBuf.java:1446)
	at io.netty.buffer.AbstractByteBuf.checkIndex(AbstractByteBuf.java:1376)
	at io.netty.buffer.AbstractByteBuf.checkIndex(AbstractByteBuf.java:1372)
	at io.netty.buffer.AbstractByteBuf.getByte(AbstractByteBuf.java:352)
	at io.netty.buffer.PooledSlicedByteBuf.getByte(PooledSlicedByteBuf.java:127)
	at io.micronaut.buffer.netty.NettyByteBuffer.getByte(NettyByteBuffer.java:243)
	at example.HelloController$putObject$1.accept(HelloController.kt:95)
	at example.HelloController$putObject$1.accept(HelloController.kt:55)
	at io.reactivex.internal.subscribers.LambdaSubscriber.onNext(LambdaSubscriber.java:65)
	... 69 more
```

### Environment Information

- **Operating System**: Ubuntu 18.04
- **Micronaut Version:** 1.1.0
- **JDK Version:** 1.8
