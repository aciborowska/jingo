In version Micronaut 1.2.1 a new `getParameterValues()` method was introduced that overwrites the `getParameterValues()` from `InvocationContext`.

https://github.com/micronaut-projects/micronaut-core/blob/master/aop/src/main/java/io/micronaut/aop/chain/InterceptorChain.java#L87

https://github.com/micronaut-projects/micronaut-core/blob/master/aop/src/main/java/io/micronaut/aop/InvocationContext.java#L88

The new one return the `originalParameters` instead of the mutated arguments that `getParameterValues()` from `InvocationContext` returns. Now the annotated controller function doesn't get the arguments mutated in the inspectors.

### Steps to Reproduce

Let take a simple interceptor that injects a `sheep` parameter.

``` kotlin
@Singleton
class SheepInterceptor : MethodInterceptor<Any, Any> {
	override fun intercept(context: MethodInvocationContext<Any, Any>) {
		val sheep = context.parameters["sheep"]?.value as String
		context.parameters["sheep"] = MutableArgumentValue.create(Argument.STRING, "bleat")
		context.proceed()
	}
}
```

Now in an annotated controller function should be able to do:

``` kotlin
	@Produces(MediaType.TEXT_PLAIN)
	@Sheep
	@Get("/")
	fun getSheep(name: String, sheep: String?) = sheep?.let { sheep.plus(" ").plus(name) }
```

### Expected Behaviour

Sheep should be `bleat`

### Actual Behaviour

Sheep is `null`

### Environment Information

- **Micronaut Version:** 1.2.1 and above
- **JDK Version:** OpenJDK 11