I have a `@Filter` that gets properties for username and token from config using `@Value` notation. I enabled config properties in consul, and put the property settings there and removed them from my app's `bootstrap.yml`. When I start up the app, I get an error that the property could not be found. When I use `@Value` on another class, I get the correct value from Consul.

I tried moving the `@Value` annotations to the properties from the constructor. Same result. I also tried to use `@Property` instead. Same result.

### Task List

- [x] Steps to reproduce provided
- [x] Stacktrace (if present) provided
- [x] Example that reproduces the problem uploaded to Github
- [x] Full description of the issue provided (see below)

### Steps to Reproduce

1. Enable consul integration.
2. Enable config-client.
3. Define a @Filter with config properties using @Value
4. Do not define the properties in application.yml or bootstrap.yml
5. Make sure the properties are defined in Consul using any mechanism (I saw it using PROPERTIES, YAML, and FILE).
6. Start up the app.
7. App startup fails with error: `Error starting Micronaut server: Failed to inject value for parameter [username] of class: iib.resource.WavesetFilter`

### Expected Behaviour

App should start up successfully and get correct values from Consul property config.

### Actual Behaviour

App startup fails with error: `Error starting Micronaut server: Failed to inject value for parameter [username] of class: iib.resource.WavesetFilter`

### Environment Information

- **Operating System**: Mac OS
- **Micronaut Version:**: 1.0.3
- **JDK Version:** 1.8.0_181

### Example Application

- https://github.com/gboersma/consul-config-filter-issue

Stack trace of error:

```
17:09:19.111 [main] ERROR io.micronaut.runtime.Micronaut - Error starting Micronaut server: Failed to inject value for parameter [username] of class: consul.config.filter.issue.Filter

Message: Error resolving property value [${filter.username}]. Property doesn't exist
Path Taken: new DefaultHttpClient(LoadBalancer loadBalancer,HttpClientConfiguration configuration,String contextPath,ThreadFactory threadFactory,NettyClientSslBuilder nettyClientSslBuilder,[MediaTypeCodecRegistry codecRegistry],AnnotationMetadataResolver annotationMetadataResolver,List filters) --> new DefaultHttpClient(LoadBalancer loadBalancer,HttpClientConfiguration configuration,String contextPath,ThreadFactory threadFactory,NettyClientSslBuilder nettyClientSslBuilder,MediaTypeCodecRegistry codecRegistry,AnnotationMetadataResolver annotationMetadataResolver,[List filters]) --> new Filter([String username],String token)
io.micronaut.context.exceptions.DependencyInjectionException: Failed to inject value for parameter [username] of class: consul.config.filter.issue.Filter

Message: Error resolving property value [${filter.username}]. Property doesn't exist
Path Taken: new DefaultHttpClient(LoadBalancer loadBalancer,HttpClientConfiguration configuration,String contextPath,ThreadFactory threadFactory,NettyClientSslBuilder nettyClientSslBuilder,[MediaTypeCodecRegistry codecRegistry],AnnotationMetadataResolver annotationMetadataResolver,List filters) --> new DefaultHttpClient(LoadBalancer loadBalancer,HttpClientConfiguration configuration,String contextPath,ThreadFactory threadFactory,NettyClientSslBuilder nettyClientSslBuilder,MediaTypeCodecRegistry codecRegistry,AnnotationMetadataResolver annotationMetadataResolver,[List filters]) --> new Filter([String username],String token)
	at io.micronaut.context.AbstractBeanDefinition.getValueForConstructorArgument(AbstractBeanDefinition.java:1027)
	at consul.config.filter.issue.$FilterDefinition.build(Unknown Source)
	at io.micronaut.context.DefaultBeanContext.doCreateBean(DefaultBeanContext.java:1331)
	at io.micronaut.context.DefaultBeanContext.addCandidateToList(DefaultBeanContext.java:2249)
	at io.micronaut.context.DefaultBeanContext.getBeansOfTypeInternal(DefaultBeanContext.java:2177)
	at io.micronaut.context.DefaultBeanContext.getBeansOfType(DefaultBeanContext.java:765)
	at io.micronaut.context.AbstractBeanDefinition.lambda$getBeansOfTypeForConstructorArgument$10(AbstractBeanDefinition.java:1079)
	at io.micronaut.context.AbstractBeanDefinition.resolveBeanWithGenericsFromConstructorArgument(AbstractBeanDefinition.java:1674)
	at io.micronaut.context.AbstractBeanDefinition.getBeansOfTypeForConstructorArgument(AbstractBeanDefinition.java:1074)
	at io.micronaut.context.AbstractBeanDefinition.getBeanForConstructorArgument(AbstractBeanDefinition.java:953)
	at io.micronaut.http.client.$DefaultHttpClientDefinition.doBuild(Unknown Source)
	at io.micronaut.context.AbstractParametrizedBeanDefinition.build(AbstractParametrizedBeanDefinition.java:114)
	at io.micronaut.context.DefaultBeanContext.doCreateBean(DefaultBeanContext.java:1324)
	at io.micronaut.context.DefaultBeanContext.doCreateBean(DefaultBeanContext.java:660)
	at io.micronaut.context.DefaultBeanContext.createBean(DefaultBeanContext.java:598)
	at io.micronaut.context.BeanContext.createBean(BeanContext.java:126)
	at io.micronaut.http.client.interceptor.HttpClientIntroductionAdvice.lambda$getClient$10(HttpClientIntroductionAdvice.java:595)
	at java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1660)
	at io.micronaut.http.client.interceptor.HttpClientIntroductionAdvice.getClient(HttpClientIntroductionAdvice.java:566)
	at io.micronaut.http.client.interceptor.HttpClientIntroductionAdvice.intercept(HttpClientIntroductionAdvice.java:160)
	at io.micronaut.aop.MethodInterceptor.intercept(MethodInterceptor.java:41)
	at io.micronaut.aop.chain.InterceptorChain.proceed(InterceptorChain.java:147)
	at io.micronaut.retry.intercept.RecoveryInterceptor.intercept(RecoveryInterceptor.java:74)
	at io.micronaut.aop.MethodInterceptor.intercept(MethodInterceptor.java:41)
	at io.micronaut.aop.chain.InterceptorChain.proceed(InterceptorChain.java:147)
	at io.micronaut.discovery.consul.client.v1.AbstractConsulClient$Intercepted.readValues(Unknown Source)
	at io.micronaut.discovery.consul.config.ConsulConfigurationClient.getPropertySources(ConsulConfigurationClient.java:132)
	at io.micronaut.discovery.config.DefaultCompositeConfigurationClient.lambda$getPropertySources$0(DefaultCompositeConfigurationClient.java:63)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at io.micronaut.discovery.config.DefaultCompositeConfigurationClient.getPropertySources(DefaultCompositeConfigurationClient.java:64)
	at io.micronaut.discovery.client.config.DistributedPropertySourceLocator.findPropertySources(DistributedPropertySourceLocator.java:74)
	at io.micronaut.context.DefaultApplicationContext$RuntimeConfiguredEnvironment.readPropertySourceList(DefaultApplicationContext.java:528)
	at io.micronaut.context.env.DefaultEnvironment.readPropertySources(DefaultEnvironment.java:355)
	at io.micronaut.context.env.DefaultEnvironment.start(DefaultEnvironment.java:246)
	at io.micronaut.context.env.DefaultEnvironment.start(DefaultEnvironment.java:66)
	at io.micronaut.context.DefaultApplicationContext.startEnvironment(DefaultApplicationContext.java:182)
	at io.micronaut.context.DefaultApplicationContext.start(DefaultApplicationContext.java:140)
	at io.micronaut.runtime.Micronaut.start(Micronaut.java:67)
	at io.micronaut.runtime.Micronaut.run(Micronaut.java:274)
	at io.micronaut.runtime.Micronaut.run(Micronaut.java:260)
	at consul.config.filter.issue.Application.main(Application.java:8)

Process finished with exit code 1
```
