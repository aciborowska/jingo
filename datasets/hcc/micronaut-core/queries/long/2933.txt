## Steps to reproduce

### Generate a JAR with an introspected POJO and Jackson annotations

Generate a JAR with an introspected POJO:

```
% mkdir pojojar
% cd pojojar
pojojar %
pojojar % gradle wrapper
touch build.gradle
```

```groovy
plugins {
    id 'java-library'
}

ext {
    micronautVersion = '1.3.3'
}

repositories {
    jcenter()
}

dependencies {
    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"

    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"

    api 'com.github.spotbugs:spotbugs-annotations:3.1.12'
    api "com.fasterxml.jackson.core:jackson-annotations"
    api "io.micronaut:micronaut-core"
    api "javax.validation:validation-api"
}
```

Create a POJO

`pojojar % mkdir -p src/main/java/example/micronaut/pojos`
`pojojar % touch src/main/java/example/micronaut/pojos/Book.java`

It uses  `@JsonInclude(JsonInclude.Include.NON_NULL)` to specify that `author` field should be included in a serialised response only when populated. 

```java
package example.micronaut.pojos;

import com.fasterxml.jackson.annotation.JsonInclude;
import edu.umd.cs.findbugs.annotations.NonNull;
import edu.umd.cs.findbugs.annotations.Nullable;
import io.micronaut.core.annotation.Introspected;
import javax.validation.constraints.NotBlank;

@JsonInclude(JsonInclude.Include.NON_NULL)
@Introspected
public class Book {
    @NonNull
    @NotBlank
    private String name;

    @Nullable
    private String author;

    public Book() {
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getAuthor() {
        return author;
    }

    public void setAuthor(String author) {
        this.author = author;
    }
}
```

Generate a JAR file

`pojojar % ./gradlew assemble`

## Create a Micronaut App with GraalVM feature which uses the JAR

```
% ..
% mn create-app hello-world --features graal-native-image
% mkdir hello-world/libs
% cp pojojar/build/libs/pojojar.jar hello-world/libs/
```

Modify the build file generated by Micronaut CLI. Add in the dependencies block the next line: 

```groovy
dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    ...
```

Create a Controller which returns the POJO in the JAR.

Create a controller `src/main/java/hello/world/BookController.java`

```java
package hello.world;

import example.micronaut.pojos.Book;
import io.micronaut.http.annotation.Controller;
import io.micronaut.http.annotation.Get;

@Controller
public class BookController {

    @Get
    Book index() {
        Book book = new Book();
        book.setName("Sergio");
        return book;
    }
}
```

Generate a FAT JAR

```
% cd hello-world
hello-world % ./gradle assemble
```

### Executing the FAT JAR works with Jackson annotation

Jackson annotation `@JsonInclude(JsonInclude.Include.NON_NULL)` works as expected. Non null fields are not included: 

```
hello-world % java -jar build/libs/hello-world-0.1-all.jar 
 % curl localhost:8080
{"name":"Sergio"}
```

### Generate a Native Image 
```
hello-world % docker build . -t hello-world    
Sending build context to Docker daemon  62.27MB
...
..
.
Removing intermediate container a9d8b99b7fb7
 ---> e35c6e00ce20
Successfully built e35c6e00ce20
Successfully tagged hello-world:latest
hello-world % docker run -p 8080:8080 hello-world         
/app/hello-world: /usr/lib/libstdc++.so.6: no version information available (required by /app/hello-world)
/app/hello-world: /usr/lib/libstdc++.so.6: no version information available (required by /app/hello-world)
06:36:03.398 [main] INFO  io.micronaut.runtime.Micronaut - Startup completed in 29ms. Server Running: http://13c35759cdca:8080
```


Calling the controller returns a POJO which includes non-null fields.

```
hello-world % java -jar build/libs/hello-world-0.1-all.jar 
% curl localhost:8080
{"name":"Sergio","author":null}%       
```

## Versions

Micronaut version: 1.3.3
JDK Version: 1.8
GraalVM Version: 20.0.0-java8 