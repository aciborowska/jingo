### Task List

- [X] Steps to reproduce provided
- [X] Stacktrace (if present) provided
- [X] Example that reproduces the problem uploaded to Github
- [X] Full description of the issue provided (see below)

### Steps to Reproduce

For exact reproduction code, please see linked repository. 

There is some weirdness in behaviour of `@Scheduled` methods.

**Case 1** 
* Create a class without annotations, having a `@Scheduled` method

**Case 2** (not a bug)
* Create a class with `@Singleton` and `@Requires` annotations, having a `@Scheduled` method

**Case 3**
* Create a class without annotations, having a `@Scheduled` method
* Create an instance of that class using a `@Factory` class

### Expected Behaviour

**Case 1** Non-bean class should not be instantiated and method should not be scheduled.

**Case 2** (No issues)

**Case 3** A bean created by factory should be equivalent with bean created using annotations, no exception.

### Actual Behaviour

**Case 1** A non-bean class having a `@Scheduled` method basically behaves as a `@Prototype` bean: A new instance of the class is created and scheduled method is run on every interval.

**Case 2** Works as expected, instance not created and method not scheduled when requirements are not met.

**Case 3** a non-annotated class having `@Scheduled` method, created by a factory causes `NonUniqueBeanException: Multiple possible bean candidates found` exception:

```
12:33:18.920 [pool-1-thread-1] ERROR i.m.s.DefaultTaskExceptionHandler - Error invoking scheduled task Multiple possible bean candidates found: [scheduled.test.ScheduledBean, scheduled.test.ScheduledBean]
io.micronaut.context.exceptions.NonUniqueBeanException: Multiple possible bean candidates found: [scheduled.test.ScheduledBean, scheduled.test.ScheduledBean]
	at io.micronaut.context.DefaultBeanContext.findConcreteCandidate(DefaultBeanContext.java:1796)
	at io.micronaut.context.DefaultApplicationContext.findConcreteCandidate(DefaultApplicationContext.java:403)
	at io.micronaut.context.DefaultBeanContext.lastChanceResolve(DefaultBeanContext.java:2384)
	at io.micronaut.context.DefaultBeanContext.findConcreteCandidateNoCache(DefaultBeanContext.java:2307)
	at io.micronaut.context.DefaultBeanContext.lambda$findConcreteCandidate$57(DefaultBeanContext.java:2250)
	at io.micronaut.core.util.clhm.ConcurrentLinkedHashMap.lambda$compute$0(ConcurrentLinkedHashMap.java:721)
	at java.base/java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1705)
	at io.micronaut.core.util.clhm.ConcurrentLinkedHashMap.compute(ConcurrentLinkedHashMap.java:733)
	at io.micronaut.core.util.clhm.ConcurrentLinkedHashMap.computeIfAbsent(ConcurrentLinkedHashMap.java:710)
	at io.micronaut.context.DefaultBeanContext.findConcreteCandidate(DefaultBeanContext.java:2249)
	at io.micronaut.context.DefaultBeanContext.getBeanInternal(DefaultBeanContext.java:2038)
	at io.micronaut.context.DefaultBeanContext.getBean(DefaultBeanContext.java:618)
	at io.micronaut.scheduling.processor.ScheduledMethodProcessor.lambda$process$5(ScheduledMethodProcessor.java:123)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
```

### Environment Information

- **Operating System**: OS X 10.14.6
- **Micronaut Version:** 1.3.4 and 2.0.0.M2
- **JDK Version:** OpenJDK Runtime Environment AdoptOpenJDK (build 11.0.5+10)

### Example Application

Minimal reproduction code for all cases:
https://github.com/villuv/micronaut-scheduled-test

See README.md for more details.


