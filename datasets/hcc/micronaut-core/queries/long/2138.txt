Thanks for reporting an issue for Micronaut, please review the task list below before submitting the
issue. Your issue report will be closed if the issue is incomplete and the below tasks not completed.

NOTE: If you are unsure about something and the issue is more of a question a better place to ask questions is on Stack Overflow (http://stackoverflow.com/tags/micronaut) or Gitter (https://gitter.im/micronautfw/). DO NOT use the issue tracker to ask questions.

### Task List

- [x] Steps to reproduce provided
- [x] Stacktrace (if present) provided
- [x] Example that reproduces the problem uploaded to Github
- [x] Full description of the issue provided (see below)

### Steps to Reproduce

1. Create a declarative client and configure its path property in the application.yml
2. Create a test and get a HttpClient injected, that calls a controller that, in turn, calls the declarative client
3. Copy and have a second test that is exactly like the one described above
4. Run the tests separately: they pass
5. Run both tests together, the second will fail with the HttpClient using the declarative client path configuration
6. Setting services.default.path or giving the HttpClient an id and setting its path does not fix the issue

### Expected Behaviour
Both tests should pass, because the HttpClient should *not* use the declarative client path configuration

### Actual Behaviour
The configuration gets mixed up and the HttpClient uses the declarative client configuration

### Environment Information

- **Operating System**: LINUX
- **Micronaut Version:** 1.2.1
- **JDK Version:** 11

### Example Application
https://github.com/oscarfh/micronaut-test
Run the MyControllerTest class so you see what I am talking about


This might be a blocker, if the clients are getting mixed up in production code. I did not try to verify that.

PS: I debugged a little big beeper, the involved line seem to be [this one](https://github.com/micronaut-projects/micronaut-core/blob/master/inject/src/main/java/io/micronaut/context/DefaultBeanContext.java#L1881). In the first pass, there is no singletonBean in the context, but when the my controller gets it injected for the first time, the singleton bean is created, so in the second test injection, the singleton bean will be the declarative client, so it will be returned.

PS2: the behavior will also happen if I set the id of the HttpClient and configure it (also setting the path). I am a little bit worried that this might happen in production code, mixing client configurations.

### Workaround

Changing the declarative client from

```
@io.micronaut.http.client.annotation.Client(id = "my-declarative-client")
public interface MyDeclarativeClient {
```

to

```
@io.micronaut.http.client.annotation.Client("http://localhost:8090//my-declarative-client-path")
public interface MyDeclarativeClient {
```

and deleting the "services" property from application.yml makes both tests green