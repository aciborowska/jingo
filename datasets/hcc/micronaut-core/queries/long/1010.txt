According to documentation error handling using Error annotation should be local per Controller. But having handler for the same Exception in two different Controllers causes that only one of them is working.

### Steps to Reproduce

```java
public class Application {
    public static void main(String[] args) {
        Micronaut.run(Application.class);
    }
}

@Controller("/one")
class ControllerOne {
    @Get("/hello")
    public String hello() { throw new RuntimeException("one"); }

    @Error
    public HttpResponse<String> handleError(HttpRequest request, Throwable e) {
        return HttpResponse.<String>status(HttpStatus.BAD_REQUEST).body(e.getMessage());
    }
}

@Controller("/two")
class ControllerTwo {
    @Get("/hello")
    public String hello() { throw new RuntimeException("two"); }

    @Error
    public HttpResponse<String> handleError(HttpRequest request, Throwable e) {
        return HttpResponse.<String>status(HttpStatus.BAD_REQUEST).body(e.getMessage());
    }
}
```

Calling `curl http://localhost:8080/one/hello` from console behaves as expected (returning "one"). But calling `curl http://localhost:8080/two/hello` returns generic exception `{"message":"Internal Server Error: two"}`. It looks like that the error handler from `ControllerTwo` is not regsitered. After removing error handler from `ControllerOne`, the error handling for `ControllerTwo` works as expected (returning "two").


### Expected Behaviour

Error handler should be really local. 

### Actual Behaviour

Registering local error handlers for the same exception in two different Controllers doesn't work. Only one of the controllers is handling errors correctly.

### Environment Information

- **Operating System**: macOs Mojave 10.14
- **Micronaut Version:** 1.0.1
- **JDK Version:** OpenJDK Runtime Environment 18.9 (build 11.0.1+13)

