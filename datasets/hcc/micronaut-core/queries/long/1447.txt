Hi,
I just got this exception with connection pooling enabled in the new 1.0.5:
```
java.lang.IllegalArgumentException: Duplicate handler name: handler-micronaut-full-http-response
	at io.netty.channel.DefaultChannelPipeline.checkDuplicateName(DefaultChannelPipeline.java:1101)
	at io.netty.channel.DefaultChannelPipeline.filterName(DefaultChannelPipeline.java:302)
	at io.netty.channel.DefaultChannelPipeline.addLast(DefaultChannelPipeline.java:210)
	at io.netty.channel.DefaultChannelPipeline.addLast(DefaultChannelPipeline.java:201)
	at io.micronaut.http.client.DefaultHttpClient.addFullHttpResponseHandler(DefaultHttpClient.java:1846)
	at io.micronaut.http.client.DefaultHttpClient.sendRequestThroughChannel(DefaultHttpClient.java:1559)
	at io.micronaut.http.client.DefaultHttpClient.lambda$null$23(DefaultHttpClient.java:1004)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:511)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:485)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:424)
	at io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)
	at io.netty.channel.pool.FixedChannelPool$AcquireListener.operationComplete(FixedChannelPool.java:423)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:511)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:485)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:424)
	at io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:94)
	at io.netty.channel.pool.SimpleChannelPool.notifyHealthCheck(SimpleChannelPool.java:245)
	at io.netty.channel.pool.SimpleChannelPool.doHealthCheck(SimpleChannelPool.java:226)
	at io.netty.channel.pool.SimpleChannelPool.acquireHealthyFromPoolOrNew(SimpleChannelPool.java:194)
	at io.netty.channel.pool.SimpleChannelPool.acquire(SimpleChannelPool.java:164)
	at io.netty.channel.pool.FixedChannelPool.acquire0(FixedChannelPool.java:273)
	at io.netty.channel.pool.FixedChannelPool.access$300(FixedChannelPool.java:40)
	at io.netty.channel.pool.FixedChannelPool$3.run(FixedChannelPool.java:247)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:462)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:897)
	at io.micronaut.http.context.ServerRequestContext.with(ServerRequestContext.java:53)
	at io.micronaut.http.context.ServerRequestContext.lambda$instrument$0(ServerRequestContext.java:69)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:834)
```

I'm not sure what use case triggered it unfortunately, but looking at the code, `DefaultHttpClient.java:1721` and `DefaultHttpClient.java:1843-1847` it seems that the wrong handler name is used when setting the `replace` variable. Shouldn't it be `HANDLER_MICRONAUT_FULL_HTTP_RESPONSE`?

What causes a handler to be present already in the pipeline? A retry?
I'll try to come up with a use case that reproduces this, but I wanted to post the stacktrace straight away..

### Task List

- [ ] Steps to reproduce provided
- [x] Stacktrace (if present) provided
- [ ] Example that reproduces the problem uploaded to Github
- [ ] Full description of the issue provided (see below)

### Environment Information

- **Operating System**: All
- **Micronaut Version:** 1.0.5
- **JDK Version:** 11
