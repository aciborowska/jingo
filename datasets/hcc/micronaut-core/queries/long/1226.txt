Thanks for reporting an issue for Micronaut, please review the task list below before submitting the
issue. Your issue report will be closed if the issue is incomplete and the below tasks not completed.

NOTE: If you are unsure about something and the issue is more of a question a better place to ask questions is on Stack Overflow (http://stackoverflow.com/tags/micronaut) or Gitter (https://gitter.im/micronautfw/). DO NOT use the issue tracker to ask questions.

### Task List

- [X] Steps to reproduce provided
- [X] Stacktrace (if present) provided
- [X] Example that reproduces the problem uploaded to Github
- [X] Full description of the issue provided (see below)

### Steps to Reproduce

1. Create an application that accepts a PUT request with a CompositeByteBuf parameter for the body and application/octet-stream as the `consumes` value
2. Configure micronaut.server.max-request-size = 104857600 (100MB) in application.yml
3. Add an @Size annotation to the body parameter with the same value
4. Attempt to upload a 120MB file

### Expected Behaviour

An exception and response error message is generated indicating the content-length of the request and the maximum request size.

### Actual Behaviour

The following exception is thrown.  The maximum size and request size are transposed in the message and the maxmim size displayed is slightly higher than the configured value (104865792 vs 104857600).  The error message returned to the client is similarly incorrect.

```
io.micronaut.http.exceptions.ContentLengthExceededException: The received length [104865792] exceeds the maximum content length [126638080]                                                                                      [4/307]
        at io.micronaut.http.server.netty.DefaultHttpContentProcessor.lambda$fireExceedsLength$0(DefaultHttpContentProcessor.java:110)
        at java.util.Optional.ifPresent(Optional.java:159)
        at io.micronaut.http.server.netty.DefaultHttpContentProcessor.fireExceedsLength(DefaultHttpContentProcessor.java:110)
        at io.micronaut.http.server.netty.DefaultHttpContentProcessor.onUpstreamMessage(DefaultHttpContentProcessor.java:81)
        at io.micronaut.http.server.netty.DefaultHttpContentProcessor.onUpstreamMessage(DefaultHttpContentProcessor.java:39)
        at io.micronaut.core.async.processor.SingleThreadedBufferingProcessor.doOnNext(SingleThreadedBufferingProcessor.java:57)
        at io.micronaut.core.async.subscriber.SingleThreadedBufferingSubscriber.onNext(SingleThreadedBufferingSubscriber.java:92)
        at io.micronaut.http.netty.reactive.HandlerPublisher.publishMessage(HandlerPublisher.java:461)
        at io.micronaut.http.netty.reactive.HandlerPublisher.channelRead(HandlerPublisher.java:417)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)
        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340)
        at io.micronaut.http.netty.stream.HttpStreamsHandler.handleReadHttpContent(HttpStreamsHandler.java:258)
        at io.micronaut.http.netty.stream.HttpStreamsHandler.channelRead(HttpStreamsHandler.java:226)
        at io.micronaut.http.netty.stream.HttpStreamsServerHandler.channelRead(HttpStreamsServerHandler.java:122)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)
        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340)
        at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102)
        at io.netty.handler.codec.MessageToMessageCodec.channelRead(MessageToMessageCodec.java:111)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)
        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340)
        at io.netty.channel.ChannelInboundHandlerAdapter.channelRead(ChannelInboundHandlerAdapter.java:86)
        at io.netty.handler.codec.http.HttpServerKeepAliveHandler.channelRead(HttpServerKeepAliveHandler.java:64)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)
        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340)
        at io.netty.handler.flow.FlowControlHandler.dequeue(FlowControlHandler.java:187)
        at io.netty.handler.flow.FlowControlHandler.read(FlowControlHandler.java:129)
        at io.netty.channel.AbstractChannelHandlerContext.invokeRead(AbstractChannelHandlerContext.java:693)
        at io.netty.channel.AbstractChannelHandlerContext.read(AbstractChannelHandlerContext.java:673)
        at io.netty.channel.ChannelDuplexHandler.read(ChannelDuplexHandler.java:95)
        at io.netty.channel.AbstractChannelHandlerContext.invokeRead(AbstractChannelHandlerContext.java:693)
        at io.netty.channel.AbstractChannelHandlerContext.read(AbstractChannelHandlerContext.java:673)
        at io.netty.channel.ChannelDuplexHandler.read(ChannelDuplexHandler.java:95)
        at io.netty.channel.AbstractChannelHandlerContext.invokeRead(AbstractChannelHandlerContext.java:693)
        at io.netty.channel.AbstractChannelHandlerContext.read(AbstractChannelHandlerContext.java:673)
        at io.netty.channel.ChannelDuplexHandler.read(ChannelDuplexHandler.java:95)
        at io.netty.channel.AbstractChannelHandlerContext.invokeRead(AbstractChannelHandlerContext.java:693)
        at io.netty.channel.AbstractChannelHandlerContext.read(AbstractChannelHandlerContext.java:673)
        at io.micronaut.http.netty.reactive.HandlerPublisher.requestDemand(HandlerPublisher.java:164)
        at io.micronaut.http.netty.stream.HttpStreamsHandler$1.requestDemand(HttpStreamsHandler.java:218)
        at io.micronaut.http.netty.reactive.HandlerPublisher.receivedDemand(HandlerPublisher.java:326)
        at io.micronaut.http.netty.reactive.HandlerPublisher.access$300(HandlerPublisher.java:67)
        at io.micronaut.http.netty.reactive.HandlerPublisher$ChannelSubscription.lambda$request$0(HandlerPublisher.java:548)
        at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)
        at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)
        at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:462)
        at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:897)
        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
        at java.lang.Thread.run(Thread.java:748)
```

### Environment Information

- **Operating System**: Ubuntu 16.04.5 LTS
- **Micronaut Version:** 1.0.4
- **JDK Version:** OpenJDK 64-Bit Server VM (Zulu 8.31.0.1-linux64) (build 25.181-b02, mixed mode)

### Example Application

- https://gitlab.com/gkrupa/s3web

