### Task List

- [x] Steps to reproduce provided
- [ ] Stacktrace (if present) provided
- [x] Example that reproduces the problem uploaded to Github
- [x] Full description of the issue provided (see below)

### Steps to Reproduce

1. Start the application and call a service that returns a response without body
2. Send a post request to the application

```bash
curl --request POST \
  --url http://localhost:8080/ \
  --header 'content-type: application/json' \
  --data '{
	"message":"hello"
}'
```

3. No response is ever returned.

This could be the same problem as reported in issue #3940 However, in our case, we don't get any exception or error. The call just hangs forever.

### Expected Behaviour

The response of the downstream service should be returned.

### Actual Behaviour

The current request hangs without error or anything that indicates that there is a problem.

When turning on debug on the client, it can be seen, that the connection is closed immediately:

```
16:37:33.305 [nioEventLoopGroup-1-11] DEBUG i.m.h.client.netty.DefaultHttpClient - Sending HTTP Request: POST
16:37:33.305 [nioEventLoopGroup-1-11] DEBUG i.m.h.client.netty.DefaultHttpClient - Chosen Server: localhost(8081)
16:37:33.305 [nioEventLoopGroup-1-11] TRACE i.m.h.client.netty.DefaultHttpClient - Host: localhost:8080
16:37:33.305 [nioEventLoopGroup-1-11] TRACE i.m.h.client.netty.DefaultHttpClient - User-Agent: insomnia/2020.3.3
16:37:33.305 [nioEventLoopGroup-1-11] TRACE i.m.h.client.netty.DefaultHttpClient - Content-Type: application/json
16:37:33.305 [nioEventLoopGroup-1-11] TRACE i.m.h.client.netty.DefaultHttpClient - Accept: */*
16:37:33.305 [nioEventLoopGroup-1-11] TRACE i.m.h.client.netty.DefaultHttpClient - Content-Length: 23
16:37:33.305 [nioEventLoopGroup-1-11] TRACE i.m.h.client.netty.DefaultHttpClient - connection: close
```

### Environment Information

- **Operating System**: MacOS & Linux
- **Micronaut Version:** 2.0.1
- **JDK Version:** 11

### Example Application

- Application that reproduces the bug: https://github.com/carlosbarragan/micronautproxybug

The downstream server can be implemented with just one controller like:

```kotlin
@Controller
class MyController {

	@Post
	fun post(@Body body:String): HttpResponse<String> {
		return HttpResponse.noContent()
	}
}
```

