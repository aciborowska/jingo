### Steps to Reproduce

1. Create a new Micronaut application
2. Create custom validation annotation `@SomeAnno` and validator
3. Create an interface `SomeService`  with a method using `@SomeAnno` annotation
4. Create a default implementation `DefaultSomeService` of the interface `SomeService` (no `@Singleton` annotation added on the class)
5. Create a factory class `SomeServiceFactory` which instantiates the default implementation as `@Bean @Singleton`. 

### Expected Behaviour

There is only one instance of the service present in the application context - the one declared in the factory.

### Actual Behaviour

There are two instances present in the application context:

1. from factory
2. from `DefaultSomeService` as `$DefaultSimpleServiceDefinition` definition class is generated once there is a custom annotation used within the class

### Environment Information

- **Operating System**: Darwin
- **Micronaut Version:** 1.2.3.
- **JDK Version:** Java HotSpot(TM) 64-Bit Server VM (build 25.181-b13, mixed mode)

### Example Application

See `mn.validation.issue.SimpleServiceFactorySpec` in https://github.com/musketyr/mn-validation-issue

