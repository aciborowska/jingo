### Steps to Reproduce

1. Upload a file to a Micronaut Controller endpoint using multipart upload html form
2. In the Controller code, use `StreamingFileUpload` to receive PartData objects, containing bits of the incoming file (see example application)
3. Access the PartData's bytebuffer (or access its inputstream and close it)

### Expected Behaviour
The ByteBuffer should be returned, allowing the server to stream the partial bits of data to another service.

### Actual Behaviour
An exception occurs:
```
java.lang.ClassCastException: class io.netty.buffer.UnpooledDuplicatedByteBuf cannot be cast to class io.netty.buffer.CompositeByteBuf (io.netty.buffer.UnpooledDuplicatedByteBuf and io.netty.buffer.CompositeByteBuf are in unnamed module of loader 'app')
	at io.micronaut.http.server.netty.HttpDataReference$Component.lambda$getByteBuf$0(HttpDataReference.java:216)
	at io.micronaut.http.server.netty.HttpDataReference$1.release(HttpDataReference.java:140)
	at io.micronaut.http.server.netty.multipart.NettyPartData.getByteBuffer(NettyPartData.java:86)
	at example.UploadController.lambda$upload$0(UploadController.java:22)
	at io.reactivex.internal.operators.flowable.FlowableMap$MapSubscriber.onNext(FlowableMap.java:63)
```

### Environment Information

- **Operating System**: Windows 10
- **Micronaut Version:** 1.1.0
- **JDK Version:** openjdk 12 2019-03-19
OpenJDK Runtime Environment AdoptOpenJDK (build 12+33)
OpenJDK 64-Bit Server VM AdoptOpenJDK (build 12+33, mixed mode, sharing)

### Example Application
https://github.com/skwakman/streamingfileupload-error/tree/master

