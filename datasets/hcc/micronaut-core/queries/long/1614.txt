In general additional annotation on methods annotated with Executable annotation may stop it from working. 
If you add extra annotation on a method annotated with executable annotation like Scheduled, it will cause it not to be scheduled.

There is easy workaround, but behaviour is surprising.

### Task List

- [x] Steps to reproduce provided
- [ ] Example that reproduces the problem uploaded to Github
- [x] Full description of the issue provided (see below)

### Steps to Reproduce

This example will never trigger the action:

```java
class Task {
    // Order is important
    @Retryable // or @Timed or any other Executable annotations
    @Scheduled(fixedRate = "1s")
    void action() {
        // this never runs
        System.out.println("\n\n action \n\n");
    }
}
```

Workarounds:
- use only 1 annotation
- put Scheduled first - but I am not sure of possible side effect for all other annotations
- put other annotation on class level if possible - but I am not sure of possible side effect for all other annotations

### Expected Behaviour

Scheduled task (and all other executable methods) should be properly registered when annotated with more than one annotation or exception should be thrown if that is not supported.

### Source of the problem

The "problem" is here:
https://github.com/micronaut-projects/micronaut-core/blob/afc3fb377fea37f942c1a251be19b58f9f989b22/inject/src/main/java/io/micronaut/context/DefaultBeanContext.java#L1108-L1114

`byAnnotation` collection does not have the scheduled method once you add extra annotation.

That's because `getAnnotationTypeByStereotype(Executable.class)` return Retryable, or Timed or any other Executable.
 Hence it will be used instead of Scheduled in `byAnnotation` collection.

### Environment Information
- **Micronaut Version:** 1.1.0