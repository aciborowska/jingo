### Task List

- [ ] Steps to reproduce provided
- [ ] Stacktrace (if present) provided
- [ ] Example that reproduces the problem uploaded to Github
- [ ] Full description of the issue provided (see below)

### Steps to Reproduce

1. Create a builder which will be called by `@ConfigurationBuilder`.
```
@Immutable
public class EngineImpl implements Engine {
    private final int cylinders;
  
    public EngineImpl(int cylinders, String manufacturer, CrankShaft crankShaft) {
        this.cylinders = cylinders;
    }

    @Override
    public int getCylinders() {
        return cylinders;
    }

    static final class Builder {
        private int cylinders;

        Builder setCylinders(int cylinders) {
            this.cylinders = cylinders;
            return this;
        }

        EngineImpl build() {
            return new EngineImpl(cylinders);
        }
    ...

}
```

2. Create a ConfigurationProperties class for reading configurations from `application.yml` as:
```
@ConfigurationProperties("my.engine")
public class EngineConfig {
    
    EngineImpl.Builder builder = EngineImpl.builder();

    @ConfigurationBuilder
    public void setBuilder(EngineImpl.Builder builder) {
        this.builder = builder;
    }
}

```

3. Create an EngineFactory to create Engine bean.
```
@Factory
public class EngineFactory {

    @Bean
    @Singleton
    EngineImpl buildEngine(EngineConfig engineConfig) {
        return engineConfig.builder.build(engineConfig.crankShaft);
    }
}
```

4. Now the number of cylinders ( i.e. `getCylinders()`) should return the value based on the configuration as:
```
assert 4 == ApplicationContext.run("my.engine.cylinders": "4").getBean(Engine).getCylinders() 
```

### Expected Behaviour

The `getCylinders()` method always return `0` regardless the value of `my.engine.cylinders`.

### Actual Behaviour

As per the annotation definition, it can be applied to both method and field. So, I would expect the following to appropriately set the value `my.engine.cylinders: 4` from `application.yml` to work. But, it's value is `0`. However, everything works fine when I have `@ConfigurationBuilder` on the field as:

```
@ConfigurationBuilder
EngineImpl.Builder builder = EngineImpl.builder();
```

### Environment Information

- **Operating System**: macOS Mojave v10.14.1
- **Micronaut Version:** 1.1.0.BUILD-SNAPSHOT
- **JDK Version:** Zulu 8.31.0.1-macosx

### Example Application

- TODO: link to github repository with example that reproduces the issue

