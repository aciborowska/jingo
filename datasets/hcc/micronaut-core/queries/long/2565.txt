### Steps to Reproduce

1. Write a simple/empty Around Advice:
```
@Documented
@Target({ElementType.TYPE, ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
@Around
@Type(MyAnotInterceptor.class)
public @interface MyAnot {}
```

```
@Singleton
public class MyAnotInterceptor implements MethodInterceptor<Object, Object> {

  @Override
  public Object intercept(MethodInvocationContext<Object, Object> context) {
    System.out.println("INTERCEPTED");
    return context.proceed();
  }
}
```

2. Write a controller in main or test code using the around advice annotation:
```
  @MyAnot
  @Controller("/service")
  static class Control {

    @Get
    String bar() {
      System.out.println("BAR INVOKED");
      return "bar";
    }
  }
```

3. `gradle run` or `gradle test` + curl and notice the "INTERCEPTED" message is never printed.

### Expected Behaviour

The Around advice must be invoked.

### Actual Behaviour

The around advice is never invoked. 

### Environment Information

- **Operating System**: Mac OS
- **Micronaut Version:** 1.3.0.M2
- **JDK Version:** Oracle JDK 1.8

### Example Application

https://github.com/fabienrenaud/micronaut-bug-broken-around-advice

Example output:
```
~ grep bom build.gradle
        mavenBom "io.micronaut:micronaut-bom:1.3.0.M2"
~ gradle test
> Task :test

bug.micronaut.AppTest STANDARD_ERROR
bug.micronaut.AppTest > test_bug() STANDARD_OUT
    foo

BUILD SUCCESSFUL in 4s
3 actionable tasks: 2 executed, 1 up-to-date


~ vim build.gradle   # downgrade
~ grep bom build.gradle
        mavenBom "io.micronaut:micronaut-bom:1.3.0.M1"
~ gradle test
> Task :test

bug.micronaut.AppTest STANDARD_ERROR
bug.micronaut.AppTest > test_bug() STANDARD_OUT
    INTERCEPTED            # interceptor invoked
    foo



BUILD SUCCESSFUL in 4s
3 actionable tasks: 3 executed
```
`"INTERCEPTED"` is printed by the interceptor and was not printed with 1.3.0.M2.