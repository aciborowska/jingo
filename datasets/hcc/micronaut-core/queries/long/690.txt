### Steps to Reproduce

Define a Controller in a project with , and add the following methods:

```
    @Get(uri="/bigResponseA", produces=MediaType.TEXT_PLAIN)
    public Flowable<String> bigResponseA() {
        return Flowable.range(1, 100).map(i -> " " + i);
    }

    @Get(uri="/bigResponseB", produces=MediaType.TEXT_PLAIN)
    public HttpResponse<Flowable<String>> bigResponseB() {
        return HttpResponse.ok(Flowable.range(1, 100).map(i -> " " + i)).header("Custom-Header", "42");
    }
```

Start Micronaut, and hit the two controllers with any HTTP client, such as a browser.

### Expected Behaviour

Both endpoints should show a string containing the numbers 1 .. 100.

### Actual Behaviour

/bigResponseA shows a string containing the numbers 1 .. 100.
/bigResponseB pauses until the client gives up.

The log shows that the sequence is initially requested, but stalls:

i.m.h.s.netty.RoutingInBoundHandler - Matched route GET - /origin/bigResponseB to controller class my.example.SomeController
i.m.h.s.netty.RoutingInBoundHandler - Encoding emitted response object [ 1] using codec: io.micronaut.runtime.http.codec.TextPlainCodec@388ffbc2

### Environment Information

- **Operating System**: macOS
- **Micronaut Version:** 1.0.0.RC1
- **JDK Version:** jdk-1.8.0_181
