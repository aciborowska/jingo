### Steps to Reproduce

- Reproduce a slightly modified Validation groups example from [Bean Validation specification](https://beanvalidation.org/2.0/spec/#validationapi-validatorapi-groups-examples):

```kotlin
@Introspected
data class Address(
    @field:NotEmpty(groups = [Minimal::class])
    val street: String,

    @field:NotEmpty
    val city: String,

    @field:NotEmpty(groups = [Minimal::class, Default::class])
    val zipCode: String
)
```

- Run a Micronaut [`Validator`](https://docs.micronaut.io/latest/api/io/micronaut/validation/validator/Validator.html) on invalid `Address` object:

```kotlin
val address = Address(street = "", city = "", zipCode = "")

validator.validate(address)
validator.validate(address, Minimal::class.java)
validator.validate(address, Minimal::class.java, Default::class.java)
```

### Expected Behaviour

Micronaut Validator respects validation groups as described in [Bean Validation specification](https://beanvalidation.org/2.0/spec/#validationapi-validatorapi-groups), i.e. each call will produce constraint violations for the following properties:
1. `city`, `zipCode` (implicit `Default` group)
1. `street`, `zipCode` (explicit `Minimal` group)
1. `street`, `city`, `zipCode` (explicit `Minimal` and `Default` groups)

### Actual Behaviour

Micronaut Validator produces surplus constraint violations:
1. `city`, `zipCode`, **`street`**
1. **`city`**, `zipCode`, `street`
1. `zipCode`, `city`, `street`, **`city`**, **`zipCode`**

### Environment Information

- **Operating System**: Linux Mint 19.1
- **Micronaut Version:** 1.2.0
- **JDK Version:** OpenJDK 11.0.2

### Example Application

- https://github.com/ddl0x0d/micronaut-issues
  - [`ValidationGroupsTest.kt`](https://github.com/ddl0x0d/micronaut-issues/blob/master/src/test/kotlin/micronaut/issues/validation/ValidationGroupsTest.kt)

Test includes [Hibernate Validator](https://hibernate.org/validator/) being run on the exact same test data and producing correct results.