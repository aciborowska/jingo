### Task List

- [x] Steps to reproduce provided
- [ ] Stacktrace (if present) provided
- [x] Example that reproduces the problem uploaded to Github
- [x] Full description of the issue provided (see below)

### Steps to Reproduce

1. Create POJO with a BigDecimal field
2. Create controller with a single @Post resource, receiving the above POJO as a body, returning the same POJO as a response.
3. Extend JsonDeserializer and JsonSerializer classes, scaling BigDecimal value to 6 digits, rounding UP

### Expected Behaviour
When `curl -H "Content-Type: application/json" -d '{  "decimal": 48.669969 }' http://localhost:8080/test`, the same value `{  "decimal": 48.669969 }` should be returned.

### Actual Behaviour
Instead `{  "decimal": 48.669968 }` is being returned.

### Environment Information

- **Operating System**: Windows 10
- **Micronaut Version:** 1.0.1
- **JDK Version:**  1.8

(Maybe a small hint after some investigation)
`io.micronaut.jackson.parser.JacksonProcessor` contains following piece of code:
```java
case VALUE_NUMBER_FLOAT:
  if (nodeStack.isEmpty()) {
    throw new JsonParseException(currentNonBlockingJsonParser, "Unexpected float literal");
  }
  JsonNode floatNode = nodeStack.peekFirst();
  if (floatNode instanceof ObjectNode) {
    ((ObjectNode) floatNode).put(currentFieldName, currentNonBlockingJsonParser.getFloatValue());
  } else {
    ((ArrayNode) floatNode).add(currentNonBlockingJsonParser.getFloatValue());
  }
  break;
```
In case of double values, `currentNonBlockingJsonParser.getFloatValue()` method is doing a float cast (`(float) doubleValue`) which is from obvious reasons affecting the precision of doubles with 6+ decimal places, making the deserialization of e.g. geolocation values impossible. 

### Example Application
https://github.com/lordaronwd/micronaut-jackson-test

