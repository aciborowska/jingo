I get io.micronaut.http.client.exceptions.ReadTimeoutException when doing PUT requests
with RxStreamingHttpClient when the body is Flowable<io.micronaut.core.io.buffer.ByteBuffer>,
and content-type is set to MediaType.APPLICATION_OCTET_STREAM_TYPE)

The same code works with Flowable<io.netty.buffer> and Flowable<byte[]>,
or if content-type not set.

RxStreamingHttpClient returns Flowable<ByteBuffer> for response bodies.
So it should support the same for request bodies in PUT + POST.


### Task List

- [x] Steps to reproduce provided
- [x] Stacktrace (if present) provided
- [x] Example that reproduces the problem uploaded to Github
- [x] Full description of the issue provided (see below)

### Steps to Reproduce

Try to PUT with body Flowable<ByteBuffer> and content-type: application/octet-stream
See code below.  
I've tried with several different REST endpoints.


### Expected Behaviour

Put should succeed.

### Actual Behaviour

    io.micronaut.http.client.exceptions.ReadTimeoutException: Read Timeout
  	at io.micronaut.http.client.exceptions.ReadTimeoutException.<clinit>(ReadTimeoutException.java:26)
  	at io.micronaut.http.client.DefaultHttpClient$10.exceptionCaught(DefaultHttpClient.java:1905)
  	at io.netty.channel.AbstractChannelHandlerContext.invokeExceptionCaught(AbstractChannelHandlerContext.java:297)
  	at io.netty.channel.AbstractChannelHandlerContext.invokeExceptionCaught(AbstractChannelHandlerContext.java:276)
  	at io.netty.channel.AbstractChannelHandlerContext.fireExceptionCaught(AbstractChannelHandlerContext.java:268)
  	at io.micronaut.http.netty.reactive.HandlerSubscriber.exceptionCaught(HandlerSubscriber.java:158)
  	at io.netty.channel.AbstractChannelHandlerContext.invokeExceptionCaught(AbstractChannelHandlerContext.java:297)
  	at io.netty.channel.AbstractChannelHandlerContext.invokeExceptionCaught(AbstractChannelHandlerContext.java:276)
  	at io.netty.channel.AbstractChannelHandlerContext.fireExceptionCaught(AbstractChannelHandlerContext.java:268)
  	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireExceptionCaught(CombinedChannelDuplexHandler.java:426)
  	at io.netty.channel.ChannelHandlerAdapter.exceptionCaught(ChannelHandlerAdapter.java:92)
  	at io.netty.channel.CombinedChannelDuplexHandler$1.fireExceptionCaught(CombinedChannelDuplexHandler.java:147)
  	at io.netty.channel.ChannelInboundHandlerAdapter.exceptionCaught(ChannelInboundHandlerAdapter.java:143)
  	at io.netty.channel.CombinedChannelDuplexHandler.exceptionCaught(CombinedChannelDuplexHandler.java:233)
  	at io.netty.channel.AbstractChannelHandlerContext.invokeExceptionCaught(AbstractChannelHandlerContext.java:297)
  	at io.netty.channel.AbstractChannelHandlerContext.invokeExceptionCaught(AbstractChannelHandlerContext.java:276)
  	at io.netty.channel.AbstractChannelHandlerContext.fireExceptionCaught(AbstractChannelHandlerContext.java:268)
  	at io.netty.handler.timeout.ReadTimeoutHandler.readTimedOut(ReadTimeoutHandler.java:98)
  	at io.netty.handler.timeout.ReadTimeoutHandler.channelIdle(ReadTimeoutHandler.java:90)
  	at io.netty.handler.timeout.IdleStateHandler$ReaderIdleTimeoutTask.run(IdleStateHandler.java:505)
  	at io.netty.handler.timeout.IdleStateHandler$AbstractIdleTask.run(IdleStateHandler.java:477)
  	at io.netty.util.concurrent.PromiseTask.runTask(PromiseTask.java:98)
  	at io.netty.util.concurrent.ScheduledFutureTask.run(ScheduledFutureTask.java:150)
  	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)
  	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:510)
  	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:518)
  	at io.netty.util.concurrent.SingleThreadEventExecutor$6.run(SingleThreadEventExecutor.java:1050)
  	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
  	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
  	at java.base/java.lang.Thread.run(Thread.java:834)
### Environment Information

- **Operating System**: MacOS 10.12.6
- **Micronaut Version:** 1.3.0.M2
- **JDK Version:** OpenJDK 11.0.2+9

### Example Application

#Let me know if you need a full example uploaded to github.
#This fails with the exception above:

    @Test
    public void testPutByteBuffers() throws Exception {
            URL baseURL = new URL("http://httpbin.org");
            RxStreamingHttpClient rxclient = RxStreamingHttpClient.create(baseURL);

            String body = "body";
            Flowable<ByteBuffer<ByteBuf>> bufs = Flowable.just(
                    NettyByteBufferFactory.DEFAULT.wrap(body.getBytes()));

            MutableHttpRequest<?> request = HttpRequest.PUT("/put", bufs)
                    .contentType(MediaType.APPLICATION_OCTET_STREAM_TYPE);

            HttpResponse<String> result = rxclient.exchange(request, String.class).blockingSingle();
    }

#the same passes if i don't set contentType.

#the same also passes if I set contentType as above, but change bufs to

    Flowable<ByteBuf> bufs = Flowable.just(
                    NettyByteBufferFactory.DEFAULT.wrap(body.getBytes()))
                    .map(ByteBuffer::asNativeBuffer);
#or 

     Flowable<byte[]> bufs = Flowable.just(
                    NettyByteBufferFactory.DEFAULT.wrap(body.getBytes()))
                    .map(ByteBuffer::toByteArray);