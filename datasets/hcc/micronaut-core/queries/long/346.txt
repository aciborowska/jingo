### Steps to Reproduce
1. Create controller

```
@CompileStatic
@Controller("/hello")
class HelloController {

    HelloController(HttpResponder responder) {
        this.responder = responder
    }
    @Put('/mfa')
    HttpResponse mfa(Optional<Boolean> enable, Optional<Integer> multiFactorCode) {
        if (!multiFactorCode.present) {
            return HttpResponse.badRequest()
        }
        if (enable.present && enable.get()) {
            int code = multiFactorCode.get()
            return HttpResponse.ok([enable: true, mfa: code])
        }
        return HttpResponse.ok([enable: false])
    }
}

```
2. Create a test for the controller

```
class AbstractApiGatewayProxyHttpRequestSpec extends Specification {

    @Shared @AutoCleanup EmbeddedServer embeddedServer = ApplicationContext.run(EmbeddedServer)

    @Rule Gru gru = Gru.equip(Http.steal(this))

    void setup() {
        String serverUrl = embeddedServer.getURL().toString()
        gru.prepare {
            baseUri serverUrl
        }
    }

    void 'optional int parameter from body'() {
        expect:
            gru.test {
                put '/hello/mfa', {
                    json inline('{"enable": true }')
                }
                expect {
                    status BAD_REQUEST
                }
            }
    }

}
```

### Expected Behaviour

If `multiFactorCode` parameter is not present in the JSON body it should not be bound. Also only
`Integer` values should be bound to the to the `Optional<Integer>`

### Actual Behaviour

If `multiFactorCode` parameter is not present then the parameter should be bound to `Optional.empty`. Actually, the whole body (`LinkedHashMap`) is bound to the optional variable causing `ClassCastException`.

### Environment Information

- **Operating System**: Darwin
- **Micronaut Version:** 1.0.0.M2
- **JDK Version:** 1.8.0_92

