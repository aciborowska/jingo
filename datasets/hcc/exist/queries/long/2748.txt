The Java long value `0xFFFFFFFF` should at most take 8 bytes when using fixed-encoding. However, our variable byte encoding compression should theoretically compress this to 5 bytes, instead it seems to have a bug whereby the result is 10 bytes of storage :-/

Simple test case is below...

```java
package org.exist.storage.io;

import org.junit.Test;
import java.io.IOException;
import static org.junit.Assert.assertEquals;

public class VariableByteArrayInputTest {

    @Test
    public void toooooLong() {
        VariableByteOutputStream os = new VariableByteOutputStream();
        os.writeLong(0xFFFFFFFF);
        byte[] data = os.toByteArray();
        assertEquals(5, data.length);
    }

}
```
