Calling local-name() on a text node should return the zero-length string. In the following, the let statement does nothing, but brings about a NPE.

```
declare function local:copy($element as element(), $tests as element()) as element() {
    element {node-name($element)}
    {$element/@*,
    for $child in $element/node()
    let $name := $tests//test[case eq local-name($child)]
    return
        if ($child instance of element())
        then local:copy($child, $tests)
        else $child
      }
};

let $fragment :=
<x>
    <y>a</y>
</x>

let $tests :=
<tests>
    <test>
        <case>y</case>
    </test>
</tests>

return
    local:copy($fragment, $tests)
```

Remove the text node in $fragment, and it works. Change local-name() to name() and it works.

local-name() applied to a text node evaluates to null, not the empty string:

```
let $fragment :=
<x>
    <y>a</y>
</x>

let $text-node := $fragment//text()

return
    local-name($text-node)
```

With name() it returns the empty string.
