### What is the problem

Wrapping nodes in a function used in `fn:for-each` after an Arrow Operator incorrectly outputs one element per item in the source sequence.

```xquery
let $xml := <root><i/><i/><i/></root>
return
    $xml/i => for-each(function ($i) { <wrap>{$i}</wrap> })
```

returns

```xml
<wrap><i/><i/><i/></wrap>
<wrap><i/><i/><i/></wrap>
<wrap><i/><i/><i/></wrap>
```

### What did you expect

```xml
<wrap><i/></wrap>
<wrap><i/></wrap>
<wrap><i/></wrap>
```

### Describe how to reproduce or add a test

2 tests:
- *`ao:wrap-atomic-sequence`* does work
- *`ao:wrap-element-sequence`* outputs 9 instead of 3

```xquery
xquery version "3.1";

module namespace ao="http://exist-db.org/xquery/test/arrowop";
declare namespace test="http://exist-db.org/xquery/xqsuite";

declare
	%private
function ao:wrap ($item as item()) as item() { 
    <wrap>{$item}</wrap>
};

declare
	%private
function ao:wrap-explicit-type-conversion ($item as item()) as item() { 
    <wrap>{xs:string($item)}</wrap>
};

declare
	%private 
function ao:first-element-text ($s as node()*) as text() {
    $s[1]/text()
};

declare
    %test:assertEquals("1")
function ao:wrap-atomic-sequence () {
    (1, 2, 3) => for-each(ao:wrap#1) => ao:first-element-text()
};

declare
    %test:assertEquals("1")
function ao:wrap-atomic-sequence-with-explicit-type-conversion () {
    (1, 2, 3) => for-each(ao:wrap-with-explicit-type-conversion#1) => ao:first-element-text()
};

declare
	%private 
function ao:get-i-elements ($i as item()) { $i//i };

declare
    %test:assertEquals(3)
function ao:wrap-element-sequence () {
    let $xml := <root><i/><i/><i/></root>
    return $xml/node()
        => for-each(ao:wrap#1)
        => for-each(ao:get-i-elements#1)
        => count()
};
```

### Context information

- Tested on 4.1.0 and 5.0.0-RC1 (8339007319a720c97733c1c35b30d6e20ff41c9d) 
- java version "1.8.0_152"
- Operating system: MacOs (64 bit)
- both are clones from GitHub
- the 4.1.0 is a customised version of existdb 
