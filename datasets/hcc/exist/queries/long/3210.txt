**Is your feature request related to a problem? Please describe.**

The field feature in eXist 5 allows full text search within the field, and when hits are found, the field can be returned. Yet there is no facility for the highlighting of matches in fields. 

This feature request flows from the motivation for the index defined in https://github.com/eXist-db/exist/blob/develop/extensions/indexes/lucene/src/test/xquery/lucene/facets.xql#L187-L192: some divs are English, some are German, and we can use fields to perform language-specific and language-sensitive searches. Naturally, a search interface would display a KWIC summary of the hits. However, we do not have any facility for applying match highlighting to the results of field searches.

**Describe the solution you'd like**

I would expect a function like `util:expand` to highlight matches in full text hits in a field. However, `ft:field` returns a string, and `util:expand` operates on XML nodes stored in the database. Thus, `util:expand` may not be suitable. Instead, perhaps it'll be necessary to create a new `ft:highlight-field-matches` function? Since it operates on strings, perhaps it could return results in an `<exist:field>` element, with matches wrapped in an `<exist:match>` element, like:

```xquery
declare
    %test:args("english:bir*")
    %test:assertEquals("<exist:field>And the <exist:match>birds</exist:match> are singing</exist:field>")
function facet:highlight-field-matches($query as xs:string) {
    doc("/db/lucenetest/multi-lang.xml")//div[ft:query(., $query, map {"fields": "english"})]
    => ft:highlight-field-matches("english")
};
```

**Describe alternatives you've considered**

I tried `util:expand`, but since it takes a node and `ft:field` returns a string, it throws an error.

As for the results of the proposed function, I also considered proposing the format returned by `fn:analyze-string`: 

```xml
<fn:analyze-string-result xmlns:fn="http://www.w3.org/2005/xpath-functions">
    <fn:non-match>And the </fn:non-match>
    <fn:match>birds</fn:match>
    <fn:non-match> are singing</fn:non-match>
</fn:analyze-string-result>
```

... since this format would be compatible with any code for working with the results of this function. On the other hand, it's more likely that eXist developers would have code for highlighting nodes containing `<exist:match>` elements.

**Additional context**

I imagine that search applications with diverse data (i.e., different XML vocabularies or different structures) may make growing use of `ft:field` to allow corpus-wide searches across collections. For example, a corpus may contain both TEI and DocBook collections, each of which would require distinct indexes (one for `tei:TEI` and one for `dbk:article`), but which could feed into a common field containing the contents to be made full text searchable. This is already possible, but when displaying search results, it is common to display KWIC summaries. 