I'm trying to serialize DITA topic to string with DOCTYPE's added. So the following code block is used:

```
let $serialization-params := 
(
    "doctype-public=-//D//DTD P-Topic//EN", 
    "doctype-system=http://domain.com/xmetal/schemas/p-topic.dtd"
)
let $topic-string := util:serialize($topic-document, $serialization-params)
```

It fails with the following NPE:

```
Caused by: java.lang.NullPointerException
    at org.exist.xquery.functions.util.Serialize.parseSerializationOptions(Serialize.java:194)
    at org.exist.xquery.functions.util.Serialize.eval(Serialize.java:156)
    at org.exist.xquery.BasicFunction.eval(BasicFunction.java:70)
    at org.exist.xquery.InternalFunctionCall.eval(InternalFunctionCall.java:55)
    at org.exist.xquery.LetExpr.eval(LetExpr.java:142)
```

According to the code, it splits the string using space character as a delimiter. It looks like the same code is used to parse the serialization parameters that can be provided in `declare option exist:serialize` statement. However, in case of util:serialize the parameters format is different and I believe the space should not be considered as a delimiter.

I've tried to replace the space with the non-breaking space code `&#160;` This technique works well in `declare option exist:serialize` statement, however, with util:serialize it leads to another error:

```
exerr:ERROR XMLDB reported an exception while storing documentorg.xmldb.api.base.XMLDBException: The XML parser reported a problem: fatal error at (2,39) : An invalid XML character (Unicode: 0xa0) was found in the public identifier. [at line 57, column 22]
```

Not sure if it makes more sense to allow using space or `&#160;` or both but at least one of those ways should be working. Any considerations? It would be nice to fix it before 2.2 final release. I'm willing to help fixing but I'd like to hear developers' opinion on this.
