My (simplified) real query looks like this:

```xquery
let $uri := '/db'
return
  fn:tokenize(substring-after($uri, '/db'), '/')[fn:string-length(.) gt 0]
```

It incorrectly raises the error:

```
exerr:ERROR XPTY0004/FOCH0002: Supplied argument 1 of function: string-length($arg as xs:string?) xs:integer does not match required type. Required type xs:string?, got xs:boolean
```

It can be further simplified to:
```xquery
fn:tokenize('', '/')[fn:string-length(.) gt 0]
```

However, even though `fn:tokenize` returns an empty sequence, simplifying it even further to `()[fn:string-length(.) gt 0]` does not produce the error! This makes me think that the problem is with type inference/conversion of the Context Item.

This is a recent regression. The error does not occur in eXist-db 5.2.0, it does occur in eXist-db 5.3.0-SNAPSHOT.
Running `git bisect` identifies where the regression occurred:
```bash
git bisect start -- exist-core
git bisect bad
git bisect good d2db9cc
git bisect run ./bisect-xpath-script.sh "fn:tokenize('', '/')[fn:string-length(.) gt 0]"

...

633f5792052c5574d1952a6179f1e1a3f8bc155e is the first bad commit
```

So it looks like I inadvertently introduced this one in 633f579 :-( I will try and resolve it...

@line-o This is the type regression error that I previously described to you in a Community Call but at that point had not had the time to reproduce.

As a workaround, the query can be rewritten to the rather unnatural form:
```xquery
fn:tokenize('', '/') ! .[fn:string-length(.) gt 0]
```
