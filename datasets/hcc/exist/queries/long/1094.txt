I have filed this on behalf of Chris Wallace http://kitwallace.co.uk/Book/set/cusum/page.

When creating the sequence of cumulative sums of a sequence of numbers, the recursive indexed version should be fastest but both recursive versions throw `StackOverflowError` when N is large.
### Successive summations

``` xquery
declare function local:cusum1($s) {
  for $i in 1 to count($s)
  return sum(subsequence($s,1,$i))
};

let $t := 1 to 200
let $cs := local:cusum1($t) 
return
  (count($cs),$cs[last()])
```

Result: `200 20100`
### Recursive using indexing into the sequence

``` xquery
declare function local:cusum2($s) {
   local:cusum2($s,1,0)
};

declare function local:cusum2($s,$i,$n) {
    if ($i <= count($s))
    then
       let $n2 := $n + $s[$i]
       return  ($n2, local:cusum2($s,$i+1,$n2))
    else ()
};
let $t := 1 to 200
let $cs := local:cusum2($t) 
return
  (count($cs),$cs[last()])
```

Result: `200 20100`
### Recursive using subsequences

``` xquery
declare function local:cusum3($s) {
   local:cusum3($s,0)
};

declare function local:cusum3($s,$n) {
    if (count($s)>0)
    then
       let $n2 := $n + $s[1]
       return  ($n2, local:cusum3(subsequence($s,2),$n2))
    else ()
};

let $t := 1 to 200
let $cs := local:cusum3($t) 
return
  (count($cs),$cs[last()]) 
```

Result: `200 20100`
