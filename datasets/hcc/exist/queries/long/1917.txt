### What is the problem

eXist fails to enforce the cardinality of function return types, except in the case of the arrow operator.  For example, take the two following cases:

**Case 1:**
```xquery
index-of(("A", "B", "C", "B"), "B")
```

**Case 2:**
```xquery
("A", "B", "C", "B") => index-of("B")
```

The result of these cases should be identical, returning `(2, 4)` - a sequence of 2 integers. Before https://github.com/eXist-db/exist/pull/1916, eXist's return cardinality for `fn:index-of` was `ZERO_OR_ONE`, so both should have raised an error, but only Case B did. 

This observation, together with the very large number of cardinality mismatches documented at https://gist.github.com/joewiz/78b1827971a3c1c5dec8fc2d13dec8b2, suggests that eXist may be failing to enforce its own cardinality checks.

### What did you expect

I expect eXist to enforce its return type's cardinality regardless of how a function is called - either directly, via arrow operator, etc.

### Describe how to reproduce or add a test

I think that developing a test for this would require java skills that I unfortunately lack.  

(Return types are correctly enforced in XQuery:

```xquery
xquery version "3.1";

declare function local:zero-or-one-integer($x as item()*) as xs:integer? {
    $x
};

local:zero-or-one((1, 2))
```

This correctly raises the error.  So the issue reported here appears to only affect functions implemented in Java.)

### Context information

- eXist-db version + Git Revision hash: eXist 4.2.0
- Java version: 1.8.0_172-b11
- Operating system: macOS 10.13.5
- 32 or 64 bit: 64 bit
- How is eXist-db installed: clone from GitHub
- Any custom changes in e.g. conf.xml: none
