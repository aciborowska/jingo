eXist does a good job at maintaining higher-level Unicode values through transforms. However, there are exceptions. Take the following - innocent - script:

```
xquery version "3.1";

declare function local:make-lemma-version($element as element())
as element()
{
    element { node-name($element) } {
        $element/@*,
        for $child in $element/node()
        return
            if ($child instance of element(app)) 
            then $child/lem/string()
            else $child
    }
};

let $test := 
<seg>
    <app>
        <lem>a</lem>
        <rdg/>
    </app>
    &#x2a3c6;
</seg>
(:let $test := doc('/db/test.xml')/element():)
let $result := local:make-lemma-version($test)
return
    $result
```

$test contains a CJK Extension B character, U+2A3C6, which should look something like http://www.unicode.org/cgi-bin/GetUnihanData.pl?codepoint=2A3C6&useutf8=true (you may not have a font that allows you to view this character in eXide).

The result displays nicely when run over an in-memory fragment, but if you save the fragment and run it over a stored document (uncommenting the second "let $test" statement), you get two "ï¿½" U+FFFD replacement characters instead of one U+2A3C6 character. All information about the original U+2A3C6 is lost. - Many will never see a SIP character, but for me this is quite a problem.

There is a further puzzle: I have put an `a` as `<lem>` contents in the document, not because it occurs in my source, but because it does not matter what you put there. If you remove the `<lem>` contents in the document (or change `then $child/lem/string()` to `then $child/rdg/string()` or to `()` in the query), the U+2A3C6 will appear again. It will also appear again if you change `then $child/lem/string()` to `then <lem>{$child/lem/string()}</lem>`. Why?

PS: The problem not only applies to characters in the Supplementary Ideographic Plane, but also to characters in the Supplementary Multilingual Plane (including e.g. Emoticons). 
