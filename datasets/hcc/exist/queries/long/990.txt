In some cases the WHERE clause in a simple FOR-WHERE-RETURN construct gets the variable mapped to the whole sequence iterated by the FOR clause instead to a single member at a time. This changes to the correct behavior once the construct is expanded of a do-nothing LET:

[test.xml.zip](https://github.com/eXist-db/exist/files/246945/test.xml.zip)
Create a simple document in an empty collection (/db/amdr/workspace in this case). An example is attached to the issue (test.xml.zip).
Try evaluating the following code:

```
declare function local:test($node as node()*, $filter as function(node()) as xs:boolean ) as node()*
{
    for $p in $node//f
    where $filter($p)
    return $p
};

let $test := collection('/db/amdr/workspace')/test//b
 return local:test($test, function ($i as node()) as xs:boolean { true() })

```

This results in error

```
exerr:ERROR XPTY0004: The actual cardinality for parameter 1 does not match the cardinality declared in the function's signature: ($i as node()) xs:boolean. Expected cardinality: exactly one, got 14. [at line 6, column 20, source: String]
In function:
    (node()) [11:35:String]
    local:test(node()*, function) [11:8:String]

```

Now add a dummy LET clause above the failing where clause so that the function looks like:

```
declare function local:test($node as node()*, $filter as function(node()) as xs:boolean ) as node()*
{
    for $p in $node//f
    let $z := $p
    where $filter($p)
    return $p
};
```

Note that the $z variable is completely useless here, but the behavior changes - now the $p variable is mapped to one sequence member at a time and the function no more complains about incorrect cardinality and all 14 elements are returned.
This does not happen when a literal XML element is used instead of addressing collection contents.
