## Bug Report

### Steps to Reproduce:
1. Create a profile which produces a decision tree where one half of the tree contains potential contradictions (see profile below and diagram, this is a complex case to generalise) for example:
  a. Three non-nullable fields a,b,c
  b. One option in the profile is: `a=10`, `b=10`, `c=10` 
  c. Alternatively `b=1`, `c=1` AND (`a=1` OR `c=4`) AND (`a=2` OR `b=3`)
2. Generate in random mode

### Expected Result:
Only the data from the non-contradictory side of the tree should be produced, e.g. `10,10,10`

### Actual Result:
The generator will randomly choose to generate a number of rows from the non-contradictory side until it chooses to fix a value from a constraint on the contradictory side. At this point the generator gets caught in an infinite loop and stops generating any rows. Note that since values are randomly fixed the generator may generate several rows of 10,10,10 before starting down the contradictory path.

### Additional Context:
This bug is caused in part by the tree pruning operation not successfully checking for contradictions. There are several options to resolve this.

#### Example profile: [partiallyContradictory.profile.json.txt](https://github.com/ScottLogic/datahelix/files/3084893/partiallyContradictory.profile.json.txt)

#### Example Tree:
![infiniteContradictionTree](https://user-images.githubusercontent.com/46679170/56209603-e1e1dc00-604b-11e9-9d48-654762e9130a.png)

#### Example Tree Reduction:
![infiniteContradictionReductions](https://user-images.githubusercontent.com/46679170/56209229-ec4fa600-604a-11e9-8a71-42bf29570631.png)


