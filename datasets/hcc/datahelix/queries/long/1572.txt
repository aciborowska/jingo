## Bug Report

The boolean example profile throws an error when run by the datahelix.

### Steps to Reproduce:
Using the [boolean example](https://github.com/finos/datahelix/blob/master/examples/boolean/profile.json) run the datahelix.

```
{
    "fields": [
    {
      "name": "alwaysTrue",
      "type": "boolean",
      "nullable": false
    },
    {
      "name": "alwaysFalseOrNull",
      "type": "boolean",
      "nullable": true
    }
  ],
  "constraints": [
    {
      "field": "alwaysTrue",
      "equalTo": true
    },
    {
      "not": {
        "field": "alwaysFalseOrNull",
        "equalToField": "alwaysTrue"
      }
    }
  ]
}
```


### Expected Result:
The profile should generate two fields:
1. `alwaysTrue` which should be always true
2. `alwaysFalseOrNull` which should be false or null

### Actual Result:
```
Generation started at: 13:43:06

Number of rows | Velocity (rows/sec) | Velocity trend
---------------+---------------------+---------------
java.lang.IllegalStateException: Failed to merge field specs in related fields
	at com.scottlogic.datahelix.generator.core.generation.grouped.FieldSpecGroupValueGenerator.lambda$updateSpec$17(FieldSpecGroupValueGenerator.java:172)
	at java.util.Optional.orElseThrow(Optional.java:290)
	at com.scottlogic.datahelix.generator.core.generation.grouped.FieldSpecGroupValueGenerator.updateSpec(FieldSpecGroupValueGenerator.java:171)
	at com.scottlogic.datahelix.generator.core.generation.grouped.FieldSpecGroupValueGenerator.lambda$updateRelatedFieldSpecs$15(FieldSpecGroupValueGenerator.java:142)
	at java.util.stream.Collectors.lambda$toMap$58(Collectors.java:1321)
	at java.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java:169)
	at java.util.HashMap$EntrySpliterator.forEachRemaining(HashMap.java:1699)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at com.scottlogic.datahelix.generator.core.generation.grouped.FieldSpecGroupValueGenerator.updateRelatedFieldSpecs(FieldSpecGroupValueGenerator.java:140)
	at com.scottlogic.datahelix.generator.core.generation.grouped.FieldSpecGroupValueGenerator.generateRemainingData(FieldSpecGroupValueGenerator.java:114)
	at com.scottlogic.datahelix.generator.core.generation.grouped.FieldSpecGroupValueGenerator.lambda$generate$2(FieldSpecGroupValueGenerator.java:64)
	at com.scottlogic.datahelix.generator.common.util.FlatMappingSpliterator.accept(FlatMappingSpliterator.java:67)
	at java.util.stream.StreamSpliterators$WrappingSpliterator.tryAdvance(StreamSpliterators.java:302)
	at com.scottlogic.datahelix.generator.common.util.FlatMappingSpliterator.tryAdvance(FlatMappingSpliterator.java:78)
	at java.util.Spliterators$1Adapter.hasNext(Spliterators.java:681)
	at java.util.stream.MatchOps$1MatchSink.accept(MatchOps.java:90)
	at java.util.ArrayList$ArrayListSpliterator.tryAdvance(ArrayList.java:1359)
	at java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:126)
	at java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:498)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:485)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.MatchOps$MatchOp.evaluateSequential(MatchOps.java:230)
	at java.util.stream.MatchOps$MatchOp.evaluateSequential(MatchOps.java:196)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.allMatch(ReferencePipeline.java:454)
	at com.scottlogic.datahelix.generator.core.generation.combinationstrategies.MinimalCombinationStrategy.permute(MinimalCombinationStrategy.java:34)
	at com.scottlogic.datahelix.generator.core.generation.databags.RowSpecDataBagGenerator.createDataBags(RowSpecDataBagGenerator.java:45)
	at com.scottlogic.datahelix.generator.common.util.FlatMappingSpliterator.accept(FlatMappingSpliterator.java:67)
	at java.util.stream.Streams$StreamBuilderImpl.tryAdvance(Streams.java:405)
	at com.scottlogic.datahelix.generator.common.util.FlatMappingSpliterator.tryAdvance(FlatMappingSpliterator.java:74)
	at com.scottlogic.datahelix.generator.common.util.FlatMappingSpliterator.tryAdvance(FlatMappingSpliterator.java:78)
	at java.util.Spliterators$1Adapter.hasNext(Spliterators.java:681)
	at java.util.stream.MatchOps$1MatchSink.accept(MatchOps.java:90)
	at java.util.ArrayList$ArrayListSpliterator.tryAdvance(ArrayList.java:1359)
	at java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:126)
	at java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:498)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:485)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.MatchOps$MatchOp.evaluateSequential(MatchOps.java:230)
	at java.util.stream.MatchOps$MatchOp.evaluateSequential(MatchOps.java:196)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.allMatch(ReferencePipeline.java:454)
	at com.scottlogic.datahelix.generator.core.generation.combinationstrategies.MinimalCombinationStrategy.permute(MinimalCombinationStrategy.java:34)
	at com.scottlogic.datahelix.generator.core.generation.DecisionTreeDataGenerator.generateData(DecisionTreeDataGenerator.java:90)
	at com.scottlogic.datahelix.generator.orchestrator.generate.GenerateExecute.execute(GenerateExecute.java:49)
	at com.scottlogic.datahelix.generator.orchestrator.generate.GenerateCommandLine.call(GenerateCommandLine.java:60)
	at com.scottlogic.datahelix.generator.orchestrator.generate.GenerateCommandLine.call(GenerateCommandLine.java:45)
	at picocli.CommandLine.executeUserObject(CommandLine.java:1743)
	at picocli.CommandLine.access$900(CommandLine.java:145)
	at picocli.CommandLine$RunLast.handle(CommandLine.java:2101)
	at picocli.CommandLine$RunLast.handle(CommandLine.java:2068)
	at picocli.CommandLine$AbstractParseResultHandler.execute(CommandLine.java:1935)
	at picocli.CommandLine.execute(CommandLine.java:1864)
	at com.scottlogic.datahelix.generator.orchestrator.App.main(App.java:50)
```

### Environment:
Ran using `generate --max-rows=1000 --replace --profile-file=C:\src\DataHelix\profile.json --output-path=C:\src\DataHelix\out.csv --output-format=csv --generation-type=FULL_SEQUENTIAL`

but fails in random mode as well.

