## Bug Report
A test was written to include an anyOf constraint within the then and else statements of an if request. These requests emitted only one line of unexpected data.

> Scenario: Running an if request that contains a non contradictory anyOf constraint within its then statement should be successful
>      Given the following fields exist:
>        | foo |
>        | bar |
>        And foo is in set:
>          | "a" |
>          | "b" |
>          | "c" |
>          | "d" |
>          | "e" |
>        And foo is anything but null
>        And bar is in set:
>          | 10 |
>          | 20 |
>          | 30 |
>          | 40 |
>          | 50 |
>        And bar is anything but null
>        And there is a constraint:
>        """
>          {
>          "if":  { "field": "foo", "is": "equalTo", "value": "a" },
>          "then": { "anyOf": [
>            { "field": "bar", "is": "equalTo", "value": 20 },
>            { "field": "bar", "is": "equalTo", "value": 40 } ] },
>          "else": { "field": "bar", "is": "equalTo", "value": 50 }
>          }
>        """
>      Then the following data should be generated:
>        | foo | bar |
>        | "a" | 20  |
>        | "a" | 40  |
>        | "b" | 50  |
>        | "c" | 50  |
>        | "d" | 50  |
>        | "e" | 50  |

### Steps to Reproduce:
1. Run the above test (or feature file if.feature) in cucumber
2. See that the scenario (**Running an if request that contains a non contradictory anyOf constraint within its then statement should be successful**) fails
3. Check the error message to see that one line of data is emitted unexpectedly
4. 

### Expected Result:
Data in foo matching the if statement of "a" should be paired against any of 20 or 40
Data in foo not matching the if statement of "a" should be paired against the value 50

>  Then the following data should be generated:
>        | foo | bar |
>        | "a" | 20  |
>        | "a" | 40  |
>        | "b" | 50  |
>        | "c" | 50  |
>        | "d" | 50  |
>        | "e" | 50  |

### Actual Result:
An error is created from running the test showing that only one line of data has been emitted [a, 10]

1. java.lang.AssertionError: 
2. Expected: [a, 10], [b, 20], [b, 40], [c, 20], [c, 40], [d, 20], [d, 40], [e, 20], [e, 40]
3.      but: [a, 10]
4.  missing: [b, 20], [b, 40], [c, 20], [c, 40], [d, 20], [d, 40], [e, 20], [e, 40]
5.   counts: expected 9, but got 1
6. 	at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)
7. 	at org.junit.Assert.assertThat(Assert.java:956)
8. 	at org.junit.Assert.assertThat(Assert.java:923)
9. 	at com.scottlogic.deg.generator.cucumber.steps.GeneralTestStep.theFollowingDataShouldBeGenerated(GeneralTestStep.java:105)
10. 	at âœ½.the following data should be generated:(C:/DataGenerator/data-engineering-generator/generator/src/test/java/com/scottlogic/deg/generator/cucumber/If.feature:3962)

### Environment:
Test run via IntelliJ from branch ifTestsUpdated. Full generation and combination strategies were used.

### Additional Context:
Tests set to @ignore 
The same error was seen for an anyOf used in the else statement:

> Scenario: Running an if request that contains a non contradictory anyOf constraint within its then statement should be successful
>      Given the following fields exist:
>        | foo |
>        | bar |
>        And foo is in set:
>          | "a" |
>          | "b" |
>          | "c" |
>          | "d" |
>          | "e" |
>        And foo is anything but null
>        And bar is in set:
>          | 10 |
>          | 20 |
>          | 30 |
>          | 40 |
>          | 50 |
>        And bar is anything but null
>        And there is a constraint:
>        """
>          {
>          "if":  { "field": "foo", "is": "equalTo", "value": "a" },
>          "then": { "field": "bar", "is": "equalTo", "value": 10 },
>          "else": { "anyOf": [
>            { "field": "bar", "is": "equalTo", "value": 20 },
>            { "field": "bar", "is": "equalTo", "value": 40 } ] }
>          }
>        """
>      Then the following data should be generated:
>        | foo | bar |
>        | "a" | 10  |
>        | "b" | 20  |
>        | "b" | 40  |
>        | "c" | 20  |
>        | "c" | 40  |
>        | "d" | 20  |
>        | "d" | 40  |
>        | "e" | 20  |
>        | "e" | 40  |
