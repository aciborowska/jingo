## Bug Report

### Steps to Reproduce:
1. Create a simple linear profile (example at bottom)
1. Run the generator in random mode with a sufficiently large max number of rows (`max-rows=10_000_000`)
1. Wait a sufficient length of time (between 30-60 minutes)
1. Observe the velocity output from the console

### Expected Result:
Consistent numbers of rows produced per second until all 10 million rows are produced

### Actual Result:
Performance drops significantly when the generator reaches some number of rows (dependent on the system/profile, in the order of 100-200 thousand rows) followed by a gradual decrease in performance until the generator exits with an OutOfMemory Exception.

![image](https://user-images.githubusercontent.com/46679170/55883602-8a9cc100-5b9e-11e9-8416-203b576dbe99.png)

### Additional Context:
* Note we have tested this both with/without partitioning and with/without any string fields. The behaviour is still the same.
* Sample profile: [performanceTest.profile.json.txt](https://github.com/ScottLogic/datahelix/files/3064084/performanceTest.profile.json.txt)
