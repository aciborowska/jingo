## Bug Report

The conditional clause of an `if` constraint should not accept null as fulfilling the condition of the `if` constraint, even if the condition clause, when used by itself to generate data, would generate null.  

The only exception to this is when null is explicitly accepted using a `"is": "null"` constraint, either by itself or combined with other constraints in a grammatical constraint.

### Steps to Reproduce:
 1. Write the following profile:
```
{
  "schemaVersion": "0.1",
  "fields": [
    { "name": "X" },
	{ "name": "Y" }
  ],
  "rules": [
    {
      "constraints": [
        { "field": "X", "is": "inSet", "values": [ "a", "b", "c" ] },
		{ 
			"if": { "field": "X", "is": "inSet", "values": [ "a", "b" ] },
			"then": { "field": "Y", "is": "inSet", "values": [ "v", "x" ] },
			"else": { "field": "Y", "is": "inSet", "values": [ "y", "z" ] }
		}
	  ]
    }
  ]
}
```
2. Run the profile in generate mode.

### Expected Result:
The generated data should be a mixture of the following possible rows:

| X | Y |
|:---:|:---:|
| a | v |
| a | x |
| a | _null_ |
| b | v |
| b | x |
| b | _null_ |
| c | y |
| c | z |
| c | _null_ |
| _null_ | y |
| _null_ | z |
| _null_ | _null_ |

Null is acceptable output from the `inSet` constraint in generation.

### Actual Result:
The generated data will be a mixture of the following potential rows:

| X | Y |
|:---:|:---:|
| a | v |
| a | x |
| a | _null_ |
| b | v |
| b | x |
| b | _null_ |
| c | y |
| c | z |
| c | _null_ |
| _null_ | v |
| _null_ | x |
| _null_ | y |
| _null_ | z |
| _null_ | _null_ |

This is because null values for field X, which are legitimately generated by the `inSet` constraint, are interpreted as both matching _and_ not matching the conditional clause of the `if` constraint, and therefore the generator will generate data combining null in field X with both the then and else clauses of the if constraint.

### Further information

I have used `inSet` as an example in this case to avoid confusion, given that there are outstanding issues to change the behaviour of constraints such as `equalTo` in generation.  `inSet` has no such outstanding issues at present.  The behaviour of the conditional should be the same for any constraint which can optionally generate a null when used in generation, such as `greaterThan` for example.

The constraints in the `then` and `else` clauses are being used in generation, and therefore should still be able to generate null where appropriate.
