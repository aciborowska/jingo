## Bug Report

### Steps to Reproduce:

Run the following scenarios:

from ExhaustiveCombination.feature
```gherkin
Scenario: Running an exhaustive combination strategy that includes an "if" statement should be successful
     Given the generation strategy is full
     And the combination strategy is exhaustive
     And the walker type is reductive
     And the following fields exist:
       | foo1 |
       | foo2 |
       | foo3 |
       And the walker type is reductive
       And foo1 is of type "string"
       And foo1 is anything but null
       And foo2 is of type "numeric"
       And foo2 is anything but null
       And foo3 is of type "string"
       And foo3 is anything but null
       And foo1 is in set:
         | "alpha" |
       And foo2 is in set:
         | 1    |
         | 10   |
         | 100  |
         | 1000 |
       And foo3 is in set:
         | "test1"     |
         | "test10"    |
         | "test100"   |
         | "other"     |
         | "Not in If" |
       And there is a constraint:
       """
         {
         "if": { "field": "foo2", "is": "equalTo", "value": 1 },
         "then": { "field": "foo3", "is": "equalTo", "value": "test1" },
         "else": {
         "if": { "field": "foo2", "is": "equalTo", "value": 10 },
         "then": { "field": "foo3", "is": "equalTo", "value": "test10" },
         "else": {
         "if": { "field": "foo2", "is": "equalTo", "value": 100 },
         "then": { "field": "foo3", "is": "equalTo", "value": "test100" },
         "else": { "field": "foo3", "is": "equalTo", "value": "other" }
         }
         }
         }
       """
     Then the following data should be generated:
       | foo1    | foo2 | foo3      |
       | "alpha" | 1    | "test1"   |
       | "alpha" | 10   | "test10"  |
       | "alpha" | 100  | "test100" |
       | "alpha" | 1000 | "other"   |
```

from If.feature
```gherkin
Scenario: Running an exhaustive combination strategy with roman alphabet character (a-z) strings should be successful
     Given the generation strategy is full
     And the combination strategy is exhaustive
     And the walker type is reductive
     And the following fields exist:
       | foo |
       | bar |
       And foo is of type "string"
       And foo is anything but null
       And bar is of type "string"
       And bar is anything but null
       And foo is in set:
         | "a" |
         | "b" |
       And bar is in set:
         | "c" |
         | "d" |
     Then the following data should be generated:
       | foo | bar |
       | "a" | "c" |
       | "b" | "c" |
       | "a" | "d" |
       | "b" | "d" |
```
  Running an 'if' constraint for then condition only should be successful

### Expected Result:
No unexpected duplicates in the results.

### Actual Result:
_Scenario: Running an exhaustive combination strategy that includes an "if" statement should be successful_
```
Expected: [alpha, 1, test1], [alpha, 10, test10], [alpha, 100, test100], [alpha, 1000, other]
     but: [alpha, 1, test1], [alpha, 100, test100], [alpha, 1000, other], [alpha, 10, test10], [alpha, 1, test1], [alpha, 100, test100], [alpha, 10, test10]
```

_Scenario: Running an exhaustive combination strategy with roman alphabet character (a-z) strings should be successful_
```
Expected: [a, 10], [b, 10], [b, 20]
     but: [a, 10], [b, 20], [b, 10], [a, 10]
```

### Additional Context:
Discovered in #423 
not related to #91 That is an issue in the Cartesian walker, which is fixed by the reductive walker.