Consider the following two profiles. They are identical, except for the differences in **bold**.
First version:
<pre>
{
  "schemaVersion": "0.1",
  "fields": [
    {
      "name": "Column 1"
    }
  ],
  "rules": [
    {
      "rule": "Rule 1",
      "constraints": [
        {
          "allOf": [
            {
              "anyOf": [
                {
                  "field": "Column 1",
                  "is": "ofType",
                  "value": "string"
                },
                {
                  "field": "Column 1",
                  "is": "ofType",
                  "value": "integer"
                }
              ]
            },
            {
              "not": {
                "field": "Column 1",
                "is": "null"
              }
            },
            {
              "if":
                {
                  "field": "Column 1",
                  "is": "ofType",
                  "value": "integer"
                },
              "then":
                {
                  "field": "Column 1",
                  "is": "equalTo",
                  <b>"value": "a"</b>
                },
              "else":
                {
                  "field": "Column 1",
                  "is": "equalTo",
                  <b>"value": "b"</b>
                }
            }
          ]
        }
      ]
    }
  ]
}
</pre>
Second version:
<pre>
{
  "schemaVersion": "0.1",
  "fields": [
    {
      "name": "Column 1"
    }
  ],
  "rules": [
    {
      "rule": "Rule 1",
      "constraints": [
        {
          "allOf": [
            {
              "anyOf": [
                {
                  "field": "Column 1",
                  "is": "ofType",
                  "value": "string"
                },
                {
                  "field": "Column 1",
                  "is": "ofType",
                  "value": "integer"
                }
              ]
            },
            {
              "not": {
                "field": "Column 1",
                "is": "null"
              }
            },
            {
              "if":
                {
                  "field": "Column 1",
                  "is": "ofType",
                  "value": "integer"
                },
              "then":
                {
                  "field": "Column 1",
                  "is": "equalTo",
                  <b>"value": 0</b>
                },
              "else":
                {
                  "field": "Column 1",
                  "is": "equalTo",
                  <b>"value": 1</b>
                }
            }
          ]
        }
      ]
    }
  ]
}
</pre>
## First Version Discussion
In plain English, the profile will produce data that is never null, with a type of either string or integer. If the type is integer, then only values of "a" will be produced else only values of "b" will be produced.

Because the string "a" is not an integer, the only generation output to CSV is rows of "b".

## Second Version Discussion
In plain English, the profile will produce data that is never null, with a type of either string or integer. If the type is integer, then only values of 0 will be produced else only values of 1 will be produced.

Because the integer 0 is not a string, the only generation output to CSV is rows of 1.

**This is not what happens.** The second version produces 0s and 1s. 

This is because there are **implicit type conversions from integer to string**.

When we get to the 0 case, we know that the field is a string and is equal to 0 (and is not null, from another condition). The system implicitly converts the 0 to the string "0", which matches all criteria, and therefore 0s are allowed outputs. 

## Pros of this type conversion
* Data may be inputted into the generator from a format that does not distinguish between the string "0" and the integer 0. Therefore, the generator should not distinguish between them.
* Users may expect this conversion.

## Cons of this type conversion
* Users may not expect this conversion (as I didn't expect it, which is why I raised this issue in the first place).

## Moving Forward (if we choose to keep the current behaviour)
* Perhaps someone could provide an example profile justifying why this type conversion could be helpful, if the team decides it would be helpful?
* This behaviour should be documented in detail. Perhaps in a "gotchas" section for profiles?
* For the generator's CSV output, all strings are enclosed by double quotes ("), e.g. the "a"s and "b"s for the first profile here are enclosed by quotes. However, the 0s implicitly converted to strings are _not_ given enclosing quotes. This should be fixed to make it clearer to the user that this type conversion exists.
* Consider giving a console warning when an implicit type conversion is made.

## Moving Forward (if we choose to remove the implicit type conversion)
* Consider first whether the potential problem (the first bullet in the "Pros of this type conversion" section) is actually a problem, and how it may need to be solved.