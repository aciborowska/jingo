## Bug Report

Replacement for #165 
### Steps to Reproduce:
 1. Generate data for the following profile without limiting the number of rows (must be written to a CSV file)

```
{
	"schemaVersion": "v3",
	"description": "desc",
	"fields": [
		{
			"name": "foo"
		}
	],
	"rules": [
		{
			"field": "foo",
			"is": "shorterThan",
			"value": 2
		},
		{
			"field": "foo",
			"is": "ofType",
			"value": "string"
		}
	]
}  
```

This issue does not present itself in the cucumber framework as we do no exercise a unicode text writer - we hold all the data in-memory.

### Expected Result:
All unicode characters/code-points in the range `\u0000-\uffff` are emitted, therefore at most 65,536 rows in the output file.
File can be read by a unicode capable text editor, and be verified as UTF-8 encoded.
Only plane-0 characters/code-points from unicode should be emitted - as per our documentation.

### Actual Result:
The StreamWriter in java throws an error as it is given invalid characters/code-points.
Upon investigation in #165 this appears to be due to the Automaton library

### Acceptance criteria:
- [x] The generator can run with the given profile above without throwing an error
- [x] The generator will emit all plane-0 characters from unicode into the output CSV file
- [x] (Optional) The cucumber framework is updated to assert the correctness of the output data - i.e. prove it is valid unicode data
- [ ] The generator cannot be tricked into emitting invalid data (e.g. `matchingRegex /\xffff/`, where `\xffff` is an invalid character/code-point in unicode)