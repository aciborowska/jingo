## Bug Report

### Steps to Reproduce:
 1. Create profile with field foo
2. Add rule with equalTo constant ("goodbye")
3. Add rule with ofType matching constant specified ("string")
4. Generate data in random mode

### Expected Result:
File 1.csv contains strings not equalTo "goodbye"
File 2.csv should only contain `null` repeated as required

### Actual Result:
Exception thrown when second file generated:
```
Exception in thread "main" picocli.CommandLine$ExecutionException: Error while running command (com.scottlogic.deg.generator.commandline.GenerateCommandLine@72ade7e3): java.lang.IllegalArgumentException: bound must be positive
	at picocli.CommandLine.execute(CommandLine.java:1051)
	at picocli.CommandLine.access$900(CommandLine.java:142)
	at picocli.CommandLine$RunLast.handle(CommandLine.java:1246)
	at picocli.CommandLine$RunLast.handle(CommandLine.java:1214)
	at picocli.CommandLine$AbstractParseResultHandler.handleParseResult(CommandLine.java:1122)
	at picocli.CommandLine.parseWithHandlers(CommandLine.java:1405)
	at picocli.CommandLine.parseWithHandler(CommandLine.java:1344)
	at com.scottlogic.deg.generator.App.main(App.java:18)
Caused by: java.lang.IllegalArgumentException: bound must be positive
	at java.util.Random.nextInt(Random.java:388)
	at com.scottlogic.deg.generator.utils.JavaUtilRandomNumberGenerator.nextInt(JavaUtilRandomNumberGenerator.java:23)
	at com.scottlogic.deg.generator.generation.fieldvaluesources.CannedValuesFieldValueSource.lambda$null$0(CannedValuesFieldValueSource.java:47)
	at com.scottlogic.deg.generator.utils.SupplierBasedIterator.next(SupplierBasedIterator.java:20)
	at com.scottlogic.deg.generator.generation.fieldvaluesources.CombiningFieldValueSource$InternalRandomIterator.next(CombiningFieldValueSource.java:97)
	at java.util.Spliterators$IteratorSpliterator.tryAdvance(Spliterators.java:1812)
	at java.util.stream.StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0(StreamSpliterators.java:294)
	at java.util.stream.StreamSpliterators$AbstractWrappingSpliterator.fillBuffer(StreamSpliterators.java:206)
	at java.util.stream.StreamSpliterators$AbstractWrappingSpliterator.doAdvance(StreamSpliterators.java:161)
	at java.util.stream.StreamSpliterators$WrappingSpliterator.tryAdvance(StreamSpliterators.java:300)
	at com.scottlogic.deg.generator.FlatMappingSpliterator.tryAdvance(FlatMappingSpliterator.java:64)
	at java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:126)
	at java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:498)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:485)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.FindOps$FindOp.evaluateSequential(FindOps.java:152)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.findFirst(ReferencePipeline.java:464)
	at com.scottlogic.deg.generator.walker.RandomReductiveDecisionTreeWalker.getFirstRowSpecFromRandomisingIteration(RandomReductiveDecisionTreeWalker.java:37)
	at com.scottlogic.deg.generator.walker.RandomReductiveDecisionTreeWalker.walk(RandomReductiveDecisionTreeWalker.java:21)
	at com.scottlogic.deg.generator.generation.DecisionTreeDataGenerator.lambda$generateData$0(DecisionTreeDataGenerator.java:56)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1382)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at com.scottlogic.deg.generator.generation.combinationstrategies.ReductiveCombinationStrategy.permute(ReductiveCombinationStrategy.java:19)
	at com.scottlogic.deg.generator.generation.databags.MultiplexingDataBagSource.generate(MultiplexingDataBagSource.java:17)
	at com.scottlogic.deg.generator.generation.DecisionTreeDataGenerator.generateData(DecisionTreeDataGenerator.java:67)
	at com.scottlogic.deg.generator.StandardGenerationEngine.generateDataSet(StandardGenerationEngine.java:32)
	at com.scottlogic.deg.generator.violations.ViolationGenerationEngine.generateDataSet(ViolationGenerationEngine.java:40)
	at com.scottlogic.deg.generator.GenerateExecute.run(GenerateExecute.java:65)
	at com.scottlogic.deg.generator.commandline.CommandLineBase.run(CommandLineBase.java:48)
	at picocli.CommandLine.execute(CommandLine.java:1043)
	... 7 more
```

### Example Profile:
```
{
    "schemaVersion": "0.1",
    "description": "Testing Profile",
    "fields": [
        {
            "name": "foo"
        }
    ],
    "rules": [
        {
            "rule": "rule1",
            "constraints": [
                {
                    "field": "foo",
                    "is": "equalTo",
                    "value": "goodbye"
                }
            ]
        },
        {
            "rule": "rule2",
            "constraints": [
                {
                        "field": "foo",
                        "is": "ofType",
                        "value": "string"
                }
            ]
        }
    ]
}
```

### Additional Context
EqualTo integer value with ofType integer is successful
Decimal, Temporal, String all fail