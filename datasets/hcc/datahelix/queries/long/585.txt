## Bug Report

### Steps to Reproduce:
Add and run the following tests

  Scenario: Running the generator in violate mode for multiple constraints with strings is successful
    Given the generation strategy is interesting
    And foo is of type "string"
    And foo is anything but equal to "hello"
    And the generator can generate at most 10 rows
    Then the following data should be included in what is generated:
      | foo |
      | "hello" |
      | 0 |
      | -2147483648 |
      | 2147483646 |
      | 1900-01-01T00:00:00.000 |
      | 2100-01-01T00:00:00.000 |
      | null |

Violation.feature
- Running the generator in violate mode for multiple constraints with strings is successful

>   Scenario: Running the generator in violate mode for multiple constraints with strings is successful
>     Given foo is of type "string"
>     And foo is anything but equal to "hello"
>     Then the following data should be included in what is generated:
>       | foo                     |
>       | "hello"                 |
>       | 0                       |
>       | -2147483648             |
>       | 2147483646              |
>       | 1900-01-01T00:00:00.000 |
>       | 2100-01-01T00:00:00.000 |
>       | null                    |

### Expected Result:
When not equal to "hello" is violated, this should behave as equalTo "hello"; therefore the data generator should output  | "hello"                 | for this profile.

### Actual Result:
The 'interesting' values are generated, but "hello" is not
 missing: [hello]

-------------------
The equal to value is missing from each test and canned response values are present which shouldn't be

Scenario: Running the generator in violate mode for less than or equal to is successful
    Given foo is less than or equal to 10
    And foo is of type "numeric"

`Expected: [11], [12], [null]`
`     but: [-2147483648], [0], [2147483646], [Lorem Ipsum], [1900-01-01T00:00:00.000], [2100-01-01T00:00:00.000], [null]`
`missing: [11], [12]`

Scenario: Running the generator in violate mode for multiple constraints with strings is successful
    Given foo is of type "string"
    And foo is anything but equal to "hello"

`Expected: [hello], [0], [-2147483648], [2147483646], [1900-01-01T00:00:00.000], [2100-01-T00:00:00.000], [null]`
`     but: [-2147483648], [0], [2147483646], [Lorem Ipsum], [1900-01-01T00:00:00.000], [2100-01-01T00:00:00.000], [null]`
`missing: [hello]`

Scenario: Running the generator in violate mode for multiple constraints with numbers is successful
    Given foo is of type "numeric"
    And foo is anything but equal to 8

`Expected: [Lorem Ipsum], [1900-01-01T00:00:00.000], [2100-01-01T00:00:00.000], [8], [null]`
`     but: [-2147483648], [0], [2147483646], [Lorem Ipsum], [1900-01-01T00:00:00.000], [2100-01-01T00:00:00.000], [null]`
`missing: [8]`

discovered in #423 

### Environment
Run via IntelliJ using the following background

> Background:
>   Given the generation strategy is interesting
>   And the combination strategy is exhaustive
>   And there is a field foo
>   And the data requested is violating
>   And the walker type is REDUCTIVE
>   And the generator can generate at most 20 rows

### Additional information
- When these scenarios fail the system outputs the hardcoded interesting string and numeric responses.
- The same issue is seen when violating a NOT equal to number in scenario **Scenario: Running the generator in violate mode for multiple constraints with numbers is successful**
![image](https://user-images.githubusercontent.com/43746958/53161413-dd57f480-35c1-11e9-80cb-720b4f318f39.png)
