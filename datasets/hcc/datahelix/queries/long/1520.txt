## Bug Report

### Steps to Reproduce:
 1. Run the generator with the attached profile
```
java -jar libs/generator.jar generate --max-rows=100 --replace --profile-file=pairwiseNumberEqualTo-profile2.json --output-path=test/test.csv
```

 2. Got an error of `IllegalStateException` (see below) 
### Expected Result:
I expect Generator to accept the profile

### Actual Result:
Got the following error:

```
java.lang.IllegalStateException: Failed to merge field specs in related fields
        at com.scottlogic.deg.generator.generation.grouped.FieldSpecGroupValueGenerator.lambda$updateFirstSpecFromRelations$6(FieldSpecGroupValueGenerator.java:88)
        at java.base/java.util.Optional.orElseThrow(Unknown Source)
        at com.scottlogic.deg.generator.generation.grouped.FieldSpecGroupValueGenerator.updateFirstSpecFromRelations(FieldSpecGroupValueGenerator.java:88)
        at com.scottlogic.deg.generator.generation.grouped.FieldSpecGroupValueGenerator.generate(FieldSpecGroupValueGenerator.java:57)
        at com.scottlogic.deg.generator.generation.databags.RowSpecDataBagGenerator.lambda$createDataBags$0(RowSpecDataBagGenerator.java:43)
        at java.base/java.util.stream.ReferencePipeline$3$1.accept(Unknown Source)
        at java.base/java.util.stream.ReferencePipeline$3$1.accept(Unknown Source)
        at java.base/java.util.HashMap$KeySpliterator.forEachRemaining(Unknown Source)
        at java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source)
        at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source)
        at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(Unknown Source)
        at java.base/java.util.stream.AbstractPipeline.evaluate(Unknown Source)
        at java.base/java.util.stream.ReferencePipeline.collect(Unknown Source)
        at com.scottlogic.deg.generator.generation.combinationstrategies.MinimalCombinationStrategy.permute(MinimalCombinationStrategy.java:32)
        at com.scottlogic.deg.generator.generation.databags.RowSpecDataBagGenerator.createDataBags(RowSpecDataBagGenerator.java:45)
        at com.scottlogic.deg.generator.walker.rowspec.RandomRowSpecDecisionTreeWalker.generateWithoutRestarting(RandomRowSpecDecisionTreeWalker.java:68)
        at com.scottlogic.deg.generator.walker.rowspec.RandomRowSpecDecisionTreeWalker.walk(RandomRowSpecDecisionTreeWalker.java:53)
        at com.scottlogic.deg.generator.generation.DecisionTreeDataGenerator.lambda$generateData$0(DecisionTreeDataGenerator.java:88)
        at java.base/java.util.stream.ReferencePipeline$3$1.accept(Unknown Source)
        at java.base/java.util.stream.ReferencePipeline$3$1.accept(Unknown Source)
        at java.base/java.util.stream.ReferencePipeline$3$1.accept(Unknown Source)
        at java.base/java.util.stream.ReferencePipeline$3$1.accept(Unknown Source)
        at java.base/java.util.stream.SortedOps$SizedRefSortingSink.end(Unknown Source)
        at java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source)
        at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source)
        at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(Unknown Source)
        at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Unknown Source)
        at java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source)
        at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source)
        at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(Unknown Source)
        at java.base/java.util.stream.AbstractPipeline.evaluate(Unknown Source)
        at java.base/java.util.stream.ReferencePipeline.collect(Unknown Source)
        at com.scottlogic.deg.generator.generation.combinationstrategies.MinimalCombinationStrategy.permute(MinimalCombinationStrategy.java:32)
        at com.scottlogic.deg.generator.generation.DecisionTreeDataGenerator.generateData(DecisionTreeDataGenerator.java:90)
        at com.scottlogic.deg.orchestrator.generate.GenerateExecute.execute(GenerateExecute.java:58)
        at com.scottlogic.deg.orchestrator.generate.GenerateCommandLine.call(GenerateCommandLine.java:58)
        at com.scottlogic.deg.orchestrator.generate.GenerateCommandLine.call(GenerateCommandLine.java:43)
        at picocli.CommandLine.executeUserObject(CommandLine.java:1743)
        at picocli.CommandLine.access$900(CommandLine.java:145)
        at picocli.CommandLine$RunLast.handle(CommandLine.java:2101)
        at picocli.CommandLine$RunLast.handle(CommandLine.java:2068)
        at picocli.CommandLine$AbstractParseResultHandler.execute(CommandLine.java:1935)
        at picocli.CommandLine.execute(CommandLine.java:1864)
        at com.scottlogic.deg.orchestrator.App.main(App.java:35)

```


### Environment:
Build of `v1.30.0` (dated Nov 1, SHA5: `633cf64c9a3eb496585e102f832b1efc100e1ff9`)

### Additional Context:
The generator accept other simplier profiles (I can share those if interested)

The GitHub UI does not allow me directly attached a `.json` file, so I renamed it to `.json.txt`

[pairwiseNumberEqualTo-profile2.json.txt](https://github.com/finos/datahelix/files/3809900/pairwiseNumberEqualTo-profile2.json.txt)
