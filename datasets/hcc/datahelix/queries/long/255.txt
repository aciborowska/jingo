## Bug Report
Exhaustive combination tests across three fields, each with a set of five data options, were run. This was expected to generate 124 rows of data, not expected to be a large request, but failed with a memory error.

[Test Example 2.txt](https://github.com/ScottLogic/data-engineering-generator/files/2648567/Test.Example.2.txt)


A second test expecting 25 roes from three fields (one set of 1 data option and two sets of five data options) also failed with the same memory error.

[Test Example 1.txt](https://github.com/ScottLogic/data-engineering-generator/files/2648569/Test.Example.1.txt)

### Steps to Reproduce:
1. Run tests from the feature file ExhaustiveCombination.feature
2. See that there is a failure for the test **Scenario: Running an exhaustive combination strategy across three fields with five data options each should be successful**
3. Note that the test is long running and then fails with an out of memory error 

### Expected Result:
These tests should generate the expected 124 / 25 rows of data based on the exhaustive combination strategy.

### Actual Result:
The tests fail with a memory error:

> java.lang.OutOfMemoryError: GC overhead limit exceeded
> 	at com.scottlogic.deg.generator.generation.FieldSpecFulfiller.lambda$generate$0(FieldSpecFulfiller.java:35)
> 	at com.scottlogic.deg.generator.generation.FieldSpecFulfiller$$Lambda$133/726181440.apply(Unknown Source)
> 	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
> 	at java.util.Iterator.forEachRemaining(Iterator.java:116)
> 	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)
> 	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
> 	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
> 	at java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:312)
> 	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
> 	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
> 	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
> 	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
> 	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
> 	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
> 	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
> 	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
> 	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
> 	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
> 	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
> 	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
> 	at com.scottlogic.deg.generator.generation.combination_strategies.ExhaustiveCombinationStrategy.lambda$permute$0(ExhaustiveCombinationStrategy.java:18)
> 	at com.scottlogic.deg.generator.generation.combination_strategies.ExhaustiveCombinationStrategy$$Lambda$87/737945227.apply(Unknown Source)
> 	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
> 	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
> 	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1382)
> 	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
> 	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
> 	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
> 	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
> 	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
> 	at com.scottlogic.deg.generator.generation.combination_strategies.ExhaustiveCombinationStrategy.permute(ExhaustiveCombinationStrategy.java:19)
> 	at com.scottlogic.deg.generator.generation.databags.MultiplexingDataBagSource.generate(MultiplexingDataBagSource.java:17)
> 	at ✽.the following data should be generated:(C:/DataGenerator/data-engineering-generator/generator/src/test/java/com/scottlogic/deg/generator/cucumber/ExhaustiveCombination.feature:379)
> 
> 
> java.lang.OutOfMemoryError: Java heap space
> 	at java.util.HashMap.resize(HashMap.java:704)
> 	at java.util.HashMap.putVal(HashMap.java:629)
> 	at java.util.HashMap.put(HashMap.java:612)
> 	at com.scottlogic.deg.generator.generation.databags.DataBag$DataBagBuilder.set(DataBag.java:76)
> 	at com.scottlogic.deg.generator.generation.FieldSpecFulfiller.lambda$generate$0(FieldSpecFulfiller.java:42)
> 	at com.scottlogic.deg.generator.generation.FieldSpecFulfiller$$Lambda$133/726181440.apply(Unknown Source)
> 	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
> 	at java.util.Iterator.forEachRemaining(Iterator.java:116)
> 	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)
> 	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
> 	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
> 	at java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:312)
> 	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
> 	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
> 	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
> 	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
> 	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
> 	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
> 	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
> 	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
> 	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
> 	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
> 	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
> 	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
> 	at com.scottlogic.deg.generator.generation.combination_strategies.ExhaustiveCombinationStrategy.lambda$permute$0(ExhaustiveCombinationStrategy.java:18)
> 	at com.scottlogic.deg.generator.generation.combination_strategies.ExhaustiveCombinationStrategy$$Lambda$87/737945227.apply(Unknown Source)
> 	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
> 	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
> 	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1382)
> 	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
> 	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
> 	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
> 	at ✽.the following data should be generated:(C:/DataGenerator/data-engineering-generator/generator/src/test/java/com/scottlogic/deg/generator/cucumber/ExhaustiveCombination.feature:528)

### Environment:
ExhaustiveCombination branch running in full generation strategy & exhaustive combination strategy on IntelliJ.

### Additional Context:
Related to existing performance issues.
