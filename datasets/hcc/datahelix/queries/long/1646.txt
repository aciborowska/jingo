## Bug report

### Description of the bug
Playground demo from documentation is broken. (also broken when tried locally with same profile)
[Broken Demo](https://finos.github.io/datahelix/playground/#ewogICAgImZpZWxkcyI6IFsKICAgICAgeyAibmFtZSI6ICJ1c2VybmFtZSIsICJ0eXBlIjogInN0cmluZyIgfSwKICAgICAgeyAibmFtZSI6ICJmaXJzdE5hbWUiLCAidHlwZSI6ICJmaXJzdG5hbWUiIH0sCiAgICAgIHsgIm5hbWUiOiAiYWdlIiwgInR5cGUiOiAiaW50ZWdlciIgfSwKICAgICAgeyAibmFtZSI6ICJqb2JUaXRsZSIsICJ0eXBlIjogImZha2VyLmpvYi50aXRsZSIsICJudWxsYWJsZSI6IHRydWV9CiAgICBdLAogICAgImNvbnN0cmFpbnRzIjogWwogICAgICAgIHsgImZpZWxkIjogInVzZXJuYW1lIiwgIm1hdGNoaW5nUmVnZXgiOiAiW2Etel17MSwxMH0iIH0sCiAgICAgICAgeyAiZmllbGQiOiAiYWdlIiwgImdyZWF0ZXJUaGFuIjogMCB9LAogICAgICAgIHsgImZpZWxkIjogImFnZSIsICJsZXNzVGhhbiI6IDEwMCB9LAogICAgICAgIHsgImlmIjogICAgeyAiZmllbGQiOiAiYWdlIiwgImxlc3NUaGFuIjogMTcgfSwKICAgICAgICAgICJ0aGVuIjogIHsgImZpZWxkIjogImpvYlRpdGxlIiwgImlzTnVsbCI6IHRydWV9CiAgICAgICAgfQogICAgXQp9)

Error shown is `Unable to resolve #{seniority} directive.`

### Steps to reproduce:
command:
`java -jar generator.jar --max-rows=100 --profile-file=profile.json`

profile:
`{
    "fields": [
      { "name": "username", "type": "string" },
      { "name": "firstName", "type": "firstname" },
      { "name": "age", "type": "integer" },
      { "name": "jobTitle", "type": "faker.job.title", "nullable": true}
    ],
    "constraints": [
        { "field": "username", "matchingRegex": "[a-z]{1,10}" },
        { "field": "age", "greaterThan": 0 },
        { "field": "age", "lessThan": 100 },
        { "if":    { "field": "age", "lessThan": 17 },
          "then":  { "field": "jobTitle", "isNull": true}
        }
    ]
}`

### Expected result:
100 rows of data are generated

### Actual result:
exception thrown:
`java.lang.ClassCastException: java.util.LinkedHashMap cannot be cast to java.lang.String
        at com.github.javafaker.service.FakeValuesService.safeFetch(FakeValuesService.java:168)
        at com.github.javafaker.service.FakeValuesService.resolveExpression(FakeValuesService.java:394)
        at com.github.javafaker.service.FakeValuesService.resolveExpression(FakeValuesService.java:354)
        at com.github.javafaker.service.FakeValuesService.expression(FakeValuesService.java:320)
        at com.github.javafaker.Faker.expression(Faker.java:633)
        at com.scottlogic.datahelix.generator.core.generation.string.generators.FakerGenerator.getFakerValue(FakerGenerator.java:74)
        at com.scottlogic.datahelix.generator.core.generation.string.generators.FakerGenerator.lambda$generateRandomValues$1(FakerGenerator.java:69)
        at java.util.stream.StreamSpliterators$InfiniteSupplyingSpliterator$OfRef.tryAdvance(Unknown Source)
        at java.util.stream.StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0(Unknown Source)
        at java.util.stream.StreamSpliterators$AbstractWrappingSpliterator.fillBuffer(Unknown Source)
        at java.util.stream.StreamSpliterators$AbstractWrappingSpliterator.doAdvance(Unknown Source)
        at java.util.stream.StreamSpliterators$WrappingSpliterator.tryAdvance(Unknown Source)
        at java.util.Spliterators$1Adapter.hasNext(Unknown Source)
        at java.util.Spliterators$1Adapter.next(Unknown Source)
        at com.scottlogic.datahelix.generator.core.generation.fieldvaluesources.NullAppendingValueSource.getNextRandomValue(NullAppendingValueSource.java:49)
        at com.scottlogic.datahelix.generator.core.generation.fieldvaluesources.NullAppendingValueSource.lambda$generateRandomValues$0(NullAppendingValueSource.java:42)
        at java.util.stream.StreamSpliterators$InfiniteSupplyingSpliterator$OfRef.tryAdvance(Unknown Source)
        at java.util.stream.StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0(Unknown Source)
        at java.util.stream.StreamSpliterators$AbstractWrappingSpliterator.fillBuffer(Unknown Source)
        at java.util.stream.StreamSpliterators$AbstractWrappingSpliterator.doAdvance(Unknown Source)
        at java.util.stream.StreamSpliterators$WrappingSpliterator.tryAdvance(Unknown Source)
        at java.util.Spliterators$1Adapter.hasNext(Unknown Source)
        at java.util.stream.MatchOps$1MatchSink.accept(Unknown Source)
        at java.util.ArrayList$ArrayListSpliterator.tryAdvance(Unknown Source)
        at java.util.stream.ReferencePipeline.forEachWithCancel(Unknown Source)
        at java.util.stream.AbstractPipeline.copyIntoWithCancel(Unknown Source)
        at java.util.stream.AbstractPipeline.copyInto(Unknown Source)
        at java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source)
        at java.util.stream.MatchOps$MatchOp.evaluateSequential(Unknown Source)
        at java.util.stream.MatchOps$MatchOp.evaluateSequential(Unknown Source)
        at java.util.stream.AbstractPipeline.evaluate(Unknown Source)
        at java.util.stream.ReferencePipeline.allMatch(Unknown Source)
        at com.scottlogic.datahelix.generator.core.generation.combinationstrategies.MinimalCombinationStrategy.permute(MinimalCombinationStrategy.java:34)
        at com.scottlogic.datahelix.generator.core.generation.databags.RowSpecDataBagGenerator.createDataBags(RowSpecDataBagGenerator.java:45)
        at com.scottlogic.datahelix.generator.core.walker.rowspec.RandomRowSpecDecisionTreeWalker.createDataBag(RandomRowSpecDecisionTreeWalker.java:90)
        at java.util.stream.ReferencePipeline$3$1.accept(Unknown Source)
        at java.util.stream.StreamSpliterators$InfiniteSupplyingSpliterator$OfRef.tryAdvance(Unknown Source)
        at java.util.stream.StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0(Unknown Source)
        at java.util.stream.StreamSpliterators$AbstractWrappingSpliterator.fillBuffer(Unknown Source)
        at java.util.stream.StreamSpliterators$AbstractWrappingSpliterator.doAdvance(Unknown Source)
        at java.util.stream.StreamSpliterators$WrappingSpliterator.tryAdvance(Unknown Source)
        at java.util.Spliterators$1Adapter.hasNext(Unknown Source)
        at java.util.stream.MatchOps$1MatchSink.accept(Unknown Source)
        at java.util.ArrayList$ArrayListSpliterator.tryAdvance(Unknown Source)
        at java.util.stream.ReferencePipeline.forEachWithCancel(Unknown Source)
        at java.util.stream.AbstractPipeline.copyIntoWithCancel(Unknown Source)
        at java.util.stream.AbstractPipeline.copyInto(Unknown Source)
        at java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source)
        at java.util.stream.MatchOps$MatchOp.evaluateSequential(Unknown Source)
        at java.util.stream.MatchOps$MatchOp.evaluateSequential(Unknown Source)
        at java.util.stream.AbstractPipeline.evaluate(Unknown Source)
        at java.util.stream.ReferencePipeline.anyMatch(Unknown Source)
        at com.scottlogic.datahelix.generator.core.generation.combinationstrategies.MinimalCombinationStrategy$InternalIterator.anyHasNext(MinimalCombinationStrategy.java:66)
        at com.scottlogic.datahelix.generator.core.generation.combinationstrategies.MinimalCombinationStrategy$InternalIterator.hasNext(MinimalCombinationStrategy.java:54)
        at java.util.Spliterators$IteratorSpliterator.tryAdvance(Unknown Source)
        at java.util.stream.ReferencePipeline.forEachWithCancel(Unknown Source)
        at java.util.stream.AbstractPipeline.copyIntoWithCancel(Unknown Source)
        at java.util.stream.AbstractPipeline.copyInto(Unknown Source)
        at java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source)
        at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(Unknown Source)
        at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(Unknown Source)
        at java.util.stream.AbstractPipeline.evaluate(Unknown Source)
        at java.util.stream.ReferencePipeline.forEach(Unknown Source)
        at com.scottlogic.datahelix.generator.orchestrator.generate.GenerateExecute.outputData(GenerateExecute.java:58)
        at com.scottlogic.datahelix.generator.orchestrator.generate.GenerateExecute.execute(GenerateExecute.java:51)
        at com.scottlogic.datahelix.generator.orchestrator.generate.GenerateCommandLine.call(GenerateCommandLine.java:59)
        at com.scottlogic.datahelix.generator.orchestrator.generate.GenerateCommandLine.call(GenerateCommandLine.java:45)
        at picocli.CommandLine.executeUserObject(CommandLine.java:1743)
        at picocli.CommandLine.access$900(CommandLine.java:145)
        at picocli.CommandLine$RunLast.handle(CommandLine.java:2101)
        at picocli.CommandLine$RunLast.handle(CommandLine.java:2068)
        at picocli.CommandLine$AbstractParseResultHandler.execute(CommandLine.java:1935)
        at picocli.CommandLine.execute(CommandLine.java:1864)
        at com.scottlogic.datahelix.generator.orchestrator.App.main(App.java:35)`

### Additional context:
- Which version of the generator?
Release 2.1.7
- Which version of Java are you using?
`java version "1.8.0_231"
Java(TM) SE Runtime Environment (build 1.8.0_231-b11)
Java HotSpot(TM) 64-Bit Server VM (build 25.231-b11, mixed mode)`
