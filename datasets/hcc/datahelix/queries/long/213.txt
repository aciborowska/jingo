## Bug Report
The value -9999999999 causes an error when added to an inSet value, where as the value -999999999 (1 character shorter) is accepted with no error.

> Scenario: Running an 'inSet' request that includes a negative number value should be successful
>      Given there is a field foo
>        And foo is in set:
>        | -10         |
>        | -0.0000089  |
>        | -9999999999 |
>      Then the following data should be generated:
>        | foo         |
>        | -10         |
>        | -0.0000089  |
>        | -9999999999 |

### Steps to Reproduce:
1. Run feature file inSet.feature
2. See failed Tests include **Scenario: Running an 'inSet' request that includes a negative number value should be successful**
3. Open error report for failing scenario to see that the expected value of -9999999999 causes an error.

### Expected Result:
Values of this length should not cause an error and be generated successfully.

### Actual Result:

> java.lang.NumberFormatException: For input string: "-9999999999"
> 	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
> 	at java.lang.Integer.parseInt(Integer.java:583)
> 	at java.lang.Integer.parseInt(Integer.java:615)
> 	at com.scottlogic.deg.generator.cucumber.utils.GeneratorTestUtilities.parseInput(GeneratorTestUtilities.java:84)
> 	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
> 	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
> 	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1382)
> 	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
> 	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
> 	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
> 	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
> 	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
> 	at com.scottlogic.deg.generator.cucumber.steps.SetValueStep.getSetValues(SetValueStep.java:33)
> 	at com.scottlogic.deg.generator.cucumber.steps.SetValueStep.whenFieldIsConstrainedBySetValue(SetValueStep.java:21)
> 	at âœ½.foo is in set:(C:/DataGenerator/data-engineering-generator/generator/src/test/java/com/scottlogic/deg/generator/cucumber/InSet.feature:347)

### Environment:
inSetUpdated Branch running on IntelliJ. Run on full data generation strategy.

### Additional Context:
Initial investigation suggests this error is down to us using integer.parse rather than number.parse
