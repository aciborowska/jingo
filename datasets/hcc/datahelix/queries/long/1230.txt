## Bug Report

### Steps to Reproduce:
Using the decision based walker try to generate a single row with a profile which can produce many rows.

(Use flag --max-rows=1 to restrict rows)

Eg.
```
{
  "schemaVersion": "0.1",
  "fields": [
    {
      "name": "A"
    }
  ],
  "rules": [
    {
      "rule": "rule",
      "constraints": [
        {
          "field": "A",
          "is": "ofType",
          "value": "integer"
        },
        {
          "not": {
            "field": "A",
            "is": "null"
          }
        }
      ]
    }
  ]
}
```

### Expected Result:
A single row is produced.

### Actual Result:
The generator hangs. 

Generation started at: 09:21:39

Number of rows | Velocity (rows/sec) | Velocity trend
---------------+---------------------+---------------
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
Exception in thread "main" 0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
java.lang.OutOfMemoryError: GC overhead limit exceeded
	at java.math.BigInteger.subtract(BigInteger.java:1403)
	at java.math.BigInteger.add(BigInteger.java:1264)
	at java.math.BigDecimal.add(BigDecimal.java:4482)
	at java.math.BigDecimal.add(BigDecimal.java:1298)
	at com.scottlogic.deg.generator.generation.fieldvaluesources.RealNumberFieldValueSource$RealNumberIterator.next(RealNumberFieldValueSource.java:171)
	at com.scottlogic.deg.generator.generation.fieldvaluesources.RealNumberFieldValueSource$RealNumberIterator.next(RealNumberFieldValueSource.java:142)
	at com.scottlogic.deg.generator.utils.ConcatenatingIterable$InternalIterator.next(ConcatenatingIterable.java:70)
	at java.util.Iterator.forEachRemaining(Iterator.java:116)
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:312)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at com.scottlogic.deg.generator.generation.combinationstrategies.ExhaustiveCombinationStrategy.lambda$permute$0(ExhaustiveCombinationStrategy.java:35)
	at com.scottlogic.deg.generator.generation.combinationstrategies.ExhaustiveCombinationStrategy$$Lambda$153/1508038883.apply(Unknown Source)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1382)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at com.scottlogic.deg.generator.generation.combinationstrategies.ExhaustiveCombinationStrategy.permute(ExhaustiveCombinationStrategy.java:36)
	at com.scottlogic.deg.generator.generation.databags.RowSpecDataBagGenerator.createDataBags(RowSpecDataBagGenerator.java:47)
	at com.scottlogic.deg.generator.walker.rowspec.RowSpecDecisionTreeWalker$$Lambda$168/176342513.apply(Unknown Source)
	at com.scottlogic.deg.common.util.FlatMappingSpliterator.lambda$forEachRemaining$0(FlatMappingSpliterator.java:91)
	at com.scottlogic.deg.common.util.FlatMappingSpliterator$$Lambda$142/970419381.accept(Unknown Source)
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -
0              | 0                   | -

Process finished with exit code 1

### Environment:


### Additional Context:

Using the flag 
```
-w=REDUCTIVE
```
Correct behaviour can be seen

