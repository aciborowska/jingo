With reference to: #3133, #2117, #2833, #4143 

While the fix for those issues no longer wrap the InterruptedException (if thrown), Hazelcast does not correctly interrupt threads that are blocked waiting on IQueue.take().  See the example unit test on #4143.

While interrupting the waiting threads (or shutting down their ExecutorService) fires the InterruptedException, Hazelcast code catches that exception and sets a flag internally, but then goes back to waiting.  This means that thread pools cannot be shutdown thus hanging on to resources that we want to free up.  It also means a series of errors in the logs when we shut the node down since every waiting thread receives a HazelcastInstanceNotActiveException during shutdown.

Tested on 3.4.2 and latest code in Github for 3.4.3 branch (as of 6/15/2015).

EDIT: Also tested on 3.5.0
