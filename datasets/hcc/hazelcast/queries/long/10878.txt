Hazelcast 3.6.4, Apache Http client 4.5.3.

I have code that uses the org.apache.http.client.HttpClient to talk to Hazelcast over HTTP. The code fails with the error message:
```
170704 15:35:01.569:I 38 [com.hazelcast.nio.tcp.SocketAcceptorThread.null] [10.5.0.80]:51565 [dev] [3.6.4] Accepting socket connection from /127.0.0.1:59805
170704 15:35:01.580:I 42 [com.hazelcast.nio.tcp.TcpIpConnectionManager.null] [10.5.0.80]:51565 [dev] [3.6.4] Established socket connection between /127.0.0.1:51565 and /127.0.0.1:59805
170704 15:35:01.596:I 42 [com.hazelcast.partition.InternalPartitionService.null] [10.5.0.80]:51565 [dev] [3.6.4] Initializing cluster partition table arrangement...
170704 15:35:02.112:I 31 [com.hazelcast.nio.tcp.TcpIpConnection.null] [10.5.0.80]:51565 [dev] [3.6.4] Connection [/127.0.0.1:59805] lost. Reason: java.nio.BufferOverflowException[null]
```

Here's the code:
```
  public void put(String key, InputStream in) throws IOException {
    HttpClient client = clientFactory.build();
    HttpPut put = new HttpPut(baseUrl + "/" + key);
    put.setEntity(new InputStreamEntity(in));
    put.setHeader("Content-Type", "application/octet-stream");
    client.execute(
        put,
        (response) -> {
          int statusCode = response.getStatusLine().getStatusCode();
          if (HttpStatus.SC_OK != statusCode
              && HttpStatus.SC_ACCEPTED != statusCode
              && HttpStatus.SC_CREATED != statusCode
              && HttpStatus.SC_NO_CONTENT != statusCode) {
            throw new IOException("PUT failed with status code " + statusCode);
          }
          return null;
        });
  }
```

When I change the fourth line like this, it works:
```
    put.setEntity(new ByteArrayEntity(ByteStreams.toByteArray(in)));
```

My guess is that Hazelcast doesn't handle HTTP put requests with chunked encoding properly.