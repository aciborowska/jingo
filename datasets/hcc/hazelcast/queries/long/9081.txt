If networking in the hazelcast.xml is set as,

```
    <network>
        <port>7000</port>
        <interfaces>
            <interface>127.0.0.1</interface>
        </interfaces>
    </network>
```

and there is only 127.0.0.1 available, on Hazelcast 3.7.2 the following exception appears

```
SEVERE: [127.0.0.1]:7000 [dev-configured-from-xml] [3.7.1] Can't assign requested address

java.net.SocketException: Can't assign requested address

at java.net.PlainDatagramSocketImpl.join(Native Method)

at java.net.AbstractPlainDatagramSocketImpl.join(AbstractPlainDatagramSocketImpl.java:178)

at java.net.MulticastSocket.joinGroup(MulticastSocket.java:323)

at com.hazelcast.internal.cluster.impl.MulticastService.createMulticastService(MulticastService.java:110)

at com.hazelcast.instance.Node.<init>(Node.java:191)

at com.hazelcast.instance.HazelcastInstanceImpl.createNode(HazelcastInstanceImpl.java:155)

at com.hazelcast.instance.HazelcastInstanceImpl.<init>(HazelcastInstanceImpl.java:126)

at com.hazelcast.instance.HazelcastInstanceFactory.constructHazelcastInstance(HazelcastInstanceFactory.java:218)

at com.hazelcast.instance.HazelcastInstanceFactory.newHazelcastInstance(HazelcastInstanceFactory.java:176)

at com.hazelcast.instance.HazelcastInstanceFactory.newHazelcastInstance(HazelcastInstanceFactory.java:126)

at com.hazelcast.core.Hazelcast.newHazelcastInstance(Hazelcast.java:87)

at XMLMain.main(XMLMain.java:7)
```

although the server does actually start.

Multicast without network isn't a real scenario, but it's the kind of thing you might use when doing development while travelling, and the exception is misleading.

It may IPV6 related, as using `System.setProperty("java.net.preferIPv4Stack", "true");` stops it occuring.
