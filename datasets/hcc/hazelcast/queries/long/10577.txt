When the protocol is determined on the server for an incoming connection, the server triggers the correct outbound handler to be created based on the received protocol. The problem is that the creation of the outbound handler is synchronous and blocks the inbound io thread. If the outbound io thread is busy, the inbound io thread will block for up to 3 seconds and then times out.

So first you get a blocked non blocking IO thread; which can cause severe latency spikes. Especially when the system is busy and e.g. multiple clients/members connecting, then this 3 second pause can happen continuously; eventually leading to cluster stability problems.

But the other problem is that due to the timeout, object invariants can be violated. For example TextCommandDecoder relies for the TextCommandEncoder to be created before, so it can access the dependency. But if there is a timeout, the TextCommandEncoder is not yet created ; so the connection is set up with a null TextCommandEncoder. 