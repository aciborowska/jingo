When a predicate with null value is applied to a map with unordered index, it operates correctly but throws exception because of casting. You can reproduce it with the following test:

``` java
@Test(timeout = 1000 * 60)
public void testPredicateEqualityWithUnorderedIndex_whenPredicateValueIsNull() {
        HazelcastInstance instance = createHazelcastInstance();
        IMap<String, SampleObjects.Employee> map = instance.getMap("testPredicateEqualityWithUnorderedIndex");
        map.addIndex("name", false);
        map.addIndex("createDate", false);

        int notNullValueCount = 4;
        for (int i = 0; i < notNullValueCount; i++) {
            Employee v = new Employee();
            v.setName("name" + i);
            v.setCreateDate(new Date());
            map.put("" + i, v);
        }
        map.put(""+ notNullValueCount, new Employee());

        Predicate nullNamePredicate = Predicates.equal("name", null);
        Collection<Employee> nullNameValues = map.values(nullNamePredicate);
        Predicate notNullNamePredicate = Predicates.notEqual("name", null);
        Collection<Employee> notNullNameValues = map.values(notNullNamePredicate);
        Predicate nullCreateDatePredicate = Predicates.equal("createDate", null);
        Collection<Employee> nullCreateDateValues = map.values(nullCreateDatePredicate);
        Predicate notNullCreateDatePredicate = Predicates.notEqual("createDate", null);
        Collection<Employee> notNullCreateDateValues = map.values(notNullCreateDatePredicate);

        assertEquals(1, nullNameValues.size());
        assertEquals(notNullValueCount, notNullNameValues.size());
        assertEquals(1, nullCreateDateValues.size());
        assertEquals(notNullValueCount, notNullCreateDateValues.size());
}
```
