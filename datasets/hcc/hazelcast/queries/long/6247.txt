When an InvocationFuture processes a  thrown exception e.g one from the operation.run, it will rewrite the stacktrace so that both local and remote stacktraces are integrated. 

```
 private Object resolveApplicationResponse(Object unresolvedResponse) {
        ...

        if (response instanceof Throwable) {
            Throwable throwable = ((Throwable) response);
            if (invocation.remote) {
                fixRemoteStackTrace((Throwable) response, currentThread().getStackTrace());
            }
            return throwable;
        }

        return response;
    }
```

The problem is that this exception-instance can be shared between multiple threads since the future can be shared between multiple threads. So you have multiple threads modifying a stacktrace of the same exception instance.

Solution: clone the exception first.

Edit: for a remote thrown exception this probably isn't an issue since each thread will get a Data and deserialize that data. Not completely sure about this. But for local exception is could certainly be an issue.
