A client can't ask the cluster for distributed objects using: 

client.getDistributedObjects()

Example

```
public class FullMember {
public static void main(String[] args) throws Exception {
    HazelcastInstance hz = Hazelcast.newHazelcastInstance();
    BlockingQueue<String> queue = hz.getQueue("queue");
   hz.getMap("map");
    hz.getSemaphore("s");
}
}

public class Client {
public static void main(String[] args) throws Exception {
    ClientConfig clientConfig = new ClientConfig().addAddress("127.0.0.1");
    HazelcastInstance client = HazelcastClient.newHazelcastClient(clientConfig);

    System.out.println("distributed object.size:"+client.getDistributedObjects().size());
    for(DistributedObject o : client.getDistributedObjects()){
        System.out.println(o.getClass()+" "+o.getName());
    }
 System.exit(0);
}
}
```

I think it is caused that the client isn't updated with all the data-structures. When it returns the list of proxies:

```
 @Override
 public Collection<DistributedObject> getDistributedObjects() {
    Collection<DistributedObject> objects = new LinkedList<DistributedObject>();
    for (ClientProxy clientProxy : proxyManager.getProxies()) {
        objects.add(clientProxy);
    }
    return objects;
}
```

The proxyManager.getProxies isn't updated. I think a bug was resolved this week regarding automatic proxy creation: @mdogan @gurbuzali 

Afaik the best thing to do is just to ask the cluster for all data-structures instead of trying to know it all locally.
