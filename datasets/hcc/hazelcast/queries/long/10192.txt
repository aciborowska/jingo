See also https://github.com/hazelcast/hazelcast/issues/6520

We're seeing this issue again, using Hazelcast 3.5.5. We have a debugging utility that retrieves all LockResource objects stored on a node then displays some information about each LockResource. When the lock in question - named LOCKXXX - is stuck, the utility displays this information about the lock:

```
"namespace":"com.hazelcast.concurrent.lock.InternalLockNamespace@ce6cf218","key":"LOCKXXX","owner":null,"threadId":938,"count":1,"acquireTime":"Tue Mar 28 18:44:40 MDT 2017","expiration":"Sun Aug 17 15:12:55 MDT 292278994"
```

The "owner" is determined as follows:

```
LockResource lockResource = ...;
String owner = getMember(lockResource.getOwner());

private String getMember(String memberUuid)
{
  for (Member member : hazelcastInstance.getCluster().getMembers())
  {
      if (member.getUuid().equals(memberUuid))
      {
        return member.toString();
      }
      return null;
  }
}
```

How can a lock be owned by a member that is no longer part of the cluster? When the member left the cluster, Hazelcast should have automatically release the lock.

Also notice that everywhere our code calls ILock.lock() we have a finally block that calls unlock().

Any suggestions?

Thank you in advance.
