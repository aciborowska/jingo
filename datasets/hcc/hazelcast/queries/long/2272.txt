Run it a few times. One of the times it will not complete. Perhaps deadlock. Perhaps a signal gets lost.

```
package com.hazelcast.concurrent.lock;

import com.hazelcast.core.Hazelcast;
import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.core.ICondition;
import com.hazelcast.core.ILock;
import com.hazelcast.test.HazelcastParallelClassRunner;
import com.hazelcast.test.HazelcastTestSupport;
import com.hazelcast.test.annotation.SlowTest;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import org.junit.runner.RunWith;


@RunWith(HazelcastParallelClassRunner.class) 
@Category(SlowTest.class)
public class ConditionStressTest extends HazelcastTestSupport {

private static volatile Object object;
public static final int ITERATIONS = 1000000;
public static final int PRODUCER_COUNT =2;
public static final int CONSUMER_COUNT =2;

@Test
public void test() {
    HazelcastInstance hz = Hazelcast.newHazelcastInstance();
    //Hazelcast.newHazelcastInstance();
    ILock lock = hz.getLock(randomString());
    ICondition condition = lock.newCondition(randomString());

    ConsumerThread[] consumers = new ConsumerThread[CONSUMER_COUNT];
    for(int k=0;k<consumers.length;k++){
        ConsumerThread thread = new ConsumerThread(k, lock, condition);
        thread.start();
        consumers[k]=thread;
    }

    ProducerThread[] producers = new ProducerThread[PRODUCER_COUNT];
    for(int k=0;k<producers.length;k++){
        ProducerThread thread = new ProducerThread(k, lock, condition);
        thread.start();
        producers[k]=thread;
    }

    assertJoinable(600,producers);
    assertJoinable(600,consumers);
}

class ProducerThread extends Thread {
   private final ILock lock;
    private final ICondition condition;

    ProducerThread(int id, ILock lock, ICondition condition) {
        super("ProducerThread-" + id);
        this.lock = lock;
        this.condition = condition;
    }

    public void run() {
        try {
            for (int k = 0; k < ITERATIONS; k++) {
                doRun();

                if (k % 100 == 0) {
                    System.out.println(getName() + " is at: " + k);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void doRun() throws InterruptedException {
        lock.lock();

        try {
            while (object != null) {
               condition.await();
            }
            object = "";
            condition.signalAll();
        } finally {
            lock.unlock();
        }
    }
}

class ConsumerThread extends Thread {
    private final ILock lock;
    private final ICondition condition;

    ConsumerThread(int id, ILock lock, ICondition condition) {
        super("ConsumerThread-" + id);
        this.lock = lock;
        this.condition = condition;
    }

    public void run() {
        try {
            for (int k = 0; k < ITERATIONS; k++) {
                doRun();
                if (k % 100 == 0) {
                    System.out.println(getName() + " is at: " + k);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void doRun() throws InterruptedException {
        lock.lock();

        try {
            while (object == null) {
                condition.await();
            }
            object = null;
            condition.signalAll();
        } finally {
            lock.unlock();
        }
    }
}
}
```
