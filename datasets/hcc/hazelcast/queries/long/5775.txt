While `IMap.get(Object key)` is intercepted by assigned to the specified map interceptor as expected, call to `IMap.getAll(Set<K> keys)` bypasses it.

Behavior is actual for version 3.3 and higher.  In 3.2 everything intercepts as it has to be.

``` java
public static void main(String[] args) throws Exception {

    HazelcastInstance hz = Hazelcast.newHazelcastInstance();

    IMap<String, String> interceptedMap = hz.getMap("testMap");

    interceptedMap.addInterceptor(new MapInterceptor() {

        /**
         * 
         */
        private static final long serialVersionUID = 43563494242352341L;

        @Override
        public Object interceptGet(Object value) {
            System.out.println("Intercept get " + value);
            return null;
        }

        @Override
        public void afterGet(Object value) {
            System.out.println("After get " + value);

        }

        @Override
        public Object interceptPut(Object oldValue, Object newValue) {
            return null;
        }

        @Override
        public void afterPut(Object value) {

        }

        @Override
        public Object interceptRemove(Object removedValue) {
            // TODO Auto-generated method stub
            return null;
        }

        @Override
        public void afterRemove(Object value) {
            // TODO Auto-generated method stub

        }

    });


    interceptedMap.put("testKey1", "value1");
    interceptedMap.put("testKey2", "value2");


    Set<String> setOfIds = new HashSet<>();
    setOfIds.add("testKey1");
    setOfIds.add("testKey2");

    // Interceptor calls will be magically skipped in version 3.3 and higher 
    Map<String, String> res = interceptedMap.getAll(setOfIds);


}

```
