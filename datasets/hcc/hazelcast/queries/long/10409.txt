Using Hazelcast 3.7.5 and hazelcast-spring 3.8. I am trying to execute a callable object using hazelcast executors. The callable object  is spring generated bean and also have a spring advice around it. The advice access one of IMap to access some data.

When i run this in hazelcast executor then advice code start executing by hazelcast partition threads. and when advice tries to access Imap then it gives below exception: - 

**_IMP: when i turn off the spring advice (AOP) then it uses Hazelcast shared cache threads (hz._hzInstance_1_hz-workflow-engine.cached.thread-6) to execute the callable object. Which works smoothly without any issue. (is this means that only AOP advice will run using hazelcast partition threads? which is causing issue)_**


Please suggest.

```
**java.lang.IllegalThreadStateException: Thread[hz._hzInstance_1_hz-workflow-engine.partition-operation.thread-6,5,_hzInstance_1_hz-workflow-engine] cannot make remote call: com.hazelcast.map.impl.operation.PutOperation{serviceName='hz:impl:mapService', identityHash=1097748907, partitionId=196, replicaIndex=0, callId=0, invocationTime=-1 (1970-01-01 05:29:59.999), waitTimeout=-1, callTimeout=60000, name=methodExecutionKeyIdMap}**
	at com.hazelcast.spi.impl.operationservice.impl.Invocation.invoke0(Invocation.java:230)
	at com.hazelcast.spi.impl.operationservice.impl.Invocation.invoke(Invocation.java:207)
	at com.hazelcast.spi.impl.operationservice.impl.InvocationBuilderImpl.invoke(InvocationBuilderImpl.java:59)
	at com.hazelcast.map.impl.proxy.MapProxySupport.invokeOperation(MapProxySupport.java:376)
	at com.hazelcast.map.impl.proxy.MapProxySupport.putInternal(MapProxySupport.java:348)
	at com.hazelcast.map.impl.proxy.MapProxyImpl.put(MapProxyImpl.java:109)
	at com.hazelcast.map.impl.proxy.MapProxyImpl.put(MapProxyImpl.java:99)
	at com.markit.wfengine.boot.WFEngineExecutionAdvice.putExecutionKey(WFEngineExecutionAdvice.java:106)
	at com.markit.wfengine.boot.WFEngineExecutionAdvice.runAdvice(WFEngineExecutionAdvice.java:92)
	at com.markit.wfengine.boot.WFEngineExecutionAdvice.logExecutionState(WFEngineExecutionAdvice.java:69)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:629)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:618)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:655)
	at com.markit.wfengine.executors.TaskCallable$$EnhancerBySpringCGLIB$$513bd12b.getId(<generated>)
	at com.markit.wfengine.boot.WFEngineExecutionAdvice.populateKeyFromTarget(WFEngineExecutionAdvice.java:148)
	at com.markit.wfengine.boot.WFEngineExecutionAdvice.runAdvice(WFEngineExecutionAdvice.java:85)
	at com.markit.wfengine.boot.WFEngineExecutionAdvice.logExecutionState(WFEngineExecutionAdvice.java:69)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:629)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:618)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:655)
	at com.markit.wfengine.executors.TaskCallable$$EnhancerBySpringCGLIB$$190890d3.toString(<generated>)
	at java.lang.String.valueOf(String.java:2982)
	at com.hazelcast.executor.impl.DistributedExecutorService$CallableProcessor.<init>(DistributedExecutorService.java:228)
	at com.hazelcast.executor.impl.DistributedExecutorService$CallableProcessor.<init>(DistributedExecutorService.java:212)
	at com.hazelcast.executor.impl.DistributedExecutorService.execute(DistributedExecutorService.java:103)
	at com.hazelcast.executor.impl.operations.AbstractCallableTaskOperation.run(AbstractCallableTaskOperation.java:96)
	at com.hazelcast.spi.impl.operationservice.impl.OperationRunnerImpl.run(OperationRunnerImpl.java:181)
	at com.hazelcast.spi.impl.operationexecutor.impl.OperationThread.process(OperationThread.java:122)
	at com.hazelcast.spi.impl.operationexecutor.impl.OperationThread.run(OperationThread.java:102)
```

Below are some of the Configuration i am using: - 
Spring Hazelcast XML
```
<bean id="hazelCastServerInstance" class="com.hazelcast.core.Hazelcast" factory-method="newHazelcastInstance">
		<constructor-arg>
			<bean id="LoadBalancerConfig" class="com.hazelcast.config.Config">
				<property name="properties" value="#{propertyPlaceholderConfigurer.getComponentProperties('HAZELCAST')}" />
				
				<property name="managedContext">
					<bean id="springmangedContext" class="com.hazelcast.spring.context.SpringManagedContext"/>
				</property>
<property name="executorConfigs">
					<map>
						<entry>
							<key><value>${hazelcast.group.name}_TASK_CALLABLE_POOL</value></key>
							<bean id="ComputeGridExecutorConfig" class="com.hazelcast.config.ExecutorConfig">
								<property name="poolSize"><value>${thread.pool.wf.task.callable}</value></property>
								<property name="name"><value>${hazelcast.group.name}_TASK_CALLABLE_POOL</value></property>
							</bean>
						</entry>
					</map>
				</property>
<property name="mapConfigs">
					<map>
						<entry>
							<key><value>${hazelcast.group.name}_methodExecutionKeyIdMap</value>
							</key>
							<bean id="methodExecutionKeyIdMap" class="com.hazelcast.config.MapConfig">
								<property name="backupCount" value="${hazelcast.backup.count}" />...

<hz:executorService id="taskCallablePool" name="${hazelcast.group.name}_TASK_CALLABLE_POOL" instance-ref="hazelCastServerInstance"/>
```


Defining Executor service
```
@Autowired
    @Qualifier("taskCallablePool")
    private IExecutorService taskCallablePool;

```
Sending Task to executor
```
TaskCallable task = (TaskCallable) appContext.getBean("TaskCallable", taskCallParams, taskConfig, eventType);
taskCallablePool.submit(task);
```

