Issue reported in google group. Following content is copied from https://groups.google.com/d/msg/hazelcast/luiFu_WN_Io/eGFKM6HmAwAJ

----
I've been doing reliability testing and found a leak with 3.8, also present with 3.8.1. The specific case I was testing was what happens in a Hazelcast client if the server is not available for a long time and the client keeps trying to connect. I had been running it for days with connections every few seconds and eventually it crashed with the heap full. I investigated the reason and found it to be as below.

In short, for every connection, there are 3 instances of java.lang.ThreadGroup that stay around. They belong to Hazelcast (their name is hz_client_NUMBER). 

Further testing showed the leak occurs with successful connections as well.

A project to reproduce the problem in its simplest form, with instructions and screenshots from the profiler, is available at https://github.com/jl2008/hazelcast-client-test-threadgroup

The client is shut down in all cases, so I didn't expect a leak:
```
HazelcastInstance client = null;
try {
   client = HazelcastClient.newHazelcastClient(hazelcastClientConfig); //has to be inside try, the constructor throws an exception if the cluster is unavailable
} catch (Exception e) {
   //...
} finally {
   if (client != null) {
      client.shutdown();
   }
}
```
Let me know if I've done something wrong or I can assist with anything else,
JL