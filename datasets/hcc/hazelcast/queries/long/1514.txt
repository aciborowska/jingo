I just want to use hazelcast like memcached, so the hazelcast server node do not contain any other jar.

First, it works fine. Several hours later, throw ClassNotFoundException.

```
com.hazelcast.nio.serialization.HazelcastSerializationException: java.lang.ClassNotFoundException: com.test.xxx
        at com.hazelcast.nio.serialization.DefaultSerializers$ObjectSerializer.read(DefaultSerializers.java:190)
        at com.hazelcast.nio.serialization.StreamSerializerAdapter.read(StreamSerializerAdapter.java:59)
        at com.hazelcast.nio.serialization.SerializationServiceImpl.toObject(SerializationServiceImpl.java:218)
        at com.hazelcast.spi.impl.NodeEngineImpl.toObject(NodeEngineImpl.java:156)
        at com.hazelcast.map.MapService.toObject(MapService.java:651)
        at com.hazelcast.map.operation.MergeOperation.run(MergeOperation.java:48)
        at com.hazelcast.spi.impl.OperationServiceImpl.doRunOperation(OperationServiceImpl.java:274)
        at com.hazelcast.spi.impl.OperationServiceImpl.access$800(OperationServiceImpl.java:52)
        at com.hazelcast.spi.impl.OperationServiceImpl$LocalOperationProcessor.run(OperationServiceImpl.java:710)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
        at java.lang.Thread.run(Thread.java:722)
```

com.hazelcast.map.operation.MergeOperation

```
public void run() {
    SimpleEntryView entryView = (SimpleEntryView) mergingEntry;
    entryView.setKey(mapService.toObject(mergingEntry.getKey()));
    entryView.setValue(mapService.toObject(mergingEntry.getValue()));
    merged = recordStore.merge(dataKey, mergingEntry, mergePolicy);
    if (merged) {
        Record record = recordStore.getRecord(dataKey);
        if (record != null)
            dataValue = mapService.toData(record.getValue());
    }
}
```

I think that mapService.toObject is not necessary.
