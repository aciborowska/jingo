Hi,

I discovered a problem when using a class which has a non-static inner class as a map entry value. Upon deserialization the pointer of the inner class to its outer class is not correctly restored.

This screenshot here shows a my debug view:
![vars](https://f.cloud.github.com/assets/3501420/1634408/854f18ce-5799-11e3-966d-f19ed2cd089d.png)

To reproduce, you can use this example:

```
package com.nm.test;

import java.io.Serializable;

public class Foo implements Serializable {

    private static final long serialVersionUID = 1L;

    public Bar bar;

    public Foo() {
        this.bar = new Bar();
    }

    // ------------------------------------------------------------ inner class

    public class Bar implements Serializable {

        private static final long serialVersionUID = 2L;

        public String sayHello() {
            return "Hello " + Foo.this;
        }

    }

}
```

```
package com.nm.test;

import com.hazelcast.config.Config;
import com.hazelcast.config.XmlConfigBuilder;
import com.hazelcast.core.Hazelcast;
import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.core.IMap;
import org.apache.log4j.PropertyConfigurator;
import java.io.*;

public class Main {

    public static void main(String[] args) throws Exception {

        // setup logging
        PropertyConfigurator.configure(new FileInputStream("log4j.properties"));

        // create instance
        IMap<String, Foo> foos = null;
        {
            Config config = new XmlConfigBuilder().build();
            config.setProperty("hazelcast.logging.type", "log4j");
            HazelcastInstance hcInstance = Hazelcast.newHazelcastInstance(config);
            foos = hcInstance.getMap("foos");
        }

        // create foo
        Foo fooOrg = new Foo();
        System.out.println("Original:  " + fooOrg + ", " + fooOrg.bar.sayHello());

        // clone using Java serialization
        Foo fooJava = null;
        {
            ByteArrayOutputStream baos = new ByteArrayOutputStream(8192);
            ObjectOutputStream oos = new ObjectOutputStream(baos);
            oos.writeObject(fooOrg);
            oos.close();
            byte[] buf = baos.toByteArray();
            ByteArrayInputStream bais = new ByteArrayInputStream(buf);
            ObjectInputStream ois = new ObjectInputStream(bais);
            fooJava = (Foo) ois.readObject();
        }
        System.out.println("Java:      " + fooJava + ", " + fooJava.bar.sayHello());

        // clone using map
        Foo fooHz = null;
        {
            foos.put("fooHz", fooOrg);
            fooHz = foos.get("fooHz");
        }
        System.out.println("Hazelcast: " + fooHz + ", " + fooHz.bar.sayHello());

        System.out.println("done.");
    }

}
```

The output of this little app also shows the problem:

Original:  com.nm.test.Foo@3eae3da8, Hello com.nm.test.Foo@3eae3da8
Java:      com.nm.test.Foo@6c484c6b, Hello com.nm.test.Foo@6c484c6b
Hazelcast: com.nm.test.Foo@7291b9b0, Hello com.nm.test.Foo@3d360c93

Here left and right should always be the same - which is not the case for Hazelcast.

Best,
Lukas
