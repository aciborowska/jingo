After registering an EntryListener to a Map and adding an entry (no matters if it's added with or without a transaction), If the entry is later updated with a transaction the EntryEvent passed as an argument to the callback has a null value when doing a getOldValue().

For example:

IMap<String, Object> map = instance.getMap("TestMap");
map.addEntryListener(new EntryListener<String, Object>() {

```
@Override
public void entryUpdated(EntryEvent<String, Object> event) {
    System.out.println("UPDATED: " + event);
}

@Override
public void entryRemoved(EntryEvent<String, Object> event) {
    System.out.println("REMOVED: " + event);
}

@Override
public void entryEvicted(EntryEvent<String, Object> event) {
    System.out.println("EVICTED: " + event);
}

@Override
public void entryAdded(EntryEvent<String, Object> event) {
    System.out.println("ADDED: " + event);
}
```

}, true);

map.put("a", 0);
map.put("a", 1);

TransactionContext context = instance.newTransactionContext();
context.beginTransaction();
TransactionalMap<String, Object> tMap = context.getMap("TestMap");
map.put("a", 2);
context.commitTransaction();

The Output is:

ADDED: EntryEvent {TestMap} key=a, oldValue=null, value=0, event=ADDED, by Member [172.30.143.173]:5701
UPDATED: EntryEvent {TestMap} key=a, oldValue=0, value=1, event=UPDATED, by Member [172.30.143.173]:5701
UPDATED: EntryEvent {TestMap} key=a, oldValue=null, value=2, event=UPDATED, by Member [172.30.143.173]:5701
