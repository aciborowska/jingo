For me, this is a continuation of problem experienced when using hazelcast-wm with deferredWrite=true.

After #5242 was resolved with #5537 in release 3.5.1, I downloaded it and tested, and found another bug introduced in #5471 (https://github.com/bilalyasar/hazelcast/commit/98850a51c610de0259cede1eea5f1054af4b0b7f#diff-d770d63698a9e0e449d0d8ad43f24943), and still break my use case.

In the latest version of HazelcastHttpSession.getAttribute(), when I call this method on an attribute for the first time (it doesn't exist yet in localCache), the code does not put a new entry into localCache. The result is: If I don't call setAttribute explicitly to put an attribute into localCache, calling getAttribute will never establish localCache and will always get the value from cluster. This logic is fine when deferredWrite=false, but causes unexpected behavior when deferredWrite=true.

In comparison, 3.4.2 release code have logic to put a new CacheEntry into localCache when deferredWrite=true in method getAttribute().

Please kindly look into this issue.
