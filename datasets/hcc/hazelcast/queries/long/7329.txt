When hazelcast.jmx option is enabled MBeans are created for every Hazelcast object but are never removed.
When destroying Hazelcast object with destroy() method, DistributedObjectEvent::getDistributedObject() throws DistributedObjectDestroyedException and stops the process of unregistering MBeans. MBeans are left forever causin memory leaks and can be seen in visualvm. 
![mbeans_count](https://cloud.githubusercontent.com/assets/3244348/12334568/5172128e-bb03-11e5-9d42-a1d77e2f6818.png)
Also there are eventually strange numbers in totalAddedItemCount (should be 100)

The code I've run:

```
public static void main(String [] args) throws InterruptedException {

    Config config = new Config();
    HazelcastInstance instance = Hazelcast.newHazelcastInstance(config);

    for (int i = 0; i < 100000; i++) {
        IQueue<String> q = instance.getQueue(String.format("queue_%08d", i));
        for(int j = 0; j < 100; j++) {
            q.offer("test_" + j);
        }
        q.destroy();
    }
}
```

The heap without hazelcast.jmx=true:
![heap_nojmx](https://cloud.githubusercontent.com/assets/3244348/12334402/8b234aa8-bb02-11e5-86bd-d194b80d7179.png)

The heap with hazelcast.jmx=true:
![heap_jmx_](https://cloud.githubusercontent.com/assets/3244348/12334694/07d50b8a-bb04-11e5-8b70-63f11634173c.png)
