The implementation of `LockProxy#lockInterruptibly` (inherited from the `java.util.concurrent.locks.Lock` interface) is just to call the `lock` method in the same class. However, this breaks the method contract stated in the `Lock#lockInterruptibly` javadoc, which states that the method should be interruptible (and therefore can throw `InterruptedException`). 

Simply delegating to `lock` like this may work superficially in most cases until you actually rely on the interrupt behaviour. Code that is specifically calling `lockInterruptibly` is most likely doing so for a good reason. If the calling code just wanted `lock`, then that's what they would have called.
