When using EntryProcessor and index on a field the EntryProcessor uses I get wrong data when executing a Predicate. Here is the code:

  @Test
  public void issue() throws Exception {
    Config config = new Config();
    MapConfig testMapConfig = config.getMapConfig("testMap");
    testMapConfig.setInMemoryFormat(InMemoryFormat.OBJECT);
    testMapConfig.getMapIndexConfigs().add(new MapIndexConfig("lastValue", true));
    HazelcastInstance instance = Hazelcast.newHazelcastInstance(config);

    try {
      IMap<Object, Object> testMap = instance.getMap("testMap");

      testMap.set(1L, new MyData(10));

      testMap.executeOnKey(1L, new MyProcessor(15));

      Predicate betweenPredicate = Predicates.between("lastValue", 0, 11);
      Collection<Object> values = testMap.values(betweenPredicate);
      Assert.assertEquals(0, values.size());
    } finally {
      instance.shutdown();
    }
  }

Here is the EntryProcessor:

  static class MyProcessor extends AbstractEntryProcessor<Long, MyData> {
    private long newValue;

    public MyProcessor(long newValue) {
      this.newValue = newValue;
    }

    @Override
    public Object process(Map.Entry<Long, MyData> entry) {
      MyData data = entry.getValue();
      data.setLastValue(newValue);
      entry.setValue(data);
      return null;
    }
  }

I expect the assertion to work, but it fails I get 1 record. If I change OBJECT to BINARY or if I comment the line "testMapConfig.getMapIndexConfigs().add(new MapIndexConfig("lastValue", true));" then it works.

Any ideas? I am using Hazelcast 3.7.5.

Thanks in advance.
