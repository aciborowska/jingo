In version 2.0.2 and in the current 2.1-SNAPSHOT listeners don't get called when a queue is changed within a transaction:

``` java
import com.hazelcast.core.*;

public class Listeners {
    public static void main(String[] args) throws InterruptedException {
        final IQueue<String> testQueue = Hazelcast.getQueue("testQueue");
        testQueue.addItemListener(new ItemListener<String>() {
            @Override public void itemAdded(ItemEvent<String> item) {System.out.println("Added " + item.getItem());}
            @Override public void itemRemoved(ItemEvent<String> item) {}
        }, true);


        Transaction tx = Hazelcast.getTransaction();

        tx.begin();
        System.out.println("Tx begun");
        testQueue.put("tx Hello");
        testQueue.put("tx World");

        System.out.println("Going to commit");
        tx.commit();

        testQueue.put("Hello");
        testQueue.put("World");

        Hazelcast.shutdownAll();
    }
}
```

In 1.9.4.8

``` java
import com.hazelcast.core.*;

public class Listeners {
    public static void main(String[] args) throws InterruptedException {
        final IQueue<String> testQueue = Hazelcast.getQueue("testQueue");
        testQueue.addItemListener(new ItemListener<String>() {
            @Override public void itemAdded(String item) {System.out.println("Added " + item); }
            @Override public void itemRemoved(String item) {}
        }, true);


        Transaction tx = Hazelcast.getTransaction();

        tx.begin();
        System.out.println("Tx begun");
        testQueue.put("tx Hello");
        testQueue.put("tx World");

        System.out.println("Going to commit");
        tx.commit();

        testQueue.put("Hello");
        testQueue.put("World");

        Hazelcast.shutdownAll();
    }
}
```

works as expected. I haven't tested whether other collections suffer the same problem.
