I'm evaluating hazelcast for a multi-tenant application and to do so I need to know how well it performs when I try to get 30k IMaps.

To do so I develop a small test (using testNG)

It performed very well, until I add the map.clear().  

Shortly after 1500 IMaps all memory is depleted.

> 06/10/2013 00:34:51 com.hazelcast.util.HealthMonitor
> INFO: [192.168.1.7]:5701 [dev] 
> memory used=3,0G, free=0, total=3,0G, max=3,0G, used/total=100,00% used/max=100,00%
> cpu process-load=-1,00%, system-load=-1,00%, system-loadaverage=-100,00%

Shortly after 1600 OOM.

Did I did anything obviously wrong or did I found a real problem?

Without IMap.clear() I was able to complete the 50k cycles.

```
package XPTO;

import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import com.hazelcast.client.HazelcastClient;
import com.hazelcast.client.config.ClientConfig;
import com.hazelcast.config.GroupConfig;
import com.hazelcast.core.Hazelcast;
import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.core.IMap;

public class MapMemoryUsageIT {

    @DataProvider(parallel = true)
    public static Object[][] operations() {
        Object[][] dataSet = new Object[50000][];
        for (int i = 0; i < dataSet.length; i++) {
            dataSet[i] = new Object[] { i };
        }

        return dataSet;
    }

    private HazelcastInstance hazelcast;

    @BeforeTest
    public void launchHazelcastServer() {
        Hazelcast.newHazelcastInstance();
    }

    @AfterTest
    public void shutdownHazelcastServer() {
        Hazelcast.shutdownAll();
    }

    @BeforeClass
    public void launchHazelcastClient() {
        ClientConfig config = new ClientConfig();
        config.setGroupConfig( new GroupConfig( "dev", "dev-pass" ) );
        config.addAddress( "127.0.0.1" );
        hazelcast = HazelcastClient.newHazelcastClient( config );
    }

    @Test(dataProvider = "operations", threadPoolSize = 8, singleThreaded = false)
    public void voidCacher(Integer index) throws Exception {
        System.out.println( index );
        IMap<Object, Object> map = hazelcast.getMap( "juka" + index );
        map.set( "aaaa", "bbbb" );
        map.clear();
        map.destroy();
    }

}
```

Same as #954

This was fixed on hazelcast 3.1.2 but start to happen again on 3.1.6
