The problem is that this is done using a callback; which is executed asynchronously. So at some point in in the future, long after the synchronous method call has completed, this LocalMapStats is updated and therefor latency gets distorted because it seems to be much higher than it actually is.

This becomes more of a problem when the default executor for asynchronous task completion is busy and the update statistics task can't be processed.

I do not have a clear solution for this yet, because what is the meaning of call completion? What if there are 2 sync waiters; which one should be favored? What if there are only async waiters; could it be that the latency numbers are too low of the update statistics task is executed before the real waiters. So perhaps the latency should be calculated as soon as the response on the invocation future is set. And the update statistics should be able to access this future/invocation so it can update the statistics 'correctly'. 
