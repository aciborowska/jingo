I've been trying to track down a potential deadlock that happens under high concurrency. So far I haven't found a way to reliably reproduce.

3.1-SNAPSHOT, September 22nd Built as of commit e78b610375a31d161665d2990bb6baa41933e0ee

So far I tend to find between 2 and 3 of these threads all deadlocked on the class loader. I'm continuing to debug on my end but any insight from the project's side might be helpful.

--hz.hostid.cached.thread-27
java.lang.Class.getClassLoader0()
java.lang.Class.getClassLoader()
com.hazelcast.nio.ClassLoaderUtil.loadClass(ClassLoader, String)
com.hazelcast.nio.ClassLoaderUtil.newInstance(ClassLoader,String)
com.hazelcast.nio.serialization.DataSerializer.read(ObjectDataInput)
com.hazelcast.nio.serialization.StreamSerializerAdapter.read(Data)
com.hazelcast.nio.serialization.SerializationServiceImpl.toObject(Data)
com.hazelcast.spi.impl.NodeEngineImpl.toObject(Object)
com.hazelcast.spi.impl.EventServiceImpl$EventPacketProcessor.process(EventServiceImpl$EventPacket)
com.hazelcast.spi.impl.EventServiceImpl$RemoveEventPacketProcessor.run()
com.hazelcast.util.executor.StripedExecutor$Worker.run()
java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor$Worker)
java.util.concurrent.ThreadPoolExecutor$Worker.run()
java.lang.Thread.run()
com.hazelcast.util.executor.PoolExecutorThreadFactor$ManagedThread.run()
