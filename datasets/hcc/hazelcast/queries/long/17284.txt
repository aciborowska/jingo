<!--
Thanks for reporting your issue. Please share with us the following information, to help us resolve your issue quickly and efficiently.
-->
  
**Describe the bug**
We've two services,marked as cacheable with same name but different key as below. When both these are called one by one, Hazelcast throw <java.lang.IllegalStateException> Cannot overwrite a Cache's CacheManager. Tried many options but it is still now working.  We are using Hazelcast version 4.0 and spring-context 5.2.7.

```java
    @Transactional(readOnly = true)
    @Cacheable(value = "find", key = "#root.methodName", unless = "#result == null or #result.size() == 0")
    public List<GenericItem> getProviderTaxIDs() {
        return providerRepository.getProviderTaxIDs();
    }

    @Transactional(readOnly = true)
    @Cacheable(value = "find", key = "#root.methodName", unless = "#result == null or #result.size() == 0")
    public List<String> getEnrollmentLOBList() {
        return imlrAnalysisDAO.getEnrollmentLobList();
    }
```

```java
exception.MessageException: <xxxx.xxxx.xxx.exception.HandlerException> Cannot overwrite a Cache's CacheManager.
	from command mlr.getProviderTaxIDs (? -> ppa-service)
	at xxxx.xxxx.xxx.conf.service.ExceptionConverter.handleAndThrow(ExceptionConverter.java:103) ~[?:?]
	at xxxx.xxxx.xxx.handler.MLRhandler.getProviderTaxIDs(MLRhandler.java:70) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_144]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_144]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_144]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_144]
	at xxxx.xxxx.xxx.isc.core.command.MethodCommandRef.executeCommand(MethodCommandRef.scala:188) ~[isc-core-2.0.15.jar:?]
	at xxxx.xxxx.xxx.isc.core.command.MethodCommandRef.receiveCommand(MethodCommandRef.scala:127) ~[isc-core-2.0.15.jar:?]
	at xxxx.xxxx.xxx.api.LocalServiceRef$$anonfun$receiveCommand$2.apply(LocalServiceRef.scala:50) ~[service-api-2.0.13.jar:?]
	at com.edifecs.servicemanager.api.LocalServiceRef$$anonfun$receiveCommand$2.apply(LocalServiceRef.scala:49) ~[service-api-2.0.13.jar:?]
	at scala.Option.map(Option.scala:146) ~[scala-library-2.11.7.jar:?]
	at com.edifecs.servicemanager.api.LocalServiceRef.receiveCommand(LocalServiceRef.scala:49) ~[service-api-2.0.13.jar:?]
	at com.edifecs.epp.isc.core.command.CommandReceiverActor$$anonfun$handleCommand$2$$anonfun$apply$4.apply(CommandReceiverActor.scala:104) ~[isc-core-2.0.15.jar:?]
	at com.edifecs.epp.isc.core.command.CommandReceiverActor$$anonfun$handleCommand$2$$anonfun$apply$4.apply(CommandReceiverActor.scala:93) ~[isc-core-2.0.15.jar:?]
	at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:251) ~[scala-library-2.11.7.jar:?]
	at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:249) ~[scala-library-2.11.7.jar:?]
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:32) [scala-library-2.11.7.jar:?]
	at com.edifecs.epp.isc.core.dispatcher.ISCDispatcher$$anon$1$$anon$2.run(ISCDispatcherConfigurator.scala:83) [isc-core-2.0.15.jar:?]
	at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:39) [akka-actor_2.11-2.4.11.jar:?]
	at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:409) [akka-actor_2.11-2.4.11.jar:?]
	at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [scala-library-2.11.7.jar:?]
	at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [scala-library-2.11.7.jar:?]
	at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [scala-library-2.11.7.jar:?]
	at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [scala-library-2.11.7.jar:?]
	Suppressed: com.edifecs.epp.isc.exception.MessageException: Exception returned from message sent
	from command mlr.getProviderTaxIDs (? -> ppa-service)
		at com.edifecs.epp.isc.CommandCommunicator$$anonfun$com$edifecs$epp$isc$CommandCommunicator$$parseMessageResponse$1.apply(CommandCommunicator.scala:297) ~[isc-core-2.0.15.jar:?]
		at com.edifecs.epp.isc.CommandCommunicator$$anonfun$com$edifecs$epp$isc$CommandCommunicator$$parseMessageResponse$1.apply(CommandCommunicator.scala:288) ~[isc-core-2.0.15.jar:?]
		at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24) ~[scala-library-2.11.7.jar:?]
		at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:24) ~[scala-library-2.11.7.jar:?]
		at com.edifecs.epp.isc.core.dispatcher.ISCDispatcher$$anon$1$$anon$2.run(ISCDispatcherConfigurator.scala:83) [isc-core-2.0.15.jar:?]
		at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:39) [akka-actor_2.11-2.4.11.jar:?]
		at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:409) [akka-actor_2.11-2.4.11.jar:?]
		at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [scala-library-2.11.7.jar:?]
		at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [scala-library-2.11.7.jar:?]
		at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [scala-library-2.11.7.jar:?]
		at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [scala-library-2.11.7.jar:?]
Caused by: com.edifecs.epp.isc.exception.MessageException: <java.lang.IllegalStateException> Cannot overwrite a Cache's CacheManager.
	at com.hazelcast.client.cache.impl.ClientCacheProxySupport.setCacheManager(ClientCacheProxySupport.java:238) ~[?:?]
	at com.hazelcast.client.cache.impl.ClientCacheProxy.setCacheManager(ClientCacheProxy.java:93) ~[?:?]
	at com.hazelcast.client.cache.impl.HazelcastClientCacheManager.createCacheProxy(HazelcastClientCacheManager.java:115) ~[?:?]
	at com.hazelcast.cache.impl.AbstractHazelcastCacheManager.getCacheUnchecked(AbstractHazelcastCacheManager.java:234) ~[?:?]
	at com.hazelcast.cache.impl.AbstractHazelcastCacheManager.getCache(AbstractHazelcastCacheManager.java:210) ~[?:?]
	at com.hazelcast.cache.impl.AbstractHazelcastCacheManager.getCache(AbstractHazelcastCacheManager.java:65) ~[?:?]
	at org.springframework.cache.jcache.JCacheCacheManager.getMissingCache(JCacheCacheManager.java:129) ~[?:?]
	at org.springframework.cache.support.AbstractCacheManager.getCache(AbstractCacheManager.java:97) ~[?:?]
	at org.springframework.cache.interceptor.AbstractCacheResolver.resolveCaches(AbstractCacheResolver.java:89) ~[?:?]
	at org.springframework.cache.interceptor.CacheAspectSupport.getCaches(CacheAspectSupport.java:253) ~[?:?]
	at org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationContext.<init>(CacheAspectSupport.java:708) ~[?:?]
	at org.springframework.cache.interceptor.CacheAspectSupport.getOperationContext(CacheAspectSupport.java:266) ~[?:?]
	at org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationContexts.<init>(CacheAspectSupport.java:599) ~[?:?]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:346) ~[?:?]
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61) ~[?:?]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[?:?]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) ~[?:?]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:367) ~[?:?]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118) ~[?:?]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[?:?]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) ~[?:?]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95) ~[?:?]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[?:?]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) ~[?:?]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691) ~[?:?]
	at com.edifecs.fin.ppa.service.MLRService$$EnhancerBySpringCGLIB$$4c739ccd.getProviderTaxIDs(<generated>) ~[?:?]
	at com.edifecs.fin.ppa.handler.MLRhandler.getProviderTaxIDs(MLRhandler.java:68) ~[?:?]
```

**Expected behavior**
As per the documentation, we can use SPEL expression to distinguish the keys for two methods without params.


**Additional context**

<!--
Add any other context about the problem here.

Common details that we're often interested in:
- Detailed description of the steps to reproduce your issue
- Logs and stack traces, if available
- Hazelcast version that you use (e.g. 3.4, also specify whether it is a minor release or the latest snapshot)
- If available, integration module versions (e.g. Tomcat, Jetty, Spring, Hibernate). Also, include their detailed configuration information such as web.xml, Hibernate configuration and `context.xml` for Spring
- Cluster size, i.e. the number of Hazelcast cluster members
- Number of the clients
- Version of Java. It is also helpful to mention the JVM parameters
- Operating system. If it is Linux, kernel version is helpful
- Unit test with the `hazelcast.xml` file. If you could include a unit test which reproduces your issue, we would be grateful
-->
