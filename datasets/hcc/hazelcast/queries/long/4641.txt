The ClientEngineImpl has an executor to process packets from clients without a partiton-id. This executor  has a very big poolsize potentially:

e.g.
12 cores per socket 
2 sockets
hyper threading
---> 48 cores 

This is multiplied by 20, so you get 960 threads and this can lead to problems. For example thread creation problems.

The reason this pool can become so big is to deal with a problem in the transactions from clients, but it an cause problems for other components.

The following program will trigger this growth:

```
public static void main(String[] args){
        HazelcastInstance hz = Hazelcast.newHazelcastInstance();
        HazelcastInstance client = HazelcastClient.newHazelcastClient();

        IExecutorService executorService = client.getExecutorService("foo");
        for(int k=0;k<1000000;k++){
            executorService.submit(new MyRunnable());
        }
    }

    public static class MyRunnable implements Runnable, Serializable{
        @Override
        public void run() {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
```

If you print the size of this executor then you'll see that it grows to its maximum size very quickly.

It doesn't matter that the threadpool removes unused threads, the damage could already have been done.
