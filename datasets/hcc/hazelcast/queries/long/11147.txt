I got into a Near Cache scenario, where the `MapGetInvalidationMetaDataOperation` creates a NPE.
```java
java.util.concurrent.ExecutionException: java.lang.NullPointerException
	at com.hazelcast.spi.impl.operationservice.impl.InvocationFuture.resolveAndThrowIfException(InvocationFuture.java:90) ~[classes/:?]
	at com.hazelcast.spi.impl.AbstractInvocationFuture.get(AbstractInvocationFuture.java:183) ~[classes/:?]
	at com.hazelcast.map.impl.nearcache.invalidation.MemberMapMetaDataFetcher.extractAndPopulateResult(MemberMapMetaDataFetcher.java:54) ~[classes/:?]
	at com.hazelcast.internal.nearcache.impl.invalidation.MetaDataFetcher.init(MetaDataFetcher.java:55) ~[classes/:?]
	at com.hazelcast.internal.nearcache.impl.invalidation.RepairingTask.initRepairingHandler(RepairingTask.java:194) [classes/:?]
	at com.hazelcast.internal.nearcache.impl.invalidation.RepairingTask.access$000(RepairingTask.java:53) [classes/:?]
	at com.hazelcast.internal.nearcache.impl.invalidation.RepairingTask$1.run(RepairingTask.java:218) [classes/:?]
	at com.hazelcast.util.executor.CachedExecutorServiceDelegate$Worker.run(CachedExecutorServiceDelegate.java:228) [classes/:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_144]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_144]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_144]
	at com.hazelcast.util.executor.HazelcastManagedThread.executeRun(HazelcastManagedThread.java:64) [classes/:?]
	at com.hazelcast.util.executor.HazelcastManagedThread.run(HazelcastManagedThread.java:80) [classes/:?]
Caused by: java.lang.NullPointerException
	at com.hazelcast.map.impl.operation.MapGetInvalidationMetaDataOperation.getPartitionUuidList(MapGetInvalidationMetaDataOperation.java:152) ~[classes/:?]
	at com.hazelcast.map.impl.operation.MapGetInvalidationMetaDataOperation.run(MapGetInvalidationMetaDataOperation.java:70) ~[classes/:?]
	at com.hazelcast.spi.impl.operationservice.impl.OperationRunnerImpl.run(OperationRunnerImpl.java:194) ~[classes/:?]
	at com.hazelcast.spi.impl.operationservice.impl.OperationRunnerImpl.run(OperationRunnerImpl.java:409) ~[classes/:?]
	at com.hazelcast.spi.impl.operationexecutor.impl.OperationThread.process(OperationThread.java:115) ~[classes/:?]
	at com.hazelcast.spi.impl.operationexecutor.impl.OperationThread.run(OperationThread.java:100) ~[classes/:?]
	at ------ submitted from ------.(Unknown Source) ~[?:?]
	at com.hazelcast.spi.impl.operationservice.impl.InvocationFuture.resolve(InvocationFuture.java:120) ~[classes/:?]
	at com.hazelcast.spi.impl.operationservice.impl.InvocationFuture.resolveAndThrowIfException(InvocationFuture.java:77) ~[classes/:?]
	... 12 more
```
This happens when I start an additional node during its startup phase. I guess it just doesn't have partitions assigned yet. Another scenario will be a small partition count, e.g. 1 in a test scenario, where all partitions are assigned to already running members.