Spring boot has introduced graceful shutdowns in 2.3
https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/html/spring-boot-features.html#boot-features-graceful-shutdown

However Hazelcast initiates a shutdown before all requests have completed from Tomcat, this results in some requests returning an error to the user because the hazelcast instance is not in an active state. It would be preferable that the shutdown of hazelcast begins after Tomcat has shutdown. The logs below show the order being to my mind wrong:

```
2020-08-24 18:29:27.068  INFO [,,,] 36027 --- [.ShutdownThread] com.hazelcast.instance.Node              : [192.168.1.16]:5701 [cluster] [3.12.8] Running shutdown hook... Current state: ACTIVE
2020-08-24 18:29:37.077  INFO [,,,] 36027 --- [extShutdownHook] o.s.b.w.e.tomcat.GracefulShutdown        : Commencing graceful shutdown. Waiting for active requests to complete
2020-08-24 18:29:37.085  INFO [,,,] 36027 --- [tomcat-shutdown] o.s.b.w.e.tomcat.GracefulShutdown        : Graceful shutdown complete
2020-08-24 18:29:39.654  INFO [,,,] 36027 --- [extShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService
2020-08-24 18:29:39.672  INFO [,,,] 36027 --- [extShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-08-24 18:29:39.674  INFO [,,,] 36027 --- [extShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-24 18:29:39.677  INFO [,,,] 36027 --- [extShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-08-24 18:29:39.687  INFO [,,,] 36027 --- [extShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
```

You can see that Hikari pool is behaving correctly and waiting until after Tomcat has marked itself as shutdown

Versions used: 

- Spring Boot: 2.3.2.RELEASE
- Hazelcast: 3.12.8