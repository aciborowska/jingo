Our setup requires two nodes that use HZ's MapStore implementation. We also use Hibernate. Hibernate is configured to use HZ as the second level cache. 

We have an Entity, lets say, Person. When we start mancenter, we see a map created for the entity. 

When the node starts, all persons are loaded from the DB using MapStore and stored in a distributed map "person_cache". 

When there are two nodes within the cluster, MapStore service will try to load the keys into both the nodes. At this point, there is a race condition. As the document states, race conditions can occur if pessimistic locking and proper locks are not provided. After trying all options, we still ran into race condtions because we don't have control over the MapStore service and how the keys are loaded into the IMap. 

Finally, I disabled the second level cache on "Person" entity making @Cache(usage = CacheConcurrencyStrategy.NONE)

This seems to work for now. Is this the ideal solution? Is there a way to control how the keys are loaded into the IMap cache? 
