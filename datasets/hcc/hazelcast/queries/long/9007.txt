i created a class for associating hanzelcast member to a defined internal numeric ID (i need a integer).
pratically on bootstrap i set index variable ID in a local member.

When a new node is added/removed i can identify the node in the internal system.  

Normally it works correctly (when i kill a node) but there is a case not working but seams a bug.
When a node has a communication problem 
1) is called removeMember and i can found the index variable 
2) when communication is recovered  addMember is called correctly in both nodes but in one of them  no variable is found. 

why? 

have you a better solution for doing the same thing?

```

@PostConstruct
    public void construct() {
        final Cluster c = this.hazelcastInstance.getCluster();
        Member lmem = c.getLocalMember();
        if (!env.containsProperty("system.node")) {
            final InetSocketAddress ip = lmem.getSocketAddress();

            INode n = bdao.registerNode(lmem.getUuid(), getMacAddress(ip.getAddress()), ip.getHostString());
            this.index = n.getIndex();
        } else {
            this.index = Integer.valueOf(env.getProperty("system.node"));
        }

        lmem.setIntAttribute("index", this.index);

        c.addMembershipListener(new MembershipListener() {

            @Override
            public void memberAdded(MembershipEvent m) {
                System.out.println("add member ");
                Member mm = m.getMember();
                Integer n = null;
                int x=0;
                while (n == null&&x<100000) {
                    n = mm.getIntAttribute("index");
                    System.out.println(n);
                    if (n == null)
                        try {
                            x+=100;
                            Thread.sleep(100);
                        } catch (InterruptedException e) {
                        }
                }
                System.out.println("------");
                System.out.println(n);
                if (n!=null) for (Notifier nn : listeners)
                    nn.addNode(n, mm.getSocketAddress().getAddress().getHostAddress());
            }

            @Override
            public void memberRemoved(MembershipEvent m) {

                Integer n = m.getMember().getIntAttribute("index");

                if (n != null) {
                    for (Notifier nn : listeners)
                        nn.removeNode(n);

                }

            }

            @Override
            public void memberAttributeChanged(MemberAttributeEvent memberAttributeEvent) {
                // TODO Auto-generated method stub

            }

        });

    }

```
