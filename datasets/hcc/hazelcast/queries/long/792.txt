I have several write-behind maps in which it appears entries are being inadvertently marked for removal and are being passed to my store via the 'deleteAll' call when I'm expecting instead to see them passed to save.  Watching both my logs and the admin console I see a high percentage of entries marked for removal but I don't ever call remove on entries in these maps or clear.  Instead, I rely on the write-behind threads to flush out to my store based on a configured eviction and max size policies.  I'm curious what other mechanisms there are that would mark these entries for removal if I am not doing it explicitly.

Here is an example configuration:

``` xml
<map name="models.LowResolutionModel">
    <backup-count>0</backup-count>
    <read-backup-data>false</read-backup-data>
    <time-to-live-seconds>0</time-to-live-seconds>
    <max-idle-seconds>300</max-idle-seconds>
    <eviction-policy>LRU</eviction-policy>
    <max-size policy="map_size_per_jvm">5000</max-size>
    <map-store enabled="true">
        <class-name>models.LowResolutionModel$LowResolutionModelStore</class-name>
        <write-delay-seconds>5</write-delay-seconds>
    </map-store>
</map>  
```

I have not yet been able to reproduce this issue locally and only sporadically in my test environment that runs with 2 nodes.  However, in production this is happening many times per minute and is progressively becoming more frequent the more load I throw at it (where I am running between 6 and 12 nodes).

Any thoughts or help would be greatly appreciated!
