Sample project available here:
https://github.com/apixandru/hazelcast-stuff

I can't seem to find a good way to deal with hazelcast running in client mode when the server restarts.

In the attached project you will find what I believe to be a correct configuration for jcache usage (and commented code to switch to spring the caching mechanism)

To simulate the problem
1. start the server
2. start the client
3. visit the client http://localhost:8080/ - the connection with the server should be established now and data published to it
4. restart the server
5. visit the client again - it will fail because it can't find the cache.

With jcache, once the connection to the server node is lost, it does not matter if it's recovered, it will always fail with `com.hazelcast.cache.CacheNotExistsException: Cache /hz/test is already destroyed or not created yet, on Member [192.168.0.206]:15000 - 8f6edf1e-c0a5-4f8d-b540-6ec2935c096b this`

With spring cache, it looks like recovery is successful.
There is also a problem that once the hazelcast instance goes into recovery mode, all operations on it block. There appear to be only two ways to control this
1. `hazelcast.spring.cache.prop` - not very useful, this only times out reads, writes still leave the application hanging
2. `hazelcast.client.invocation.timeout.seconds` - looks like this times out any operation, the correct choice?

It appears that by far the best solution would be to simply let the HazelcastInstance die on connection to server lost and recreate it, however with spring integration this is not so great because the instance was already injected everywhere.

Is there an official way of dealing with this problem, am I missing something or am I simply using it wrong?