Hi,
it looks like Hazelcast does not use the ClassLoader provided trough Config.setClassLoader to de-serialize.

In my OSGi environment I set the Config's classloader to an instance of the object com.github.lburgazzoli.osgi.OSGiClassLoader and here what the applications logs when it instantiate a new IMap:

```
2013-05-28 11:49:28,707|DEBUG|karaf-examples-axon-commons                     |DataItem                                         > #### ClassLoader com.github.lburgazzoli.osgi.OSGiClassLoader@1927963
```

The classloader is retrived trough instance.getConfig().getClassLoader() so it looks like everithing is properly set-up but when the application tries to retrieve an object stored in the cache, it gets:

```
Caused by: java.lang.ClassNotFoundException: com.github.lburgazzoli.examples.karaf.axon.model.DataItem
        at java.net.URLClassLoader$1.run(URLClassLoader.java:366)[:1.7.0_21]
        at java.net.URLClassLoader$1.run(URLClassLoader.java:355)[:1.7.0_21]
        at java.security.AccessController.doPrivileged(Native Method)[:1.7.0_21]
        at java.net.URLClassLoader.findClass(URLClassLoader.java:354)[:1.7.0_21]
        at java.lang.ClassLoader.loadClass(ClassLoader.java:423)[:1.7.0_21]
        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)[:1.7.0_21]
        at java.lang.ClassLoader.loadClass(ClassLoader.java:356)[:1.7.0_21]
        at com.hazelcast.nio.AbstractSerializer.loadClass(AbstractSerializer.java:81)[257:com.hazelcast.all:2.5.2.SNAPSHOT]
        at com.hazelcast.nio.AbstractSerializer.loadClass(AbstractSerializer.java:56)[257:com.hazelcast.all:2.5.2.SNAPSHOT]
        at com.hazelcast.nio.AbstractSerializer$1.resolveClass(AbstractSerializer.java:91)[257:com.hazelcast.all:2.5.2.SNAPSHOT]
        at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1610)[:1.7.0_21]
        at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1515)[:1.7.0_21]
        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1769)[:1.7.0_21]
        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1348)[:1.7.0_21]
        at java.io.ObjectInputStream.readUnshared(ObjectInputStream.java:460)[:1.7.0_21]
        at com.hazelcast.nio.DefaultSerializer$ObjectSerializer.readNormal(DefaultSerializer.java:410)[257:com.hazelcast.all:2.5.2.SNAPSHOT]
        at com.hazelcast.nio.DefaultSerializer$ObjectSerializer.read(DefaultSerializer.java:380)[257:com.hazelcast.all:2.5.2.SNAPSHOT]
        at com.hazelcast.nio.DefaultSerializer.read(DefaultSerializer.java:138)[257:com.hazelcast.all:2.5.2.SNAPSHOT]
        at com.hazelcast.nio.CustomSerializerAdapter.read(CustomSerializerAdapter.java:32)[257:com.hazelcast.all:2.5.2.SNAPSHOT]
        at com.hazelcast.nio.AbstractSerializer.toObject(AbstractSerializer.java:121)[257:com.hazelcast.all:2.5.2.SNAPSHOT]
```

The issue disappears if I assign the thread class-loader to the class-loader mentioned above.
