If a class is available in thread's context class loader (CCL), then 
```
ClassLoaderUtil.newInstance(null, "pkg.Class")
``` 
 will succeed to load the class from CCL (correctly), but will store the constructor in `CONSTRUCTOR_CACHE` under incorrect key: it will be stored under class loader that loaded the `ClassLoaderUtil`, not under the current CCL. Then later if there's another CCL that has different class with the same name, it will use the cached constructor from the old CCL, causing a seemingly impossible exception `ClassCastException: pkg.Class cannot be cast to pkg.Class`.

The `newInstance(ClassLoaer, String)` method is used when deserializing `DataSerializable` and many other places and affects Jet, which changes the CCL for each job.

A PR with a fix will follow. Workaround is to use IdentifiedDataSerializable or java serialization.