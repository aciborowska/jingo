When `FinalizeJoinOperation` invocation during join timeouts, master can continue processing new join requests and publish new member lists. 
But if a member receives/executes `FinalizeJoinOperation` late, `MemberInfoUpdateOperation`s received before that are all rejected. In this situation, a member may not learn the latest member list until a periodic member list is published (default 5min) or a new member joins.

For example, assume A is master and a single node cluster;
- B starts up and sends a join request to A
- A handles the join request, updates member list as [A, B] and sends `FinalizeJoinOperation` to B
- A's `FinalizeJoinOperation` invocation timeouts, B has not processed `FinalizeJoinOperation` yet
- C starts up and sends a join request to A
- A handles the join request, updates member list as [A, B, C] and sends `FinalizeJoinOperation` to C and `MemberInfoUpdateOperation` to B
- B rejects `MemberInfoUpdateOperation` since it's not joined yet
- C executes `FinalizeJoinOperation` and updates member list as [A, B, C]
- B executes `FinalizeJoinOperation` that was sent earlier and updates member list as [A, B]

At that point, B cannot learn latest member list [A, B, C] until a periodic member list is published or a new member joins.

Related to https://github.com/hazelcast/hazelcast/issues/9486