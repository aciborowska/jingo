`InternalSerializationService.toBytes` methods [explicitly use `BIG_ENDIAN`](https://github.com/hazelcast/hazelcast/blob/4de7f846e0dd85354de7af94bd7ff81ac2487c24/hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/AbstractSerializationService.java#L150) to write the integer bytes for the given object's serializer type ID, regardless of the configured endianness. However inner objects' serializer type ID (ie those written out via `ObjectDataOutput.writeObject`) are serialized properly [using the configured endianness](https://github.com/hazelcast/hazelcast/blob/4de7f846e0dd85354de7af94bd7ff81ac2487c24/hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/AbstractSerializationService.java#L249).

Due to this, optimizations introduced in #10318 result in inconsistent serialization of `NormalResponse`s when using `LITTLE_ENDIAN` byte order:
- In 3.8, a `NormalResponse` object is serialized via `toBytes` -> the `IdentifiedDataSerializable` serializer type ID will be serialized in `BIG_ENDIAN` and inner response objects' serializer type ID will be written out in `LITTLE_ENDIAN`
- In 3.9, the `NormalResponse` object header is [written out properly](https://github.com/hazelcast/hazelcast/blob/16bd03c7794322b5989d1bd5641c80352c1117cb/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/OutboundResponseHandler.java#L194) but the the inner response object is now the top-level object passed to `InternalSerializationService.toBytes` -> its serializer type ID will be written out in `BIG_ENDIAN`