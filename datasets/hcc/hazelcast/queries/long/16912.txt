<!--
Thanks for reporting your issue. Please share with us the following information, to help us resolve your issue quickly and efficiently.
-->
  
**Describe the bug**
Application has embedded hazelcast.
Application is upgrading in rolling fashion from V1 to V2.
V2 introduced a new cache (V2-cache) with new value type (V2-classDef1)


1.Let's say I have four nodes in cluster: 4 - V1 nodes
2. Rolling upgrade is triggered.
3. Currently it 3 V1 nodes and 1 V2 node forming hazelcast cluster. 
At this point V2 created V2-Cache.
4.For some application specific reason upgrade has to rollback.
5.So V2 is shutdown. V2-Cache cannot be deleted.
6. New V1 is triggered 
7. New V1 fails saying it could not find "V2-classDef1" as cache is present in cluster.


**Expected behavior**

How to allow V1 HZ instance to startup without failing though any where in cluster class definition is not present?
Justification: Failure makes sense when some one accesses that new cache.

**Later Addition**

The issue is broader (described below) . Rolling upgrade of application fails whenever new version of application introduces a new cache.
@vbekiaris  confirmed that the fix is addressing this scenario as well.
-------------------------------------------
Scenario:
Notations : Nx - node , v1/v2 - application versions
Application is doing a rolling upgrade from v1 to v2.
V2 application creates a new cache with value type class definition that does not exist on v1.
In the sequence of events below when second node in the cluster is rollingly upgraded, it fails.

Sequence of events:

N1-v1, N2-v1, N3- v1 -- three v1 nodes

N1-v1, N2-v1, N3- v2-- third node is upgraded from v1 to v2.
And third node created a cache with a definition that does not exist on v1.

N1-v1, N2-v2, N3- v2 -- fails
Here second node is rolling restarted to v2.
It sends a request to master ( N1 - the oldest node)
As part of this request something on master is trying to load the non existing class definition
and the join fails



**To Reproduce**

Steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. ...

**Additional context**

<!--
Add any other context about the problem here.

Common details that we're often interested in:
- Detailed description of the steps to reproduce your issue
- Logs and stack traces, if available
- Hazelcast version that you use (e.g. 3.4, also specify whether it is a minor release or the latest snapshot)
- If available, integration module versions (e.g. Tomcat, Jetty, Spring, Hibernate). Also, include their detailed configuration information such as web.xml, Hibernate configuration and `context.xml` for Spring
- Cluster size, i.e. the number of Hazelcast cluster members
- Number of the clients
- Version of Java. It is also helpful to mention the JVM parameters
- Operating system. If it is Linux, kernel version is helpful
- Unit test with the `hazelcast.xml` file. If you could include a unit test which reproduces your issue, we would be grateful
-->
