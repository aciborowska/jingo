Server takes `1 minute` to return `StaleSequenceException` when `ReadMany` operation is done before `AddAll` which adds more elements than the capacity. 

For example given that ringbuffer has capacity `10`.

```
    @Test(expected = ExecutionException.class)
    public void readManyAsync_beforeAddAllMoreThanCapacity() throws Exception {
        ICompletableFuture<ReadResultSet<String>> f = clientRingbuffer.readManyAsync(0, 1, 10, null);
        serverRingbuffer.addAllAsync(asList("0","1","2","3","4","5","6","7","8","9","10"), OVERWRITE);
        f.get();
    }
```

This test takes 1 minute to complete.


```
    @Test(expected = ExecutionException.class)
    public void readManyAsync_afterAddAllMoreThanCapacity() throws Exception {
        serverRingbuffer.addAllAsync(asList("0","1","2","3","4","5","6","7","8","9","10"), OVERWRITE);
        ICompletableFuture<ReadResultSet<String>> f = clientRingbuffer.readManyAsync(0, 1, 10, null);
        f.get();
    }
```

Whereas this one completes immediately. 


If the number of elements is not greater than the capacity it completes immediately. For example :

```
   @Test
   public void readManyAsync_beforeAddAllMoreThanCapacity() throws Exception {
        ICompletableFuture<ReadResultSet<String>> f = clientRingbuffer.readManyAsync(0, 1, 10, null);
        serverRingbuffer.addAllAsync(asList("0","1","2","3","4","5","6","7","8","9"), OVERWRITE);
        f.get();
    }
```

this completes immediately.

Also this test timeouts after 5 minutes:

```
    @Test(expected = ExecutionException.class)
    public void readManyAsync_beforeAddAllMoreThanCapacity() throws Exception {
        ICompletableFuture<ReadResultSet<String>> f = serverRingbuffer.readManyAsync(0, 1, 10, null);
        serverRingbuffer.addAllAsync(asList("0","1","2","3","4","5","6","7","8","9", "10"), OVERWRITE);
        f.get();
    }
```

These are tested in `RingbufferTest.java`.



