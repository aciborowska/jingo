According to the JCache API javadoc, when the durationAmount parameter in `javax.cache.expiry.Duration` constructor is set to 0 (zero), it means cache entites should live eternal. Here is the javadoc:

```
  /**
   * Constructs a duration.
   *
   * @param timeUnit       the unit of time to specify time in. The minimum time unit is milliseconds.
   * @param durationAmount how long, in the specified units, the cache entries should live. 0 means eternal.
   * @throws NullPointerException     if timeUnit is null
   * @throws IllegalArgumentException if durationAmount is less than 0 or a TimeUnit less than milliseconds is specified
   */
  public Duration(TimeUnit timeUnit, long durationAmount) {
```

However the entity directly expires when it is set to zero. See the test below. It fails when executed:

```
    @Test
    public void valueShouldNotBeExpiredWhenDurationIsZero() {
        final int CREATED_EXPIRY_TIME_IN_MSEC = 0;

        Duration duration = new Duration(TimeUnit.MILLISECONDS, CREATED_EXPIRY_TIME_IN_MSEC);
        CacheConfig<Integer, String> cacheConfig = new CacheConfig<Integer, String>();
        cacheConfig.setExpiryPolicyFactory(CreatedExpiryPolicy.factoryOf(duration));

        final Cache<Integer, String> cache = createCache(cacheConfig);
        cache.put(1, "value");

        assertTrueEventually(new AssertTask() {
            @Override
            public void run() throws Exception {
                assertNotNull(cache.get(1));
            }
        });
    }
```
