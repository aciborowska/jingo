I wish you guys would create a new project, say, `hazelcast-osgi`, 
and started collecting there unit tests for various osgi use cases. 
I could contribute a few, for example.

I had to jump over some 3...5 issues which are listed as "resolved"
in these discussions, but which in fact, are still pending:
https://groups.google.com/forum/?fromgroups=#!searchin/hazelcast/osgi

the issues fall into 2 categories:
1) invalid  / not osgi friendly class loading in hazel cast
2) invalid bundle manifest

examples:
- "impl" in the package name should be treated as non-exported package; but you export them
- bundle "com.hazelcast.client" is using bundle "com.hazelcast"; when "com.hazelcast"
  is tryign to instantiate com.hazelcast.client.impl.KeyValue from "com.hazelcast.client", 
  it fails, since "com.hazelcast.client" does not export com.hazelcast.client.impl.KeyValue
- bundle "hazelcast-all" is not exporting "com.hazelcast.core"
- nio.Serializer is using "null" classloader, ignoring `Config.setClassLoader()`

```
    public static Class<?> loadClass(final String className) throws ClassNotFoundException {
        return loadClass(null, className);
    }
```
- hazelcast ClientConfig does not provide .setClassLoader() option; forces to use TCCL
- hazelcast client does not set TCCL class loader for all internal thread pools concistently; 
  specifically, for operations that involve com.hazelcast.client.impl.EntryListenerManager
- etc, etc.

workarounds:

1) invalid  class loading forces to use TCCL pattern all over the place, such as:
http://njbartlett.name/2010/08/30/osgi-readiness-loading-classes.html

2) invalid bundle manifest forces to repackage your artifacts in a custom project, such as:
https://github.com/barchart/barchart-wrap-hazelcast-all/blob/master/pom.xml

I suggest you use pax exam for your osgi unit tests
http://team.ops4j.org/wiki/display/paxexam/Pax+Exam
