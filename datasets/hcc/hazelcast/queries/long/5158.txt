Hazelcast Version: 3.4.2
If this is a feature of ICompletableFuture then perhaps the type should be changed to _Data_ instead of generic?
The example below throws this exception:

```
java.lang.ClassCastException: com.hazelcast.nio.serialization.DefaultData cannot be cast to java.lang.String
    at TestCompletableFuture$1.onResponse(TestCompletableFuture.java:1)
    at com.hazelcast.spi.impl.BasicInvocationFuture$1.run(BasicInvocationFuture.java:96)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    at java.lang.Thread.run(Thread.java:745)
    at com.hazelcast.util.executor.HazelcastManagedThread.executeRun(HazelcastManagedThread.java:76)
    at com.hazelcast.util.executor.HazelcastManagedThread.run(HazelcastManagedThread.java:92)
```

```
        HazelcastInstance instance = Hazelcast.newHazelcastInstance();
        IMap<String, String> map = instance.getMap("map");
        map.set("key", "Some Value");
        ICompletableFuture<String> f = (ICompletableFuture<String>) map.getAsync("key");
        f.andThen(new ExecutionCallback<String>() {
            public void onResponse(String response) {
                System.out.println(response);
            }

            public void onFailure(Throwable t) {

            }
        });
        Hazelcast.shutdownAll();
```
