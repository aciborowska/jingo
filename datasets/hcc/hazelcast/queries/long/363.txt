Similar to my previous issue (#362) regarding an error in the LATEST_UPDATE merge policy, I have experienced a second problem with the merging of data structures. In this case I have two hazelcast members, A and B, which are members of the same cluster.

I have enabled persistent store on each and written the persistent store methods such that when a 
member is brought up, it initializes its data structures with the data in the persistent store. In this way, if a member crashes, when I bring it back up, its data will be in the same state as before it crashed.

So, if I kill member A and bring it back up, it restores its previous data and attempts to join the cluster
that it previously was a part of. However, like the situation I am experiencing with merging in the case of network partitioning (split-brain) whatever data elements are assigned to be local to A, always get the value recovered from persistent store by A when it was brought back up - no matter if they have been modified since A went down. This is analogous to the network partitioning scenario where those members considered to be "merging" with the "existing" cluster always choose their local value for the data no matter how recently the data has been modified in the existing cluster.

I believe this is the same error as that causing the LATEST_UPDATE error.
