I've upgraded my project from 3.12 to 4.0-BETA-1, but ended in following exception in tests:
```
18:15:50,253 WARN  [main] OperationRunnerImpl - [127.0.0.1]:5702 [unit-tests-cluster] [4.0-BETA-1] While sending op error... op: com.hazelcast.map.impl.query.QueryOperation{serviceName='hz:impl:mapService', identityHash=1569179823, partitionId=-1, replicaIndex=0, callId=-183, invocationTime=1572974150251 (2019-11-05 18:15:50.251), waitTimeout=-1, callTimeout=60000, name=ExampleMap}, error: com.hazelcast.spi.exception.RetryableHazelcastException: Map ExampleMap is still loading data from external store
com.hazelcast.spi.exception.ResponseAlreadySentException: NormalResponse already responseReceived for callback: Invocation{op=com.hazelcast.map.impl.query.QueryOperation{serviceName='hz:impl:mapService', identityHash=1569179823, partitionId=-1, replicaIndex=0, callId=183, invocationTime=1572974150251 (2019-11-05 18:15:50.251), waitTimeout=-1, callTimeout=60000, name=ExampleMap}, tryCount=250, tryPauseMillis=500, invokeCount=2, callTimeoutMillis=60000, firstInvocationTimeMs=1572974150216, firstInvocationTime='2019-11-05 18:15:50.216', lastHeartbeatMillis=0, lastHeartbeatTime='1970-01-01 01:00:00.000', target=[127.0.0.1]:5702, pendingResponse={VOID}, backupsAcksExpected=-1, backupsAcksReceived=0, connection=null}, current-response: com.hazelcast.spi.exception.RetryableHazelcastException: Map ExampleMap is still loading data from external store
	at com.hazelcast.spi.impl.operationservice.impl.Invocation.sendResponse(Invocation.java:218)
	at com.hazelcast.spi.impl.operationservice.Operation.sendResponse(Operation.java:470)
	at com.hazelcast.spi.impl.operationservice.impl.OperationRunnerImpl.sendResponseAfterOperationError(OperationRunnerImpl.java:386)
	at com.hazelcast.spi.impl.operationservice.impl.OperationRunnerImpl.handleOperationError(OperationRunnerImpl.java:380)
	at com.hazelcast.spi.impl.operationservice.impl.OperationRunnerImpl.run(OperationRunnerImpl.java:206)
	at com.hazelcast.spi.impl.operationexecutor.impl.OperationExecutorImpl.run(OperationExecutorImpl.java:394)
	at com.hazelcast.spi.impl.operationexecutor.impl.OperationExecutorImpl.runOrExecute(OperationExecutorImpl.java:421)
	at com.hazelcast.spi.impl.operationservice.impl.Invocation.doInvokeLocal(Invocation.java:590)
	at com.hazelcast.spi.impl.operationservice.impl.Invocation.doInvoke(Invocation.java:575)
	at com.hazelcast.spi.impl.operationservice.impl.Invocation.invoke0(Invocation.java:534)
	at com.hazelcast.spi.impl.operationservice.impl.Invocation.invoke(Invocation.java:236)
	at com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.invokeOnTarget(OperationServiceImpl.java:337)
	at com.hazelcast.map.impl.query.QueryEngineImpl.dispatchFullQueryOnLocalMemberOnQueryThread(QueryEngineImpl.java:282)
	at com.hazelcast.map.impl.query.QueryEngineImpl.dispatchFullQueryOnQueryThread(QueryEngineImpl.java:274)
	at com.hazelcast.map.impl.query.QueryEngineImpl.dispatchOnQueryThreads(QueryEngineImpl.java:162)
	at com.hazelcast.map.impl.query.QueryEngineImpl.doRunOnQueryThreads(QueryEngineImpl.java:155)
	at com.hazelcast.map.impl.query.QueryEngineImpl.runOnLocalPartitions(QueryEngineImpl.java:121)
	at com.hazelcast.map.impl.query.QueryEngineImpl.execute(QueryEngineImpl.java:96)
	at com.hazelcast.map.impl.querycache.subscriber.operation.PublisherCreateOperation.runInitialQuery(PublisherCreateOperation.java:176)
	at com.hazelcast.map.impl.querycache.subscriber.operation.PublisherCreateOperation.createSnapshot(PublisherCreateOperation.java:164)
	at com.hazelcast.map.impl.querycache.subscriber.operation.PublisherCreateOperation.run(PublisherCreateOperation.java:88)
	at com.hazelcast.spi.impl.operationservice.Operation.call(Operation.java:184)
	at com.hazelcast.spi.impl.operationservice.impl.OperationRunnerImpl.call(OperationRunnerImpl.java:215)
	at com.hazelcast.spi.impl.operationservice.impl.OperationRunnerImpl.run(OperationRunnerImpl.java:204)
	at com.hazelcast.spi.impl.operationexecutor.impl.OperationExecutorImpl.run(OperationExecutorImpl.java:394)
	at com.hazelcast.spi.impl.operationexecutor.impl.OperationExecutorImpl.runOrExecute(OperationExecutorImpl.java:421)
	at com.hazelcast.spi.impl.operationservice.impl.Invocation.doInvokeLocal(Invocation.java:590)
	at com.hazelcast.spi.impl.operationservice.impl.Invocation.doInvoke(Invocation.java:575)
	at com.hazelcast.spi.impl.operationservice.impl.Invocation.invoke0(Invocation.java:534)
	at com.hazelcast.spi.impl.operationservice.impl.Invocation.invoke(Invocation.java:236)
	at com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.invokeOnTarget(OperationServiceImpl.java:337)
	at com.hazelcast.map.impl.querycache.NodeInvokerWrapper.invokeOnTarget(NodeInvokerWrapper.java:68)
	at com.hazelcast.map.impl.querycache.subscriber.NodeQueryCacheEndToEndConstructor.createPublishersAndGetQueryResults(NodeQueryCacheEndToEndConstructor.java:79)
	at com.hazelcast.map.impl.querycache.subscriber.NodeQueryCacheEndToEndConstructor.createPublisherAccumulator(NodeQueryCacheEndToEndConstructor.java:56)
	at com.hazelcast.map.impl.querycache.subscriber.AbstractQueryCacheEndToEndConstructor.createNew(AbstractQueryCacheEndToEndConstructor.java:94)
	at com.hazelcast.map.impl.querycache.subscriber.AbstractQueryCacheEndToEndConstructor.createNew(AbstractQueryCacheEndToEndConstructor.java:41)
	at com.hazelcast.map.impl.querycache.subscriber.QueryCacheEndToEndProvider.tryCreateQueryCache(QueryCacheEndToEndProvider.java:88)
	at com.hazelcast.map.impl.querycache.subscriber.QueryCacheEndToEndProvider.getOrCreateQueryCache(QueryCacheEndToEndProvider.java:56)
	at com.hazelcast.map.impl.proxy.MapProxyImpl.createQueryCache(MapProxyImpl.java:1085)
	at com.hazelcast.map.impl.proxy.MapProxyImpl.getQueryCacheInternal(MapProxyImpl.java:1078)
	at com.hazelcast.map.impl.proxy.MapProxyImpl.getQueryCache(MapProxyImpl.java:1034)
	at com.myexample.HazelcastLocalDao.prepare(HazelcastLocalDao.java:79)
```

Reproduction:
```java
import java.util.Collection;
import java.util.Map;

import com.hazelcast.config.Config;
import com.hazelcast.config.MapConfig;
import com.hazelcast.config.MapStoreConfig;
import com.hazelcast.config.PredicateConfig;
import com.hazelcast.config.QueryCacheConfig;
import com.hazelcast.core.Hazelcast;
import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.map.IMap;
import com.hazelcast.map.MapLoader;
import com.hazelcast.map.MapStore;
import com.hazelcast.map.QueryCache;
import com.hazelcast.query.impl.predicates.TruePredicate;

import static com.hazelcast.config.InMemoryFormat.BINARY;

public class QueryCacheGetBug {

	public static void main(String[] args) {
		Config config = new Config()
			.setClusterName("test-cluster")
			.addMapConfig(mapConf());

		HazelcastInstance hz = Hazelcast.newHazelcastInstance(config);
		IMap<Object, Object> testMap = hz.getMap("testMap");

		QueryCache<Object, Object> testMapCache = testMap.getQueryCache("testMap");
	}

	private static MapConfig mapConf() {
		String mapName = "testMap";
		MapConfig conf = new MapConfig(mapName).setMapStoreConfig(new MapStoreConfig().setImplementation(new Loader()));
		conf.addQueryCacheConfig(new QueryCacheConfig()
			.setName(mapName)
			.setPredicateConfig(new PredicateConfig(TruePredicate.INSTANCE))
			.setIncludeValue(true)
			.setInMemoryFormat(BINARY)
			.setPopulate(true)
			.setDelaySeconds(0)
		);
		return conf;
	}

	private static final class Loader implements MapLoader, MapStore {
		@Override
		public Object load(Object key) {
			return null;
		}
		@Override
		public Map loadAll(Collection keys) {
			return null;
		}
		@Override
		public Iterable loadAllKeys() {
			return null;
		}
		@Override
		public void store(Object key, Object value) {
		}
		@Override
		public void storeAll(Map map) {
		}
		@Override
		public void delete(Object key) {
		}
		@Override
		public void deleteAll(Collection keys) {
		}
	}
}
```

HazelcastLocalDao.prepare just calls `getQueryCache` on each map on preconfigured list. Works fine on 3.12, breaks on 4.0. If it's an intended behaviour, it should be in migration document as a breaking change, but looks rather like a bug.

Java: OpenJDK 13
System: Windows 10
Ran inside IntelliJ IDEA