``` java
@Test
public void equalsReadLocalBackup() {
    TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);

    Config config = new Config();
    config.addMapConfig(new MapConfig("objectMap").setInMemoryFormat(InMemoryFormat.OBJECT).setReadBackupData(true));

    HazelcastInstance hz1 = factory.newHazelcastInstance(config);
    HazelcastInstance hz2 = factory.newHazelcastInstance(config);

    Pair pair = new Pair("a", "1");

    IMap<String, Pair> objectMap1 = hz1.getMap("objectMap");
    IMap<String, Pair> objectMap2 = hz2.getMap("objectMap");

    objectMap1.put("1", pair);
    Pair v1 = objectMap1.get("1");
    Pair v2 = objectMap1.get("1");

    Pair rv1 = objectMap2.get("1");
    Pair rv2 = objectMap2.get("1");
    assertNotSame(pair, v1);
    assertNotSame(pair, v2);
    assertNotSame(v1, v2);

    assertNotSame(pair, rv1);
    assertNotSame(pair, rv2);
    assertNotSame(rv1, rv2);

    assertTrue(objectMap2.containsValue(v1));
}
```

This tests fails on assertNotSame(rv1, rv2); which means readBackupData(true) exposes the internal value which now could be changed without the need to change the HZ stored (binary) internal value.

The reason is because in MapProxySupport::getInternal retrieves the value from ObjectRecord::getValue and returns it directly without doing extra (de-)serialization or copy step.
