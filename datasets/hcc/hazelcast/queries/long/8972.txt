In the scenario where you create a cache like;

``` java
        cache = cacheManager.getCache("test",String.class, CustomPOJO.class);
        if (cache == null) {
            MutableConfiguration<String, CustomPOJO> cconfig = new MutableConfiguration<>();
            cache = cacheManager.createCache("test", cconfig);
        }
```

If a cluster member is started where CustomPojo can not be loaded by the context classloader of the hz._hzInstance_1_development.generic-operation.thread-3 thread then repeated errors are thrown and the cluster member never starts.

``` java
[2016-09-23T22:16:23.394+0100] [Payara 4.1] [SEVERE] [] [com.hazelcast.spi.impl.operationexecutor.classic.ClassicOperationExecutor] [tid: _ThreadID=74 _ThreadName=hz._hzInstance_1_development.generic-operation.thread-3] [timeMillis: 1474665383394] [levelValue: 1000] [[
  [192.168.139.128]:5901 [development] [3.6.4] Failed to process packet: Packet{header=17, isResponse=false, isOperation=true, isEvent=false, partitionId=-1, conn=Connection [/192.168.139.128:54657 -> /192.168.139.128:5900], endpoint=Address[192.168.139.128]:5900, alive=true, type=MEMBER} on hz._hzInstance_1_development.generic-operation.thread-3
com.hazelcast.nio.serialization.HazelcastSerializationException: java.lang.ClassNotFoundException: fish.payara.testcases.payara1072.CustomPOJO
    at com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$ClassSerializer.read(JavaDefaultSerializers.java:181)
    at com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$ClassSerializer.read(JavaDefaultSerializers.java:169)
    at com.hazelcast.internal.serialization.impl.StreamSerializerAdapter.read(StreamSerializerAdapter.java:46)
    at com.hazelcast.internal.serialization.impl.AbstractSerializationService.readObject(AbstractSerializationService.java:214)
    at com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readObject(ByteArrayObjectDataInput.java:600)
    at com.hazelcast.config.CacheConfig.readData(CacheConfig.java:543)
    at com.hazelcast.internal.serialization.impl.DataSerializer.read(DataSerializer.java:121)
    at com.hazelcast.internal.serialization.impl.DataSerializer.read(DataSerializer.java:47)
    at com.hazelcast.internal.serialization.impl.StreamSerializerAdapter.read(StreamSerializerAdapter.java:46)
    at com.hazelcast.internal.serialization.impl.AbstractSerializationService.readObject(AbstractSerializationService.java:214)
    at com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readObject(ByteArrayObjectDataInput.java:600)
    at com.hazelcast.cache.impl.operation.PostJoinCacheOperation.readInternal(PostJoinCacheOperation.java:64)
    at com.hazelcast.spi.Operation.readData(Operation.java:557)
    at com.hazelcast.internal.serialization.impl.DataSerializer.read(DataSerializer.java:121)
    at com.hazelcast.internal.serialization.impl.DataSerializer.read(DataSerializer.java:47)
    at com.hazelcast.internal.serialization.impl.StreamSerializerAdapter.read(StreamSerializerAdapter.java:46)
    at com.hazelcast.internal.serialization.impl.AbstractSerializationService.readObject(AbstractSerializationService.java:214)
    at com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readObject(ByteArrayObjectDataInput.java:600)
    at com.hazelcast.cluster.impl.operations.PostJoinOperation.readInternal(PostJoinOperation.java:136)
    at com.hazelcast.spi.Operation.readData(Operation.java:557)
    at com.hazelcast.cluster.impl.operations.FinalizeJoinOperation.readInternal(FinalizeJoinOperation.java:178)
    at com.hazelcast.spi.Operation.readData(Operation.java:557)
    at com.hazelcast.internal.serialization.impl.DataSerializer.read(DataSerializer.java:121)
    at com.hazelcast.internal.serialization.impl.DataSerializer.read(DataSerializer.java:47)
    at com.hazelcast.internal.serialization.impl.StreamSerializerAdapter.read(StreamSerializerAdapter.java:46)
    at com.hazelcast.internal.serialization.impl.AbstractSerializationService.toObject(AbstractSerializationService.java:170)
    at com.hazelcast.spi.impl.NodeEngineImpl.toObject(NodeEngineImpl.java:234)
    at com.hazelcast.spi.impl.operationservice.impl.OperationRunnerImpl.run(OperationRunnerImpl.java:378)
    at com.hazelcast.spi.impl.operationexecutor.classic.OperationThread.processPacket(OperationThread.java:184)
    at com.hazelcast.spi.impl.operationexecutor.classic.OperationThread.process(OperationThread.java:137)
    at com.hazelcast.spi.impl.operationexecutor.classic.OperationThread.doRun(OperationThread.java:124)
    at com.hazelcast.spi.impl.operationexecutor.classic.OperationThread.run(OperationThread.java:99)
Caused by: java.lang.ClassNotFoundException: fish.payara.testcases.payara1072.CustomPOJO
    at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
    at com.sun.enterprise.loader.CurrentBeforeParentClassLoader.loadClass(CurrentBeforeParentClassLoader.java:82)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
    at com.hazelcast.nio.ClassLoaderUtil.tryLoadClass(ClassLoaderUtil.java:137)
    at com.hazelcast.nio.ClassLoaderUtil.loadClass(ClassLoaderUtil.java:115)
    at com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$ClassSerializer.read(JavaDefaultSerializers.java:179)
    ... 31 more
]]
```

A workaround is to make the cache untyped.

``` java
        cache = cacheManager.getCache("test");
        if (cache == null) {
            MutableConfiguration cconfig = new MutableConfiguration<>();
            cache = cacheManager.createCache("test", cconfig);
        }
```

It may seem obvious that this is true. However the subtlety arises when the class is available within a classloader within the same JVM but not to the Hazelcast threads as they are booted with a different classloader. This is often the case in an application server.
