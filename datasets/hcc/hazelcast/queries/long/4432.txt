Memory leak when more then one thread try to lock on IMap key at the same time

tested on hazelcast version 3.4:

``` java
        HazelcastInstance hz = Hazelcast.newHazelcastInstance();
        final IMap<Object, Object> testMap = hz.getMap("test");


        ExecutorService executorService = Executors.newFixedThreadPool(1);

        final AtomicInteger keySeq = new AtomicInteger(0);
        final AtomicBoolean done = new AtomicBoolean(false);

        while (true) {
            done.set(false);
            int uniquePart = keySeq.incrementAndGet();

            final int[] fatKey = new int[1000];
            fatKey[0] = uniquePart;

            testMap.lock(fatKey);


            executorService.execute(new Runnable() {
                @Override
                public void run() {

                    testMap.lock(fatKey);
                    testMap.unlock(fatKey);

                    done.set(true);
                }
            });

            // waiting second thread lock
            try {
                TimeUnit.MILLISECONDS.sleep(1);
            } catch (InterruptedException e) {
            }

            testMap.unlock(fatKey);

            while (!done.get()) {
                try {
                    TimeUnit.MILLISECONDS.sleep(1);
                } catch (InterruptedException e) {
                }
            }

        }
```
