Hi,

I am working with Hazelcast version 3.2. I assume that none of the store and load methods of MapStore/MapLoader are executed concurrently for the same key. However, in the following scenario, this assumption is violated:

I am load-testing our application that keeps data in a distributed map with a map store with write-behind 5s and eviction based on map-size. The data is frequently updated via an entry processors and read via simple gets. In configurations of my test that cause "thrashing", i.e., the working set is larger than the sum of all nodes' maximal map-sizes, I'm facing problems that can most likely only be caused by 

1) the MapStore#store (or MapStore#storeAll) method being executed twice at the same time for one key, and 
2) the MapStore#store (or MapStore#storeAll) method being executed concurrently with the MapLoader#load method for the same key (in this case, the MapLoader#load method is triggered by the execution of the entry processor's backup processor on the backup node in my tests)

Unfortunately, I could not write a simple test to reproduce the problem. From looking at the implementation of eviction, however, it seems to me that a store-call caused by the eviction of a key could very well overlap with a regular store-call for the same key (if an update and the eviction of the key are close in time). What seems less plausible is that a store and a load for the same key can be executed at the same time, since a load should only be triggered if the corresponding key is not currently in memory, while a store should only be triggered if the key is currently in the map in memory. Nevertheless, it seems to happen.

Cheers,
Andreas
