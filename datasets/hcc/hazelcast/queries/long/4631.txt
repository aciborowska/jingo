According to the spec;

> Depending on the implementation and Cache topology, e.g., a storage-backed or distributed caches, the contents of a closed Cache may still be available and accessible by other applications or in fact via the Cache Manager that previously owned the Cache if an application calls getCache at some point in the future.

CacheManager.getCache() method should let access to the closed cache and re-open it. However, cache can be accessed by getCache but is still closed.

``` java
    @org.junit.Test
    public void testGetCacheAfterClose() {
        CachingProvider provider = HazelcastServerCachingProvider
                .createCachingProvider(Hazelcast.newHazelcastInstance());

        CacheManager cacheManager = provider.getCacheManager();

        String cacheName = "test";
        Cache<Object, Object> cache = cacheManager.createCache(cacheName, new CacheConfig());
        cache.close();
        Assert.assertTrue(cache.isClosed());

        Cache<Object, Object> cacheAfterClose = cacheManager.getCache(cacheName);
        Assert.assertNotNull(cacheAfterClose);
        Assert.assertFalse("Cache should be opened after CacheManager.getCache() is called", cacheAfterClose.isClosed());
    }
```
