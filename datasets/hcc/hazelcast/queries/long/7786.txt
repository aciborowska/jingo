Hi,

Using 3.6 I have the below in hazelcast-client config, where MyPortableFactory is coming from a shared module.

```
    <serialization>
        <portable-factories>
            <portable-factory factory-id="1">MyPortableFactory</portable-factory>
        </portable-factories>
    </serialization>
```

When I try to put a class which implements Portable in a distributed map I get "Could not find PortableFactory for factory-id: 1". I put println in [writePortable] of this class and I see [writePortable] called twice before the exception triggers. [readPortable] is never called.

However, when I configure the client instance programmatically like below, it works:

```
        ClientConfig clientConfig = new ClientConfig();
        SerializationConfig srzConfig = clientConfig.getSerializationConfig();
        srzConfig.addPortableFactoryClass(1, "MyPortableFactory");
        _hazelcastInstance = HazelcastClient.newHazelcastClient(clientConfig);
```

Is this an issue with the xml configuration for PortableFactory, or I'm doing something wrong?

I have put the same <serialization> element in the nodes and still didn't work. 

Below are the 2 classes used:

```
public class DummyData implements Portable {

    private Long id;
    private String name;

    public DummyData() {
    }

    public DummyData(Long id, String name) {
        this.id = id;
        this.name = name;
    }

    @Override
    public int getFactoryId() {
        return MyPortableFactory.FACTORY_ID;
    }

    @Override
    public int getClassId() {
        return MyPortableFactory.CLASS_ID_DUMMYDATA;
    }

    @Override
    public void writePortable(PortableWriter writer) throws IOException {

        System.out.println("Serialize");

        writer.writeLong("id", id);
        writer.writeUTF( "name", name );
    }

    @Override
    public void readPortable(PortableReader reader) throws IOException {

        System.out.println("Deserialize");

        id = reader.readLong("id");
        name = reader.readUTF("name");
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}

public class MyPortableFactory implements PortableFactory {

    public final static int CLASS_ID_DUMMYDATA = 1;

    public final static int FACTORY_ID = 1;

    @Override
    public Portable create(int classId) {

        switch (classId) {
            case CLASS_ID_DUMMYDATA:
                return new DummyData();
            default:
                return null;
        }
    }
}
```
