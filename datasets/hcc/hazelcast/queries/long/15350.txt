We have introduced  on-join behavior (for 3.11.x: `hazelcast.security.permissions.operation.on-join`) for [handling the security permissions](https://docs.hazelcast.org/docs/3.11.3/manual/html-single/index.html#handling-permissions-when-a-new-member-joins). 

When the on-join mode is `SEND`, the member is supposed to send its security configuration to other nodes. So, other nodes will receive this and refresh their security configuration. 

There is an edge case: 

If we want to **enable** security configuration by restarting a node with `on-join=SEND`, we get a `NullPointerException` because other nodes don't have security configuration.  

Don't we support enabling security configuration via rolling upgrade? 
If we don't support it, I want to update the documentation with the reasons and limitations. 
If we do support it, I think we should handle this case.

The following is the stack trace: 

```
Exception in thread "main" java.lang.NullPointerException
	at com.hazelcast.internal.management.operation.UpdatePermissionConfigOperation.run(UpdatePermissionConfigOperation.java:54)
	at com.hazelcast.spi.Operation.call(Operation.java:148)
	at com.hazelcast.spi.impl.operationservice.impl.OperationRunnerImpl.call(OperationRunnerImpl.java:202)
	at com.hazelcast.spi.impl.operationservice.impl.OperationRunnerImpl.run(OperationRunnerImpl.java:191)
	at com.hazelcast.spi.impl.operationservice.impl.OperationRunnerImpl.run(OperationRunnerImpl.java:405)
	at com.hazelcast.spi.impl.operationexecutor.impl.OperationThread.process(OperationThread.java:115)
	at com.hazelcast.spi.impl.operationexecutor.impl.OperationThread.run(OperationThread.java:100)
	at ------ submitted from ------.(Unknown Source)
	at com.hazelcast.spi.impl.operationservice.impl.InvocationFuture.resolve(InvocationFuture.java:127)
	at com.hazelcast.spi.impl.AbstractInvocationFuture$1.run(AbstractInvocationFuture.java:250)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
	at com.hazelcast.util.executor.HazelcastManagedThread.executeRun(HazelcastManagedThread.java:64)
	at com.hazelcast.util.executor.HazelcastManagedThread.run(HazelcastManagedThread.java:80)
```


 