```
    void testEntryProcessor() {
        final HazelcastInstance instance1 = Hazelcast.newHazelcastInstance();
        final HazelcastInstance instance2 = Hazelcast.newHazelcastInstance();

        final IMap<Object, Object> map = instance2.getMap("map");
        map.put("key", new SimpleValue(1));
        map.executeOnKey("key", new EntryInc());
        map.executeOnKey("key", new EntryInc());
        map.executeOnKey("key", new EntryInc());
        map.executeOnKey("key", new EntryInc());

    }

    public static class EntryInc extends AbstractEntryProcessor<String, SimpleValue> {

        @Override
        public Object process(final Map.Entry<String, SimpleValue> entry) {
            final SimpleValue value = entry.getValue();
            System.err.println("before i: " + value.i);
            value.i++;
            System.err.println("after i: " + value.i);
            return null;
        }
    }

    public static class SimpleValue implements Serializable {

        public int i;

        public SimpleValue() {
        }

        public SimpleValue(final int i) {
            this.i = i;
        }
    }
```
