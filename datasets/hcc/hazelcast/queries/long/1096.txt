Hi,

The following code does not remove entries from cache:

```
    Predicate f = Predicates.equal("documentId", docId);
    Set<XDMDataKey> xdmKeys = xdmCache.keySet(f);
    logger.trace("process; got {} document elements to remove", xdmKeys.size());
    int cnt = 0;
        for (XDMDataKey key: xdmKeys) {
            if (xdmCache.remove(key) != null) {
                cnt++;
            } else {
                logger.trace("process; data not found for key {}", key);
                logger.trace("process; get returns: {}", xdmCache.get(key));
            }
        }
```

log output is: 

process; got 71 document elements to remove
process; data not found for key DataDocumentKey [dataId=408, documentId=50000]
process; get returns: null
process; data not found for key DataDocumentKey [dataId=381, documentId=50000]
process; get returns: null
.............

How this can be? The keys just returned from the same cache!.

I use Hazelcast 3.0. Please help me undersatnd what is going on.

Thanks, Denis.

DataDocumentKey class is:

public class DataDocumentKey extends XDMDataKey implements Portable, PartitionAware<Long> {

```
public DataDocumentKey() {
    super();
}

public DataDocumentKey(long dataId, long documentId) {
    super(dataId, documentId);
}

@Override
public Long getPartitionKey() {
    return documentId;
}

@Override
public int getClassId() {
    return cli_DataDocumentKey;
}

@Override
public int getFactoryId() {
    return factoryId;
}

@Override
public void readPortable(PortableReader in) throws IOException {
    dataId = in.readLong("dataId");
    documentId = in.readLong("documentId");
}

@Override
public void writePortable(PortableWriter out) throws IOException {
    out.writeLong("dataId", dataId);
    out.writeLong("documentId", documentId);
}
```

}

public class XDMDataKey {

```
protected long dataId;
protected long documentId;

public XDMDataKey() {
    //
}

public XDMDataKey(long dataId, long documentId) {
    this.dataId = dataId;
    this.documentId = documentId;
}

public long getDataId() {
    return dataId;
}

public long getDocumentId() {
    return documentId;
}

/* (non-Javadoc)
 * @see java.lang.Object#hashCode()
 */
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + (int) (dataId ^ (dataId >>> 32));
    result = prime * result + (int) (documentId ^ (documentId >>> 32));
    return result;
}

/* (non-Javadoc)
 * @see java.lang.Object#equals(java.lang.Object)
 */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null) {
        return false;
    }
    if (getClass() != obj.getClass()) {
        return false;
    }
    XDMDataKey other = (XDMDataKey) obj;
    if (dataId != other.dataId) {
        return false;
    }
    if (documentId != other.documentId) {
        return false;
    }
    return true;
}

/* (non-Javadoc)
 * @see java.lang.Object#toString()
 */
@Override
public String toString() {
    return getClass().getSimpleName() + " [dataId=" + dataId + ", documentId=" + documentId + "]";
}
```

}

Server config:

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:hz="http://www.hazelcast.com/schema/spring"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.hazelcast.com/schema/spring http://www.hazelcast.com/schema/spring/hazelcast-spring-3.0.xsd">

```
<!-- Beans Declaration -->
<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="locations">
        <list>
            <value>classpath:/xdm-cache-server.properties</value>
        </list>
    </property>
</bean>

<context:annotation-config />

<hz:hazelcast id="hzInstance">
    <hz:config>
        <hz:instance-name>hzInstance</hz:instance-name>
        <!--hz:group name="dev" password="password" /-->
        <hz:properties>
            <hz:property name="hazelcast.jmx">true</hz:property>
            <hz:property name="hazelcast.jmx.detailed">true</hz:property>
            <hz:property name="hazelcast.logging.type">slf4j</hz:property>
        </hz:properties>
        <hz:network port="5701" port-auto-increment="true">
            <hz:join>
                <hz:multicast enabled="false" />
                <hz:tcp-ip enabled="true">
                    <hz:members>${xdm.cluster.address}</hz:members>
                </hz:tcp-ip>
            </hz:join>
        </hz:network>
        <hz:executor-service name="xdm-exec-pool" pool-size="${xdm.cache.threads.invocationScheme}" />
        <hz:map name="dict-namespace">
            <hz:near-cache time-to-live-seconds="0" max-idle-seconds="60" eviction-policy="LRU" 
                max-size="0" invalidate-on-change="true"/>
        </hz:map>
        <hz:map name="dict-path">
            <hz:near-cache time-to-live-seconds="0" max-idle-seconds="60" eviction-policy="LRU" 
                max-size="0" invalidate-on-change="true"/>
            <hz:indexes>
                <hz:index attribute="typeId"/>
                <hz:index attribute="path" ordered="true"/>
            </hz:indexes>
        </hz:map>
        <hz:map name="dict-document-type">
            <hz:near-cache time-to-live-seconds="0" max-idle-seconds="60" eviction-policy="LRU" 
                max-size="0" invalidate-on-change="true"/>
        </hz:map>
        <hz:map name="xdm-data">
            <hz:indexes>
                <hz:index attribute="documentId"/>
                <hz:index attribute="path" ordered="true"/>
                <hz:index attribute="value"/>
            </hz:indexes>
        </hz:map>
        <hz:map name="xdm-document">
        </hz:map>
        <hz:serialization>
            <hz:portable-factories>
                <hz:portable-factory factory-id="1" class-name="com.bagri.xdm.access.hazelcast.pof.XDMPortableFactory"/>
            </hz:portable-factories>
            <hz:serializers>
                <!--hz:global-serializer class-name="com.hazelcast.nio.serialization.PortableSerializer"/-->
                <hz:serializer type-class="com.bagri.xdm.XDMData" class-name="com.bagri.xdm.access.hazelcast.pof.XDMDataSerializer"/>
                <hz:serializer type-class="com.bagri.xdm.XDMPath" class-name="com.bagri.xdm.access.hazelcast.pof.XDMPathSerializer"/>
                <hz:serializer type-class="com.bagri.xdm.XDMDocument" class-name="com.bagri.xdm.access.hazelcast.pof.XDMDocumentSerializer"/>
                <hz:serializer type-class="com.bagri.xdm.XDMDocumentType" class-name="com.bagri.xdm.access.hazelcast.pof.XDMDocumentTypeSerializer"/>
                <hz:serializer type-class="com.bagri.xdm.XDMNamespace" class-name="com.bagri.xdm.access.hazelcast.pof.XDMNamespaceSerializer"/>
            </hz:serializers>
        </hz:serialization>
    </hz:config>
</hz:hazelcast>

<hz:map id="xdm-document" name="xdm-document" instance-ref="hzInstance" />
<hz:map id="xdm-data" name="xdm-data" instance-ref="hzInstance" />
<hz:map id="dict-document-type" name="dict-document-type" instance-ref="hzInstance" />
<hz:map id="dict-path" name="dict-path" instance-ref="hzInstance" />
<hz:map id="dict-namespace" name="dict-namespace" instance-ref="hzInstance" />

<hz:idGenerator id="xdm.document" name="xdm.document" instance-ref="hzInstance"/>
<hz:idGenerator id="xdm.data" name="xdm.data" instance-ref="hzInstance"/>
<hz:idGenerator id="xdm.path" name="xdm.path" instance-ref="hzInstance"/>
<hz:idGenerator id="xdm.namespace" name="xdm.namespace" instance-ref="hzInstance"/>
<hz:idGenerator id="xdm.doctype" name="xdm.doctype" instance-ref="hzInstance"/>

<hz:executorService id="xdm-exec-pool" name="xdm-exec-pool" instance-ref="hzInstance"/>
```

</beans>

Client config:

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:hz="http://www.hazelcast.com/schema/spring"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.hazelcast.com/schema/spring http://www.hazelcast.com/schema/spring/hazelcast-spring-3.0.xsd">

```
<bean id="hzInstance" class="com.bagri.xdm.access.hazelcast.impl.HazelcastClientBuilder" factory-method="newHazelcastClient">
    <constructor-arg>
        <bean class="com.hazelcast.client.config.ClientConfig">
            <property name="addresses">
                <list>
                    <value>localhost:5701</value>
                    <value>localhost:5702</value>
                    <value>localhost:5703</value>
                    <value>localhost:5704</value>
                </list>
            </property>
            <property name="smart" value="true"/>
        </bean>
    </constructor-arg>
</bean>

<hz:map id="xdm-document" name="xdm-document" instance-ref="hzInstance" />
<hz:map id="xdm-data" name="xdm-data" instance-ref="hzInstance" />
<hz:map id="dict-document-type" name="dict-document-type" instance-ref="hzInstance" />
<hz:map id="dict-path" name="dict-path" instance-ref="hzInstance" />
<hz:map id="dict-namespace" name="dict-namespace" instance-ref="hzInstance" />

<hz:idGenerator id="xdm.document" name="xdm.document" instance-ref="hzInstance"/>
<hz:idGenerator id="xdm.data" name="xdm.data" instance-ref="hzInstance"/>
<hz:idGenerator id="xdm.path" name="xdm.path" instance-ref="hzInstance"/>
<hz:idGenerator id="xdm.namespace" name="xdm.namespace" instance-ref="hzInstance"/>
<hz:idGenerator id="xdm.doctype" name="xdm.doctype" instance-ref="hzInstance"/>

<hz:executorService id="xdm-exec-pool" name="xdm-exec-pool" instance-ref="hzInstance"/>
```

</beans>
