It seems objects are unnecessarily de-serialized on server-side when Cache.get() is called.

``` java
    @org.junit.Test
    public void testCacheGet_withCustomSerialization() {
        Hazelcast.newHazelcastInstance();

        ClientConfig config = new ClientConfig();
        SerializerConfig serializerConfig = new SerializerConfig()
                .setImplementation(new FooXmlSerializer())
                .setTypeClass(Foo.class);
        config.getSerializationConfig().addSerializerConfig(serializerConfig);
        HazelcastInstance hazelcastClient = HazelcastClient.newHazelcastClient(config);

        CachingProvider provider = HazelcastClientCachingProvider.createCachingProvider(hazelcastClient);
        CacheManager cacheManager = provider.getCacheManager();

        String cacheName = "test";
        Cache<Object, Foo> cache = cacheManager.createCache(cacheName, new CacheConfig());
        String key = "foo";
        Foo valueBefore = new Foo();
        cache.put(key, valueBefore);
        Foo valueAfter = cache.get(key);
        assertEquals(valueBefore, valueAfter);
    }

    private class Foo {
        private String foo;

        public String getFoo() {
            return foo;
        }

        public void setFoo(String foo) {
            this.foo = foo;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            Foo foo1 = (Foo) o;

            if (foo != null ? !foo.equals(foo1.foo) : foo1.foo != null) return false;

            return true;
        }

        @Override
        public int hashCode() {
            return foo != null ? foo.hashCode() : 0;
        }
    }

    public class FooXmlSerializer implements StreamSerializer<Foo> {

        @Override
        public int getTypeId() {
            return 10;
        }

        @Override
        public void write(ObjectDataOutput out, Foo object) throws IOException {
            out.writeUTF(object.getFoo());
        }

        @Override
        public Foo read(ObjectDataInput in) throws IOException {
            Foo foo = new Foo();
            foo.setFoo(in.readUTF());
            return foo;
        }

        @Override
        public void destroy() {
        }
    }
```
