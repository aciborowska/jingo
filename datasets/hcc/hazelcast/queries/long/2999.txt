Xlarge test cluster, of Final profile, failed at 19h 52m 30s
(while other cluster size remained running)

   message='Worked ran into an unhandled exception'
   type='Worker exception'
   agentAddress=10.71.157.213
   time=Fri Jul 11 07:25:08 UTC 2014
   workerAddress=client:10.71.157.213
   workerId=worker-10.71.157.213-4-client
   test=TestCase{
          id=MapTransactionTest
        , class=com.hazelcast.stabilizer.tests.map.MapTransactionTest
        , basename=MapTransactionTest
        , keyCount=1000
        , threadCount=3
    }
   cause=com.hazelcast.core.OperationTimeoutException: No response for 120000 ms. Aborting invocation! InvocationFuture{invocation=BasicInvocation{ serviceName='hz:impl:mapService', op=TxnLockAndGetO
peration{timeout=120000, thread=52}, partitionId=250, replicaIndex=0, tryCount=250, tryPauseMillis=500, invokeCount=1, callTimeout=60000, target=Address[10.71.157.213]:5701}, done=false} No response
has been send  backups-expected: 0 backups-completed: 0 reinvocations: 0
    at com.hazelcast.spi.impl.BasicInvocation$InvocationFuture.newOperationTimeoutException(BasicInvocation.java:782)
    at com.hazelcast.spi.impl.BasicInvocation$InvocationFuture.waitForResponse(BasicInvocation.java:760)
    at com.hazelcast.spi.impl.BasicInvocation$InvocationFuture.get(BasicInvocation.java:697)
    at com.hazelcast.spi.impl.BasicInvocation$InvocationFuture.get(BasicInvocation.java:676)
    at com.hazelcast.map.tx.TransactionalMapProxySupport.lockAndGet(TransactionalMapProxySupport.java:196)
    at com.hazelcast.map.tx.TransactionalMapProxySupport.getForUpdateInternal(TransactionalMapProxySupport.java:104)
    at com.hazelcast.map.tx.TransactionalMapProxy.getForUpdate(TransactionalMapProxy.java:88)
    at com.hazelcast.map.client.AbstractTxnMapRequest.innerCall(AbstractTxnMapRequest.java:96)
    at com.hazelcast.client.txn.BaseTransactionRequest.call(BaseTransactionRequest.java:40)
    at com.hazelcast.client.CallableClientRequest.process(CallableClientRequest.java:27)
    at com.hazelcast.client.ClientEngineImpl$ClientPacketProcessor.processRequest(ClientEngineImpl.java:499)
    at com.hazelcast.client.ClientEngineImpl$ClientPacketProcessor.run(ClientEngineImpl.java:446)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
    at java.lang.Thread.run(Thread.java:745)
    at com.hazelcast.util.executor.PoolExecutorThreadFactory$ManagedThread.run(PoolExecutorThreadFactory.java:59)
    at ------ End remote and begin local stack-trace ------.(Unknown Source)
    at com.hazelcast.spi.impl.BasicInvocation$InvocationFuture.resolveResponse(BasicInvocation.java:862)
    at com.hazelcast.spi.impl.BasicInvocation$InvocationFuture.resolveResponseOrThrowException(BasicInvocation.java:795)
    at com.hazelcast.spi.impl.BasicInvocation$InvocationFuture.get(BasicInvocation.java:698)
    at com.hazelcast.spi.impl.BasicInvocation$InvocationFuture.get(BasicInvocation.java:676)
    at com.hazelcast.map.tx.TransactionalMapProxySupport.lockAndGet(TransactionalMapProxySupport.java:196)
    at com.hazelcast.map.tx.TransactionalMapProxySupport.getForUpdateInternal(TransactionalMapProxySupport.java:104)
    at com.hazelcast.map.tx.TransactionalMapProxy.getForUpdate(TransactionalMapProxy.java:88)
    at com.hazelcast.map.client.AbstractTxnMapRequest.innerCall(AbstractTxnMapRequest.java:96)
    at com.hazelcast.client.txn.BaseTransactionRequest.call(BaseTransactionRequest.java:40)
    at com.hazelcast.client.CallableClientRequest.process(CallableClientRequest.java:27)
    at com.hazelcast.client.ClientEngineImpl$ClientPacketProcessor.processRequest(ClientEngineImpl.java:499)
    at com.hazelcast.client.ClientEngineImpl$ClientPacketProcessor.run(ClientEngineImpl.java:446)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
    at java.lang.Thread.run(Thread.java:745)
    at com.hazelcast.util.executor.PoolExecutorThreadFactory$ManagedThread.run(PoolExecutorThreadFactory.java:59)
    at ------ End remote and begin local stack-trace ------.(Unknown Source)
    at com.hazelcast.client.spi.impl.ClientCallFuture.resolveResponse(ClientCallFuture.java:160)
    at com.hazelcast.client.spi.impl.ClientCallFuture.get(ClientCallFuture.java:109)
    at com.hazelcast.client.spi.impl.ClientCallFuture.get(ClientCallFuture.java:90)
    at com.hazelcast.client.txn.proxy.ClientTxnProxy.invoke(ClientTxnProxy.java:54)
    at com.hazelcast.client.txn.proxy.ClientTxnMapProxy.getForUpdate(ClientTxnMapProxy.java:55)
    at com.hazelcast.stabilizer.tests.map.MapTransactionTest$Worker$1.execute(MapTransactionTest.java:124)
    at com.hazelcast.client.txn.ClientTransactionManager.executeTransaction(ClientTransactionManager.java:80)
    at com.hazelcast.client.txn.ClientTransactionManager.executeTransaction(ClientTransactionManager.java:73)
    at com.hazelcast.client.HazelcastClient.executeTransaction(HazelcastClient.java:299)
    at com.hazelcast.client.HazelcastClientProxy.executeTransaction(HazelcastClientProxy.java:135)
    at com.hazelcast.stabilizer.tests.map.MapTransactionTest$Worker.run(MapTransactionTest.java:120)
    at java.lang.Thread.run(Thread.java:745)
    at com.hazelcast.stabilizer.tests.utils.ThreadSpawner$DefaultThread.run(ThreadSpawner.java:88)

Then This exception is repeated on lots of different client workers.

  message='Worked ran into an unhandled exception'
   type='Worker exception'
   agentAddress=10.71.158.8
   time=Fri Jul 11 07:27:08 UTC 2014
   workerAddress=client:10.71.158.8
   workerId=worker-10.71.158.8-3-client
   test=TestCase{
          id=MapTransactionTest
        , class=com.hazelcast.stabilizer.tests.map.MapTransactionTest
        , basename=MapTransactionTest
        , keyCount=1000
        , threadCount=3
    }
   cause=com.hazelcast.transaction.TransactionException: Transaction couldn't obtain lock for the key:663
    at com.hazelcast.map.tx.TransactionalMapProxySupport.lockAndGet(TransactionalMapProxySupport.java:198)
    at com.hazelcast.map.tx.TransactionalMapProxySupport.getForUpdateInternal(TransactionalMapProxySupport.java:104)
    at com.hazelcast.map.tx.TransactionalMapProxy.getForUpdate(TransactionalMapProxy.java:88)
    at com.hazelcast.map.client.AbstractTxnMapRequest.innerCall(AbstractTxnMapRequest.java:96)
    at com.hazelcast.client.txn.BaseTransactionRequest.call(BaseTransactionRequest.java:40)
    at com.hazelcast.client.CallableClientRequest.process(CallableClientRequest.java:27)
    at com.hazelcast.client.ClientEngineImpl$ClientPacketProcessor.processRequest(ClientEngineImpl.java:499)
    at com.hazelcast.client.ClientEngineImpl$ClientPacketProcessor.run(ClientEngineImpl.java:446)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
    at java.lang.Thread.run(Thread.java:745)
    at com.hazelcast.util.executor.PoolExecutorThreadFactory$ManagedThread.run(PoolExecutorThreadFactory.java:59)
    at ------ End remote and begin local stack-trace ------.(Unknown Source)
    at com.hazelcast.client.spi.impl.ClientCallFuture.resolveResponse(ClientCallFuture.java:160)
    at com.hazelcast.client.spi.impl.ClientCallFuture.get(ClientCallFuture.java:109)
    at com.hazelcast.client.spi.impl.ClientCallFuture.get(ClientCallFuture.java:90)
    at com.hazelcast.client.txn.proxy.ClientTxnProxy.invoke(ClientTxnProxy.java:54)
    at com.hazelcast.client.txn.proxy.ClientTxnMapProxy.getForUpdate(ClientTxnMapProxy.java:55)
    at com.hazelcast.stabilizer.tests.map.MapTransactionTest$Worker$1.execute(MapTransactionTest.java:124)
    at com.hazelcast.client.txn.ClientTransactionManager.executeTransaction(ClientTransactionManager.java:80)
    at com.hazelcast.client.txn.ClientTransactionManager.executeTransaction(ClientTransactionManager.java:73)
    at com.hazelcast.client.HazelcastClient.executeTransaction(HazelcastClient.java:299)
    at com.hazelcast.client.HazelcastClientProxy.executeTransaction(HazelcastClientProxy.java:135)
    at com.hazelcast.stabilizer.tests.map.MapTransactionTest$Worker.run(MapTransactionTest.java:120)
    at java.lang.Thread.run(Thread.java:745)
    at com.hazelcast.stabilizer.tests.utils.ThreadSpawner$DefaultThread.run(ThreadSpawner.java:88)

and This exception's from the Verify step.

Failure[
   message='Worked ran into an unhandled exception'
   type='Worker exception'
   agentAddress=10.140.183.70
   time=Fri Jul 11 07:27:22 UTC 2014
   workerAddress=client:10.140.183.70
   workerId=worker-10.140.183.70-3-client
   test=unknown
   cause=java.lang.AssertionError: There should not be any data races expected:<0> but was:<1000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:555)
    at com.hazelcast.stabilizer.tests.map.MapTransactionTest.verify(MapTransactionTest.java:97)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:606)
    at com.hazelcast.stabilizer.worker.TestContainer.invoke(TestContainer.java:124)
    at com.hazelcast.stabilizer.worker.TestContainer.globalVerify(TestContainer.java:107)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:606)
    at com.hazelcast.stabilizer.worker.Worker$TestCommandRequestProcessingThread$2.doRun(Worker.java:366)
    at com.hazelcast.stabilizer.worker.Worker$CommandThread.run(Worker.java:449)
