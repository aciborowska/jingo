Hazelcast version is 2.5.

It is 2-node cluster where only 1 node is active, second is hot-standby and no activity relevant to the issue takes place there.

It seems like sometimes we get out-of-order delivery for messages sent to ITopic on the listener side, however the docs say the order of submitting messages to ITopic will be the order of these messages delivered to the listeners. 

It was noticed that MessageListener.onMessage() is called from different hz._hzInstance_1_....cached.thread-NNN threads, for each message submitted to ITopic.

Could it happen that m1,m2,m3 are all submitted to ITopic, then m1 is being delivered to listener L1, L2, L3 in thread T1, then m2 gets delivered by thread T2 to L1,L2,L3 and so on... but could it be that say listener L2 hangs for a little bit, and in the meantime thread T2 starts delivering to L1,L2,L3 - and this way L3 will get m2 message before m1?

In other words, does the call to ParallelExecutor.executeOrderedRunnable() guarantee that listener L2 will always be blocked with message m1 and m2 won't be delivered to it until L2 is done with m1.

We could not reproduce this in a clean lab test yet.

We do not set hazelcast.executor.event.thread.count explicitly, so it must be default 16, and according to code in ParallelExecutorService, it is ParallelExecutorImpl which is used. How could we check which implementation is used?

Any ideas or suggestions are welcome.
