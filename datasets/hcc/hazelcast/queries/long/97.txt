Test code:
package wjw.test.hazelcast.client.BenchMark;

import java.util.concurrent.CountDownLatch;
import java.util.concurrent.CyclicBarrier;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.locks.Lock;

import com.hazelcast.client.ClientConfig;
import com.hazelcast.client.HazelcastClient;
import com.hazelcast.core.HazelcastInstance;

public class LockBenchMarkMain {
  static final int COUNT = 50; //Thread Count
  static final int LOOP = 10000; //one thread loop count

  String serversURL = "127.0.0.1:5701";

  class Worker implements Runnable {
    private CyclicBarrier barrier;
    private CountDownLatch doneSignal;
    private int pos;

```
Worker(CyclicBarrier barrier, CountDownLatch doneSignal, int pos) {
  this.barrier = barrier;
  this.doneSignal = doneSignal;
  this.pos = pos;
}

public void run() {
  try {
    ClientConfig clientConfig = new ClientConfig();
    clientConfig.getGroupConfig().setName("dev").setPassword("dev-pass");
    String[] servers = serversURL.split(",");
    clientConfig.addAddress(servers);

    HazelcastInstance client = HazelcastClient.newHazelcastClient(clientConfig);
    Lock lock = client.getLock("Lock.AWS");
    barrier.await();

    System.out.println("Thread:" + pos + ",Start Call Lock");
    for (int i = 1; i <= LOOP; i++) {
      lock.lock();
      try {
        System.out.println("Thread:" + pos + ",get Lock");
      } finally {
        lock.unlock();
        System.out.println("Thread:" + pos + ",unLock");
      }
    }
  } catch (Exception e) {
    e.printStackTrace();
  } finally {
    System.out.println("Thread:" + pos + ",End Call Lock");
    doneSignal.countDown();
  }

}
```

  }

  public void doExecute(String[] args) {
    serversURL = args[0];

```
CyclicBarrier barrier = new CyclicBarrier(COUNT);
CountDownLatch doneSignal = new CountDownLatch(COUNT);

ClientConfig clientConfig = new ClientConfig();
clientConfig.getGroupConfig().setName("dev").setPassword("dev-pass");
String[] servers = serversURL.split(",");
clientConfig.addAddress(servers);

ExecutorService exec = Executors.newFixedThreadPool(COUNT);
long currentTimeMillis = System.currentTimeMillis();
for (int i = 0; i < COUNT; i++) {
  exec.submit(new Worker(barrier, doneSignal, i));
}

try {
  doneSignal.await(); //Wait for all threads to complete the work
} catch (InterruptedException ex) {
}
System.out.println((COUNT * LOOP) + ",Time-consuming" + (System.currentTimeMillis() - currentTimeMillis) / 1000.00 + "Seconds");
System.out.println("Average per second:" + ((COUNT * LOOP) / ((System.currentTimeMillis() - currentTimeMillis) / 1000.00)) + "Times");

exec.shutdown();
```

  }

  public static void main(String[] args) {
    if (args.length < 1) {
      System.out
          .println("Usage:java -Xms128m -cp ./classes:./lib/hazelcast-all-2.0.jar wjw.test.hazelcast.client.BenchMark.LockBenchMarkMain Server ip:Server port,Server ip:Server port,...");
      System.out
          .println("Example:java -Xms128m -cp ./classes:./lib/hazelcast-all-2.0.jar wjw.test.hazelcast.client.BenchMark.LockBenchMarkMain 192.168.1.100:5701,192.168.1.101:5702");
      System.exit(0);
    }

```
LockBenchMarkMain test = new LockBenchMarkMain();
test.doExecute(args);

System.exit(0);
```

  }

}
