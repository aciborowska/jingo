Hi,

while reading the source code related to NULL_OBJECT in NearCache, I stumbled across the two following possible issues. I'm not fully sure they are issues, but they suspiciously look like this type :-)
1. in MapProxySupport.getAsyncInternal()

```
        if (nearCacheEnabled) {
            Object cached = mapService.getFromNearCache(name, key);
            if (cached != null && NearCache.NULL_OBJECT.equals(cached)) {
                return new CompletedFuture<Data>(
                        nodeEngine.getSerializationService(),
                        cached);
            }
        }
```

Why do you only return the NULL_OBJECT from the NearCache here? Shouldn't it be the other way around? Something like

```
if (cached != null && !NearCache.NULL_OBJECT.equals(cached))
```
1. in MapProxySupport.getAllObjectInternal()

```
        if (nearCacheEnabled) {
            final Iterator<Data> iterator = keys.iterator();
            while (iterator.hasNext()) {
                Data key = iterator.next();
                Object cachedValue = mapService.getFromNearCache(name, key);
                if (cachedValue != null && !NearCache.NULL_OBJECT.equals(cachedValue)) {
                    result.put(key, cachedValue);
                    iterator.remove();
                }
            }
        }
```

Here the cached null values could probably be removed from the iterator as well, even though the cached value should not be added to the result map. Something like (in pseudo-code)

```
  if (cachedValue != null) {
    if(!NearCache.NULL_OBJECT.equals(cachedValue)) {
      result.put(key, cachedValue);
    }
    iterator.remove()
  }
```

Cheers,
Lukas
