This issue is present in 3.5.2.

Predicates `BetweenPredicate`, `GreaterLessPredicate` and `EqualPredicate` use `compareTo()` and `equals()` to compare two values. For `float` and `double` this results in unexpected behavior. See java documentation for [`compareTo`](http://docs.oracle.com/javase/7/docs/api/java/lang/Double.html#compareTo%28java.lang.Double%29) and [`equals`](http://docs.oracle.com/javase/7/docs/api/java/lang/Double.html#equals%28java.lang.Object%29).

There are two problems.

-0.0 and 0.0 are equal when using java operators, but not equal with compareTo() and equals().  If you have a query x < 0, then -0.0 will match.

NaN is not equal to anything (including itself). So NaN == NaN should be false and NaN != NaN should be true. However with compareTo() and equals() NaN is assigned for the purposes of ordering as greater than infinity. This means that NaN = NaN is true, NaN != NaN is false, and x > 0, or even x > infinity, is true if x is NaN.

The fix is to check if the entryValue class is `Double` or `Float`, and if so cast the entryValue and value to the appropriate type, use `doubleValue()` (or `floatValue()` if float) to get the primitive values, then compare using java operators.
