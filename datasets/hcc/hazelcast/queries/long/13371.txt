This issue was originally reported as a [StackOverflow question](https://stackoverflow.com/questions/50819286/hazelcast-java-lang-illegalargumentexception-key-cannot-be-of-type-data). Thanks, peter stiles.

When a `NearCache` is used for an `IMap` and a `TransactionalMap` is used on client then `get(key)` operation fails reporting a wrong key type.

**Reproducer:**
```java
String testName = "test";
Config config = new Config();
config.getMapConfig(testName).setNearCacheConfig(new NearCacheConfig());
try {
    Hazelcast.newHazelcastInstance(config);
    HazelcastInstance client = HazelcastClient.newHazelcastClient();

    TransactionContext context = client.newTransactionContext();
    context.beginTransaction();
    try {
        System.out.println(context.getMap(testName).get(testName));
        context.commitTransaction();
    } catch (Throwable t) {
        t.printStackTrace();
        context.rollbackTransaction();
    }
} finally {
    HazelcastInstanceFactory.terminateAll();
    HazelcastClient.shutdownAll();
}
```

**Output:**
```
java.lang.IllegalArgumentException: key cannot be of type Data!
	at com.hazelcast.util.Preconditions.checkNotInstanceOf(Preconditions.java:300)
	at com.hazelcast.internal.nearcache.impl.DefaultNearCache.checkKeyFormat(DefaultNearCache.java:234)
	at com.hazelcast.internal.nearcache.impl.DefaultNearCache.get(DefaultNearCache.java:114)
	at com.hazelcast.map.impl.tx.TransactionalMapProxySupport.getCachedValue(TransactionalMapProxySupport.java:178)
	at com.hazelcast.map.impl.tx.TransactionalMapProxySupport.getInternal(TransactionalMapProxySupport.java:130)
	at com.hazelcast.map.impl.tx.TransactionalMapProxy.get(TransactionalMapProxy.java:110)
	at com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapGetMessageTask.innerCall(TransactionalMapGetMessageTask.java:43)
	at com.hazelcast.client.impl.protocol.task.AbstractTransactionalMessageTask.call(AbstractTransactionalMessageTask.java:34)
	at com.hazelcast.client.impl.protocol.task.AbstractCallableMessageTask.processMessage(AbstractCallableMessageTask.java:35)
	at com.hazelcast.client.impl.protocol.task.AbstractMessageTask.initializeAndProcessMessage(AbstractMessageTask.java:123)
	at com.hazelcast.client.impl.protocol.task.AbstractMessageTask.doRun(AbstractMessageTask.java:111)
	at com.hazelcast.client.impl.protocol.task.AbstractMessageTask.run(AbstractMessageTask.java:101)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
	at com.hazelcast.util.executor.HazelcastManagedThread.executeRun(HazelcastManagedThread.java:64)
	at com.hazelcast.util.executor.HazelcastManagedThread.run(HazelcastManagedThread.java:80)
	at ------ submitted from ------.(Unknown Source)
	at com.hazelcast.client.spi.impl.ClientInvocationFuture.resolveAndThrowIfException(ClientInvocationFuture.java:96)
	at com.hazelcast.client.spi.impl.ClientInvocationFuture.resolveAndThrowIfException(ClientInvocationFuture.java:33)
	at com.hazelcast.spi.impl.AbstractInvocationFuture.get(AbstractInvocationFuture.java:162)
	at com.hazelcast.client.proxy.txn.ClientTransactionUtil.invoke(ClientTransactionUtil.java:57)
	at com.hazelcast.client.proxy.txn.ClientTxnProxy.invoke(ClientTxnProxy.java:61)
	at com.hazelcast.client.proxy.txn.ClientTxnMapProxy.get(ClientTxnMapProxy.java:80)
	at test.App.main(App.java:30)
```