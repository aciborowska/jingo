hazelcast-3.2.1

I am playing with a test application that creates 1.5M entries in the Hazelcast map and continuously updates these entries measuring how many requests per second it can achieve.

I can successfully run that application against single node Hazelcast running on Amazon EC2 instance (m3.xlarge) with -Xmx14000M for quite some time.

However if I start 2 (also tried 4) node cluster instead, it dies very quickly.
When the test just starts, CPU usage is more or less even on all instances - about 230% (there are 4 cores so limit is 400%). But when continuous updating starts later what happens is:
- All instances except one show 0 - 0.3% CPU usage. That is effectively idle
- Single instance (random one) shows CPU usage 100% (that is one of the cores is constantly busy)
- Client stop reporting any progress
- There is no errors of any kind reported by either instance

Some notes about my test:
1. <map> backup-count is set to 1
2. In-memory format is BINARY
3. The object I store there are effectively Maps (some very simple classes where single field is Map)
4. I am using custom EntryProcessors but there is no synchronisation of any kind in their code. The only reason entry processors are used is because I want changes to be atomic and I do not want explicitly locking/unlocking entries before/after I modify them.
5. Cluster nodes network configuration uses < tcp-ip > element so all nodes point to the first one. No AWS auto-discovery is used.

I can reproduce it quire easily. Can do with 4 node cluster as well as with 2 node one.

On the node that is 100% busy in the end I can obtain a thread dump (with kill -SIGQUIT) and a heap dump. But given the -Xmx value of 14G, that thing isn't small.

The problem _seems_ to be linked to backup entries because when I set backup-count to 0 it does not reproduce (although I did not try very hard).
