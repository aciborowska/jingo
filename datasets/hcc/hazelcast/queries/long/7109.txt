If you are using hazelcast as a cache for costly calculations, it seems to make sense to use putAsync and getAsync to limit the time spent in trying to access the cache. (We had some cases where an overloaded node dragged down the performance of the whole cluster otherwise.) Unfortunately, these operations do not update the statistic values needed to evaluate the speed of accessing the cache: the values getCount, putCount, totalGetLatencies and totalPutLatencies are not updated when using IMap.getAsync and IMap.putAsync. For instance, after execution of the following program, you get "getCount":1 and "putCount":1 while it should be 2:

```
    HazelcastInstance hz = Hazelcast.newHazelcastInstance();
    try {
        IMap<String, String> imap = hz.getMap("testmap");
        imap.put("Hi!", "Ho!");
        imap.putAsync("Ha!", "Hu!");
        imap.get("Hi!");
        imap.getAsync("Ha!").get();
        LocalMapStats stats = imap.getLocalMapStats();
        System.out.println(stats.toJson());
    } finally {
        hz.shutdown();
    }
```
