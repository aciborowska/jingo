When registering a custom serializer for an interface (so that all implementations of the interface are de/serialized using it), Hazelcast does not always choose the registered serializer when de/serializing an instance of an implementation of that interface. Specifically, this occurs when the class being de/serialized also implements Serializable.
e.g. `class MyClass implements Serializable, MySerializable`
where we have registered a serializer for the type `MySerializable`

Due to the way the SerializationServiceImpl#lookupSerializer method works, it scans all interfaces and returns the first matching serializer. However, according to the documentation, Hazelcast should always choose a custom serializer before falling back to the default serializer.
This issue can be bypassed by declaring our interface before Serializable - however, since the interfaces are stored in a Set, there is no guarantee that this will always be the case.
We met this issue on 3.3.3 but the implementation does not seem to have changed in 3.4.2
