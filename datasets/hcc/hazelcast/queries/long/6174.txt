Example: 
Properties `IO_INPUT_THREAD_COUNT` and `IO_OUTPUT_THREAD_COUNT` are configurable. The both defaults to `IO_THREAD_COUNT`

``` java
    IO_THREAD_COUNT("hazelcast.io.thread.count", 3),
    IO_INPUT_THREAD_COUNT("hazelcast.io.input.thread.count", IO_THREAD_COUNT),
    IO_OUTPUT_THREAD_COUNT("hazelcast.io.output.thread.count", IO_THREAD_COUNT),
```

This seems to work fine. However when I change the `IO_THREAD_COUNT` property then I'd intuitively expect the new value will be reflected in dependent properties.

In other words: I'd expect following test to pass:

``` java
@Test
    public void testInheritance_whenDefaultIsChangedProgramatically_thenDependentPropertyIsChangedToo() {
        Config config = new Config();
        config.setProperty(GroupProperty.IO_THREAD_COUNT, "1");
        HazelcastInstance instance = createHazelcastInstance(config);

        Node node = getNode(instance);
        int inputIOThreadCount = node.getGroupProperties().getInteger(GroupProperty.IO_INPUT_THREAD_COUNT);

        assertEquals(1, inputIOThreadCount);
    }
```

However the test is failing due the way how properties are resolved. I'm not sure if the issue is solvable with the current GrouProperty design. If not that the defaulting mechanism should be removed from (GroupProperty) as it's misleading. 
