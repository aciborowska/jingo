Currently `MigrationAwareService.commitMigration()` method is executed after partition-table changes are applied on both source and destination nodes. 

This order is fine for source node, unnecessary resources will be  cleaned up after partition assignment is removed.
But on destination node, this causes a race issue. Partition is assigned to node before `MigrationAwareService`s complete their commit phase. An operation can be executed between partition assignment and `MigrationAwareService.commitMigration()`. For example, on `IMap` index rebuilding is done during commit phase but an in-fly query operation can come in before indexing is completed.

Expected commit flow order will be;
- Destination `MigrationAwareService.commitMigration()`
- Destination partition-table update 
- Source partition-table update 
- Source `MigrationAwareService.commitMigration()`

Additionally, a new commit hook method can be provided to be called before or after `commitMigration()` depending on source or destination. So, in that case, commit flow will be;
- Destination `MigrationAwareService.commitMigration()` 
- Destination partition-table update 
- Destination `commitMigrationHook()` 
- Source `commitMigrationHook()` 
- Source partition-table update 
- Source `MigrationAwareService.commitMigration()`
