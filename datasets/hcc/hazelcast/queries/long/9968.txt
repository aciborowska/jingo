We observed a problem when non-java client (e.g. C++ client) is using `PagingPredicate` with comparator. If the comparator returns 0 for the entries compared in the list, then the `PagingPredicate` uses the keys to break this equality but while using the keys, the java side uses `SortingUtil.compare` which in turn uses `compareIntegers(entry1.getKey().hashCode(), entry2.getKey().hashCode());`
(https://github.com/hazelcast/hazelcast/blob/v3.8/hazelcast/src/main/java/com/hazelcast/util/SortingUtil.java#L46 ).

The hashCode is java specific. `PagingPredicate` usage requires that the client also sorts the data returned from the member using the same comparator. Since non-java can not implement `hashCode` as in java it ends up with a different order of entries. Order of entries is important, because the client sends the entry at the page size index as the anchor to the server when requesting the next page and the server returns the entries after this anchor entries on the next page. Failing to send this anchor incorrectly results in duplicate entries retrieved from the server.

The problem can be generated by running a single member cluster and a comparator which returns 0 for all cases. 

related issues: 
https://github.com/hazelcast/hazelcast/issues/12205
https://github.com/hazelcast/hazelcast/issues/3047