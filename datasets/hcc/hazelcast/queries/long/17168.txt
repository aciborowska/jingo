<!--
Thanks for reporting your issue. Please share with us the following information, to help us resolve your issue quickly and efficiently.
-->
  
**Describe the bug**
Since _UnsafeRaftReplicateOp_ does not implement _AllowedDuringPassiveState_ we get a lot of exceptions during shutdown:

```
2020-07-01 15:55:05.645 WARN  [hz.XXXHazelcastInstance.cached.thread-13:com.hazelcast.cp.internal.session.ProxySessionManagerService] [XXXX]:5701 [XXXX] [4.0.1] Close session failed for CPGroupId{name='XXXX', seed=0, groupId=189}
java.util.concurrent.ExecutionException: com.hazelcast.core.HazelcastInstanceNotActiveException: State: PASSIVE Operation: class com.hazelcast.cp.internal.operation.unsafe.UnsafeRaftReplicateOp
        at com.hazelcast.spi.impl.operationservice.impl.InvocationFuture.returnOrThrowWithGetConventions(InvocationFuture.java:114)
        at com.hazelcast.spi.impl.operationservice.impl.InvocationFuture.resolveAndThrowIfException(InvocationFuture.java:98)
        at com.hazelcast.spi.impl.AbstractInvocationFuture.get(AbstractInvocationFuture.java:601)
        at com.hazelcast.cp.internal.session.ProxySessionManagerService.onShutdown(ProxySessionManagerService.java:109)
        at com.hazelcast.instance.impl.Node$2.run(Node.java:528)
        at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
        at com.hazelcast.internal.util.executor.CompletableFutureTask.run(CompletableFutureTask.java:64)
        at com.hazelcast.internal.util.executor.CachedExecutorServiceDelegate$Worker.run(CachedExecutorServiceDelegate.java:217)
        at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
        at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
        at java.base/java.lang.Thread.run(Thread.java:830)
        at com.hazelcast.internal.util.executor.HazelcastManagedThread.executeRun(HazelcastManagedThread.java:64)
        at com.hazelcast.internal.util.executor.HazelcastManagedThread.run(HazelcastManagedThread.java:80)
Caused by: com.hazelcast.core.HazelcastInstanceNotActiveException: State: PASSIVE Operation: class com.hazelcast.cp.internal.operation.unsafe.UnsafeRaftReplicateOp
        at com.hazelcast.spi.impl.operationservice.impl.Invocation.engineActive(Invocation.java:511)
        at com.hazelcast.spi.impl.operationservice.impl.Invocation.doInvoke(Invocation.java:544)
        at com.hazelcast.spi.impl.operationservice.impl.Invocation.invoke0(Invocation.java:534)
        at com.hazelcast.spi.impl.operationservice.impl.Invocation.invoke(Invocation.java:236)
        at com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.invokeOnPartition(OperationServiceImpl.java:334)
        at com.hazelcast.cp.internal.RaftInvocationManager.invokeOnPartition(RaftInvocationManager.java:225)
        at com.hazelcast.cp.internal.RaftInvocationManager.invoke(RaftInvocationManager.java:220)
        at com.hazelcast.cp.internal.session.ProxySessionManagerService.closeSession(ProxySessionManagerService.java:84)
        at com.hazelcast.cp.internal.session.AbstractProxySessionManager.shutdown(AbstractProxySessionManager.java:180)
        at com.hazelcast.cp.internal.session.ProxySessionManagerService.onShutdown(ProxySessionManagerService.java:96)
```

So when shutting down gracefully, _ProxySessionManagerService.onShutdown()_ is called which causes failure in the _UnsafeRaftReplicateOp_ since it's not allowed to run during the pending state of the cluster.

**Expected behavior**
The _RaftReplicateOp_ class **does** implement _AllowedDuringPassiveState_, so the question is: Shouldn't _UnsafeRaftReplicateOp_ do that as well? And also all other unsafe operations? Perhaps _AbstractUnsafeRaftOp_ should implement _RaftSystemOperation_ (which extends _AllowedDuringPassiveState_) just like the abstract class _RaftReplicateOp_ does.

Or is there some other way to avoid this exception during shutdown?

**To Reproduce**

Steps to reproduce the behavior:
1. Create a cluster with unsafe CP Subsystem
2. Use something in the CP Subsystem, like a FencedLock.
3. Shutdown

**Additional context**
Reproduced in Hazelcast v4.0.1.
<!--
Add any other context about the problem here.

Common details that we're often interested in:
- Detailed description of the steps to reproduce your issue
- Logs and stack traces, if available
- Hazelcast version that you use (e.g. 3.4, also specify whether it is a minor release or the latest snapshot)
- If available, integration module versions (e.g. Tomcat, Jetty, Spring, Hibernate). Also, include their detailed configuration information such as web.xml, Hibernate configuration and `context.xml` for Spring
- Cluster size, i.e. the number of Hazelcast cluster members
- Number of the clients
- Version of Java. It is also helpful to mention the JVM parameters
- Operating system. If it is Linux, kernel version is helpful
- Unit test with the `hazelcast.xml` file. If you could include a unit test which reproduces your issue, we would be grateful
-->
