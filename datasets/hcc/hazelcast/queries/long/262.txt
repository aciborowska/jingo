Hi,

i recently started to work with the criteria API for distributed maps and experienced wrong results with a not-equal-comparison between two integer values on indexed fields. This happens for me with Hazelcast 2.3.1:

NotEqualPredicate.filter() calls Index.getSubRecords(false, false, searchValue). In this case the first boolean means "not a less than-comparison" and the second one means "not a equal-comparison". This causes wrong results, because both IndexStore implementations are performing a greater-than-comparison in this case (whats indeed the right implication of the combination of both booleans i think). This can easily be tested:

``` java
@Test
public void testNotEqualPredicate() throws Exception {
    HazelcastInstance hazelcast = getHazelcastInstance();
    IMap<String, MapValue> map = hazelcast.getMap("mapName");
    map.addIndex("value", false);
    map.put("key1", new MapValue(1));

    EntryObject entryObject = new PredicateBuilder().getEntryObject().get("value");
    PredicateBuilder notEqualPredicate = entryObject.notEqual(5);
    Collection<MapValue> values = map.values(notEqualPredicate);
    assertTrue(!values.isEmpty());
}

private static final class MapValue implements Serializable {

    private final int value;

    public MapValue(int value) {
        super();
        this.value = value;
    }

    public int getValue() {
        return value;
    }
}
```

regards,

Steffen
