When I start 4 os-instances and 5 vm's per os-instance and run the atomiclongexercixes (I guess with all exercises you run in the same issue) and use a embedded client to talk to the embedded cluster, the system becomes unstable and clients start to disconnect.

This can be reproduced using the stabilizer.

When I use e.g. 1 vm per os inststance and an embedded client, it works fine.

If I don't use the client, but 5 vm's per os instance, then everything also fine.

So it is the addition of clients which causes the problem. I have the impression that the whole cluster has broke down because I can't even use the coach cluster; which is a different cluster than the client cluster. So something very funky is going on. Contact me for more details and I'll guide you through the logs.

FATAL 2014-04-15 06:05:09,631 [hz.client_0_coach.cached-10] com.hazelcast.stabilizer.Manager: Remote machine heart attack detected:HeartAttack[
   message='Exception thrown in trainee'
   coachAddress=/10.193.59.207:8701
   time=Tue Apr 15 06:05:09 UTC 2014
   traineeAddress=/10.193.59.207:6705
   traineeId=trainee-9
   exercise=ExerciseRecipe{
          exerciseId=97fba0f0-c555-4c06-af82-109db226d41e
        , class=com.hazelcast.stabilizer.exercises.concurrent.atomiclong.AtomicLongExercise
        , countersLength=10
        , threadCount=1
        , useClient=true
    }
   cause=com.hazelcast.spi.exception.TargetDisconnectedException: Target[Address[10.108.126.110]:6705] disconnected.
    at com.hazelcast.client.connection.nio.ClientConnection$CleanResourcesTask.run(ClientConnection.java:292)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
    at java.lang.Thread.run(Thread.java:744)
    at com.hazelcast.util.executor.PoolExecutorThreadFactory$ManagedThread.run(PoolExecutorThreadFactory.java:59)
    at ------ End remote and begin local stack-trace ------.(Unknown Source)
    at com.hazelcast.client.spi.impl.ClientCallFuture.resolveResponse(ClientCallFuture.java:150)
    at com.hazelcast.client.spi.impl.ClientCallFuture.get(ClientCallFuture.java:106)
    at com.hazelcast.client.spi.impl.ClientCallFuture.get(ClientCallFuture.java:86)
    at com.hazelcast.client.spi.ClientProxy.invoke(ClientProxy.java:112)
    at com.hazelcast.client.proxy.ClientAtomicLongProxy.invoke(ClientAtomicLongProxy.java:124)
    at com.hazelcast.client.proxy.ClientAtomicLongProxy.addAndGet(ClientAtomicLongProxy.java:68)
    at com.hazelcast.client.proxy.ClientAtomicLongProxy.incrementAndGet(ClientAtomicLongProxy.java:105)
    at com.hazelcast.stabilizer.exercises.concurrent.atomiclong.AtomicLongExercise$Worker.run(AtomicLongExercise.java:101)
    at com.hazelcast.stabilizer.exercises.AbstractExercise$CatchingRunnable.run(AbstractExercise.java:143)
    at java.lang.Thread.run(Thread.java:744)
