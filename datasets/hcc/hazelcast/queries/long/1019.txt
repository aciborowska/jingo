We are in the process of upgrading our app from HZ 2.3 to 3.1. After upgrading a 2-node test cluster running our app to 3.1, I started up 1 node at a time. The first node came up fine and listed itself as the only cluster member. But when I started up the second node, it made a call to values() on an IMap, which eventually timed out after 2 minutes:

```
Caused by: com.hazelcast.core.OperationTimeoutException: No response for 120000 ms. Aborting invocation! InvocationFuture{invocation=InvocationImpl{ serviceName='hz:impl:mapService', op=com.hazelcast.map.operation.MapValuesOperation@57f897a7, partitionId=169, replicaIndex=0, tryCount=250, tryPauseMillis=500, invokeCount=1, callTim
eout=60000, target=Address[node1]:5701}, done=false}
    at com.hazelcast.spi.impl.InvocationImpl$InvocationFuture.waitForResponse(InvocationImpl.java:382) ~[hazelcast-3.1.jar:3.1]
    at com.hazelcast.spi.impl.InvocationImpl$InvocationFuture.get(InvocationImpl.java:294) ~[hazelcast-3.1.jar:3.1]
    at com.hazelcast.spi.impl.InvocationImpl$InvocationFuture.get(InvocationImpl.java:286) ~[hazelcast-3.1.jar:3.1]
    at com.hazelcast.spi.impl.OperationServiceImpl.invokeOnPartitions(OperationServiceImpl.java:552) ~[hazelcast-3.1.jar:3.1]
    at com.hazelcast.spi.impl.OperationServiceImpl.invokeOnAllPartitions(OperationServiceImpl.java:481) ~[hazelcast-3.1.jar:3.1]
    at com.hazelcast.map.proxy.MapProxySupport.valuesInternal(MapProxySupport.java:462) ~[hazelcast-3.1.jar:3.1]
    at com.hazelcast.map.proxy.MapProxyImpl.values(MapProxyImpl.java:426) ~[hazelcast-3.1.jar:3.1]
```

I then looked at the log for the first node, and saw the following:

```
INFO  2013-10-23 18:13:07,328 com.hazelcast.nio.SocketAcceptor  [node1]:5701 [v11] Accepting socket connection from /192.168.109.96:58266
INFO  2013-10-23 18:13:07,328 com.hazelcast.nio.TcpIpConnectionManager  [node1]:5701 [v11] 5701 accepted socket connection from /192.168.109.96:58266
INFO  2013-10-23 18:13:14,345 com.hazelcast.cluster.ClusterService  [node1]:5701 [v11]

Members [2] {
        Member [node1]:5701 this
        Member [node2]:5701
}

INFO  2013-10-23 18:13:14,362 com.hazelcast.partition.PartitionService  [node1]:5701 [v11] Re-partitioning cluster data... Migration queue size: 135
INFO  2013-10-23 18:13:16,215 com.hazelcast.partition.PartitionService  [node1]:5701 [v11] All migration tasks has been completed, queues are empty.
ERROR 2013-10-23 18:13:19,203 com.hazelcast.spi.impl.PartitionIteratingOperation  [node1]:5701 [v11] java.lang.NullPointerException
com.hazelcast.nio.serialization.HazelcastSerializationException: java.lang.NullPointerException
        at com.hazelcast.nio.serialization.SerializationServiceImpl.handleException(SerializationServiceImpl.java:290) ~[hazelcast-3.1.jar:3.1]
        at com.hazelcast.nio.serialization.SerializationServiceImpl.writeObject(SerializationServiceImpl.java:246) ~[hazelcast-3.1.jar:3.1]
        at com.hazelcast.nio.serialization.ByteArrayObjectDataOutput.writeObject(ByteArrayObjectDataOutput.java:257) ~[hazelcast-3.1.jar:3.1]
        at com.hazelcast.spi.impl.PartitionIteratingOperation$PartitionResponse.writeData(PartitionIteratingOperation.java:129) ~[hazelcast-3.1.jar:3.1]
        at com.hazelcast.nio.serialization.DataSerializer.write(DataSerializer.java:129) ~[hazelcast-3.1.jar:3.1]
        at com.hazelcast.nio.serialization.DataSerializer.write(DataSerializer.java:36) ~[hazelcast-3.1.jar:3.1]
        at com.hazelcast.nio.serialization.StreamSerializerAdapter.write(StreamSerializerAdapter.java:36) ~[hazelcast-3.1.jar:3.1]
        at com.hazelcast.nio.serialization.SerializationServiceImpl.writeObject(SerializationServiceImpl.java:244) ~[hazelcast-3.1.jar:3.1]
        at com.hazelcast.nio.serialization.ByteArrayObjectDataOutput.writeObject(ByteArrayObjectDataOutput.java:257) ~[hazelcast-3.1.jar:3.1]
        at com.hazelcast.spi.impl.ResponseOperation.writeInternal(ResponseOperation.java:78) ~[hazelcast-3.1.jar:3.1]
        at com.hazelcast.spi.Operation.writeData(Operation.java:273) ~[hazelcast-3.1.jar:3.1]
        at com.hazelcast.nio.serialization.DataSerializer.write(DataSerializer.java:129) ~[hazelcast-3.1.jar:3.1]
        at com.hazelcast.nio.serialization.DataSerializer.write(DataSerializer.java:36) ~[hazelcast-3.1.jar:3.1]
        at com.hazelcast.nio.serialization.StreamSerializerAdapter.write(StreamSerializerAdapter.java:48) ~[hazelcast-3.1.jar:3.1]
        at com.hazelcast.nio.serialization.SerializationServiceImpl.toData(SerializationServiceImpl.java:174) ~[hazelcast-3.1.jar:3.1]
        at com.hazelcast.nio.serialization.SerializationServiceImpl.toData(SerializationServiceImpl.java:155) ~[hazelcast-3.1.jar:3.1]
        at com.hazelcast.spi.impl.NodeEngineImpl.toData(NodeEngineImpl.java:151) ~[hazelcast-3.1.jar:3.1]
        at com.hazelcast.spi.impl.OperationServiceImpl.send(OperationServiceImpl.java:579) [hazelcast-3.1.jar:3.1]
        at com.hazelcast.spi.impl.ResponseHandlerFactory$RemoteInvocationResponseHandler.sendResponse(ResponseHandlerFactory.java:112) ~[hazelcast-3.1.jar:3.1]
        at com.hazelcast.spi.impl.OperationServiceImpl.doRunOperation(OperationServiceImpl.java:296) [hazelcast-3.1.jar:3.1]
        at com.hazelcast.spi.impl.OperationServiceImpl.access$800(OperationServiceImpl.java:52) [hazelcast-3.1.jar:3.1]
        at com.hazelcast.spi.impl.OperationServiceImpl$RemoteOperationProcessor.run(OperationServiceImpl.java:744) [hazelcast-3.1.jar:3.1]
        at com.hazelcast.util.executor.ManagedExecutorService$Worker.run(ManagedExecutorService.java:166) [hazelcast-3.1.jar:3.1]
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) [na:1.6.0_35]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) [na:1.6.0_35]
        at java.lang.Thread.run(Thread.java:662) [na:1.6.0_35]
        at com.hazelcast.util.executor.PoolExecutorThreadFactory$ManagedThread.run(PoolExecutorThreadFactory.java:59) [hazelcast-3.1.jar:3.1]
Caused by: java.lang.NullPointerException: null
        at com.hazelcast.map.MapValueCollection.writeData(MapValueCollection.java:49) ~[hazelcast-3.1.jar:3.1]
        at com.hazelcast.nio.serialization.DataSerializer.write(DataSerializer.java:129) ~[hazelcast-3.1.jar:3.1]
        at com.hazelcast.nio.serialization.DataSerializer.write(DataSerializer.java:36) ~[hazelcast-3.1.jar:3.1]
        at com.hazelcast.nio.serialization.StreamSerializerAdapter.write(StreamSerializerAdapter.java:36) ~[hazelcast-3.1.jar:3.1]
        at com.hazelcast.nio.serialization.SerializationServiceImpl.writeObject(SerializationServiceImpl.java:244) ~[hazelcast-3.1.jar:3.1]
```

We never saw this issue with HZ 2.3.

I was able to work around the issue by making the following change to com.hazelcast.map.MapValueCollection's 1-param constructor:

``` java
    public MapValueCollection(Collection<Data> values) {
        this.values = new ArrayList<Data>(values.size());
        for (Data value : values) {
            if (value != null) {
                this.values.add(value);
            }
        }
    }
```

I don't know if this is the correct fix or if something earlier in the call path should be preventing the passed-in Collection from containing null values in the first place. 

I'd really appreciate it if you guys could sneak a fix for this into 3.1.1. Please let me know if I can provide any more details.
