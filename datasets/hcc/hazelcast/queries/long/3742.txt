Copied from: 
https://groups.google.com/forum/#!topic/hazelcast/qZISwafTRos

I use the latest version of Hazelcast to replicate session over Tomcat 6 servers. I use Spring Security 3.2.1. The issue is the following (all steps executed from the same browser tab):
- user logs in
- user logs out -> redirected to the login page
- user logs in for the second time
- user logs out -> redirected to the login page
- user logs in for the third time
- user logs out -> IllegalStateException is thrown

Here is a snippet from the stack trace:

java.lang.IllegalStateException: invalidate: Session already invalidated
    at org.apache.catalina.session.StandardSession.invalidate(StandardSession.java:1139)
    at org.apache.catalina.session.StandardSessionFacade.invalidate(StandardSessionFacade.java:150)
    at com.hazelcast.web.WebFilter$HazelcastHttpSession.invalidate(WebFilter.java:702)
    at com.hazelcast.web.WebFilter$HazelcastHttpSession.invalidate(WebFilter.java:702)
    at org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler.logout(SecurityContextLogoutHandler.java:63)

After spending some time by investigating it, I found that when the user is logged out and redirected to the login page, the whole filter chain is invoked twice.

The user is redirected by Spring to "/login" on successful logout which maps to login.jsp. When the request goes through the filter chain, a request wrapper is created by Hazelcast's WebFilter. It is later wrapped twice by Spring Security (first into a org.springframework.security.web.firewall.RequestWrapper then into a SecurityContextHolderAwareRequestWrapper). When Spring MVC renders login.jsp, it executes the filter chain again. In this round WebFilter will not recognize that the request has already been wrapped by its request wrapper (because the type check in https://github.com/hazelcast/hazelcast/blob/master/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java#L451 returns false). It will wrap it again. Consequently when the new session is created in https://github.com/hazelcast/hazelcast/blob/master/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java#L605, both instances of the RequestWrapper will create new session one wrapping the other, i.e. the original session is wrapped twice into a HazelcastHttpSession object. Also in WebFilter.originalSessions I can see both JSESSIONIDs and HZ session IDs as keys which I believe not something that should happen.

During logout only the inner HazelcastHttpSession is invalidated (along with the Tomcat session object), therefore the next time the user sends a request, when the outer Hazelcast session is found by the ID sent in the cookie, it will be valid (and not cleaned up in https://github.com/hazelcast/hazelcast/blob/master/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java#L584), but the inner sessions are invalid. And when the user logs out again and Spring calls invalidate that will throw the above IllegalStateException.

Here is the stack trace when the inner Hazelcast is being created (\* marks the "recursion") :

http-8081-2@10802 daemon, prio=5, in group 'main', status: 'RUNNING'
      at com.hazelcast.web.WebFilter$HazelcastHttpSession.<init>(WebFilter.java:626)
      at com.hazelcast.web.WebFilter.createHazelcastHttpSession(WebFilter.java:331)
-     at com.hazelcast.web.WebFilter.createNewSession(WebFilter.java:308)
-     at com.hazelcast.web.spring.SpringAwareWebFilter.createNewSession(SpringAwareWebFilter.java:47)
-     at com.hazelcast.web.WebFilter$RequestWrapper.getSession(WebFilter.java:605)
    at com.hazelcast.web.WebFilter$RequestWrapper.getSession(WebFilter.java:515)
    at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:216)
    at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:216)
    at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:216)
    at com.hazelcast.web.WebFilter$RequestWrapper.getOriginalSession(WebFilter.java:533)
-     at com.hazelcast.web.WebFilter.createNewSession(WebFilter.java:307)
-     at com.hazelcast.web.spring.SpringAwareWebFilter.createNewSession(SpringAwareWebFilter.java:47)
-     at com.hazelcast.web.WebFilter$RequestWrapper.getSession(WebFilter.java:605)
    at com.hazelcast.web.WebFilter$RequestWrapper.getSession(WebFilter.java:579)
    at org.apache.jasper.runtime.PageContextImpl._initialize(PageContextImpl.java:146)
    at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:124)
    at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:107)
    at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:63)
    at org.apache.jsp.login_jsp._jspService(login.jsp:1)
    at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
    at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
    at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:377)
    at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:313)
    at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:260)
    at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
    at com.hazelcast.web.WebFilter.doFilter(WebFilter.java:463)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
    at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:646)
    at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:436)
    at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:374)
    at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:302)
    at com.hazelcast.web.WebFilter$RequestWrapper$1.forward(WebFilter.java:542)
    at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:209)
    at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:267)
    at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1221)
    at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1005)
    at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:952)
    at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:870)
    at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:961)
    at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:852)
    at javax.servlet.http.HttpServlet.service(HttpServlet.java:617)
    at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:837)
    at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
    at com.ishisystems.clear.web.filter.MdcPopulatingFilter.doFilter(MdcPopulatingFilter.java:47)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330)
    at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:118)
    at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:84)
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
    at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:113)
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
    at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:103)
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
    at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:113)
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
    at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:139)
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
    at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:154)
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
    at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:45)
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
    at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:199)
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
    at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:110)
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
    at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:87)
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
    at org.springframework.security.web.access.channel.ChannelProcessingFilter.doFilter(ChannelProcessingFilter.java:144)
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
    at com.ishisystems.clear.TenantFilter.doFilter(TenantFilter.java:81)
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
    at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:192)
    at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:160)
    at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:344)
    at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:261)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
    at org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter.doFilterInternal(OpenEntityManagerInViewFilter.java:177)
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
    at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77)
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
    at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88)
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
    at com.hazelcast.web.WebFilter.doFilter(WebFilter.java:463)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)
    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)
    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)
    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:298)
    at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:852)
    at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:588)
    at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489)
    at java.lang.Thread.run(Thread.java:722)

As a workaround if I delete the cookies on logout (using delete-cookies attribute in the Spring Security config, see http://docs.spring.io/spring-security/site/docs/3.1.x/reference/springsecurity-single.html#nsa-logout-delete-cookies) the problem does not occur as the browser does not send the old Hazelcast session id along with the request.
