The JSR-107 spec states in section 10.1.1 that

> For example an implementation may permit a URI to be used as the location of a configuration file,
> say for pre-configured caches.
> cachingProvider.getCacheManager(“/sample/ConfigurationFile.xml”);

It seems that Hazelcast ignores a custom URI and actually even fail if you try to call it with one. Debugging on 3.4.1 it ends up in  `HazelcastServerCachingProvider#instanceFromProperties` that looks for the `hazelcast.config.location` or `hazelcast.instance.name` property and if none is set just returns `null` as a provider. 

This latter fails with a null check:

```
Caused by: javax.cache.CacheException: Error opening URI [file:/Users/snicoll/workspace/pivotal/spring-boot/spring-boot-autoconfigure/target/test-classes/org/springframework/boot/autoconfigure/cache/hazelcast-specific.xml]
    at com.hazelcast.cache.impl.AbstractHazelcastCachingProvider.getCacheManager(AbstractHazelcastCachingProvider.java:89)
    at com.hazelcast.cache.impl.AbstractHazelcastCachingProvider.getCacheManager(AbstractHazelcastCachingProvider.java:113)
    at com.hazelcast.cache.HazelcastCachingProvider.getCacheManager(HazelcastCachingProvider.java:153)
    at org.springframework.boot.autoconfigure.cache.JCacheCacheConfiguration.createCacheManager(JCacheCacheConfiguration.java:87)
    at org.springframework.boot.autoconfigure.cache.JCacheCacheConfiguration.cacheManager(JCacheCacheConfiguration.java:71)
    at org.springframework.boot.autoconfigure.cache.JCacheCacheConfiguration$$EnhancerBySpringCGLIB$$9bd583bb.CGLIB$cacheManager$0(<generated>)
    at org.springframework.boot.autoconfigure.cache.JCacheCacheConfiguration$$EnhancerBySpringCGLIB$$9bd583bb$$FastClassBySpringCGLIB$$1a319b0a.invoke(<generated>)
    at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228)
    at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:309)
    at org.springframework.boot.autoconfigure.cache.JCacheCacheConfiguration$$EnhancerBySpringCGLIB$$9bd583bb.cacheManager(<generated>)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162)
    ... 90 more
Caused by: java.lang.NullPointerException: hazelcastInstance cannot be null
    at com.hazelcast.util.ValidationUtil.checkNotNull(ValidationUtil.java:31)
    at com.hazelcast.cache.impl.AbstractHazelcastCacheManager.<init>(AbstractHazelcastCacheManager.java:68)
    at com.hazelcast.cache.impl.HazelcastServerCacheManager.<init>(HazelcastServerCacheManager.java:58)
    at com.hazelcast.cache.impl.HazelcastServerCachingProvider.createHazelcastCacheManager(HazelcastServerCachingProvider.java:78)
    at com.hazelcast.cache.impl.HazelcastServerCachingProvider.createHazelcastCacheManager(HazelcastServerCachingProvider.java:42)
    at com.hazelcast.cache.impl.AbstractHazelcastCachingProvider.getCacheManager(AbstractHazelcastCachingProvider.java:86)
    ... 104 more
```

Looking at the code the `URI` is completely ignored. Is it wrong to assume that the `URI` parameter is used to specify a custom configuration file?

If so, what is the meaning of the `CacheManager`'s URI in the hazelcast implementation?

Thanks
