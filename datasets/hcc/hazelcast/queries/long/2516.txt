I'm currently setting up some benchmarks for testing read/write performance with various size clusters: 2, 4, 8, 16, 32 and 64. While running the 64 node cluster, within 5 minutes I got 

com.hazelcast.core.OperationTimeoutException.

From the 2 runs, I got this exception 2 times. Perhaps we have finally found a way to reproduce the OperationTimeoutException which has been plaguing us from time to time in a predictable way.

Hazelcast 3.2.1
Oracle Java 1.7.0_55
Default EC2 AMI 64 bits
No clients
Default HZ configuration (tcp/ip based discovery)
WorkerJVM Settings 
"-ea -server -Xms4G -Xmx16G -XX:+PrintGC -XX:+HeapDumpOnOutOfMemoryError"

This is with 100% reads. 

I'm using a default configured IMap with Integer as key and Long as value and the operation is a get. For more info see the MapLongPerformanceTest class which is part of the stabilizer.

```
Failure[
   message='Worked ran into an unhandled exception'
   type='Worker exception'
   agentAddress=10.182.55.29
   time=Wed May 21 10:54:41 UTC 2014
   workerAddress=10.182.55.29:5701
   workerId=worker-10.182.55.29-2-server
   test=TestCase{
          id=1400669407196
        , class=com.hazelcast.stabilizer.tests.map.MapLongPerformanceTest
        , basename=map
        , keyCount=100000
        , logFrequency=10000
        , performanceUpdateFrequency=10000
        , threadCount=20
        , writePercentage=0
    }
   cause=com.hazelcast.core.OperationTimeoutException: No response for 120000 ms. Aborting invocation! InvocationFuture{invocation=BasicInvocation{ serviceName='hz:impl:mapService', op=GetOperation{}, partitionId=78, replicaIndex=0, tryCount=250, tryPauseMillis=500, invokeCount=1, callTimeout=60000, target=Address[10.234.179.10]:5701}, done=false} No response has been send  backups-expected: 0 backups-completed: 0 reinvocations: 0
        at com.hazelcast.spi.impl.BasicInvocation$InvocationFuture.newOperationTimeoutException(BasicInvocation.java:782)
        at com.hazelcast.spi.impl.BasicInvocation$InvocationFuture.waitForResponse(BasicInvocation.java:760)
        at com.hazelcast.spi.impl.BasicInvocation$InvocationFuture.get(BasicInvocation.java:697)
        at com.hazelcast.spi.impl.BasicInvocation$InvocationFuture.get(BasicInvocation.java:676)
        at com.hazelcast.map.proxy.MapProxySupport.invokeOperation(MapProxySupport.java:257)
        at com.hazelcast.map.proxy.MapProxySupport.getInternal(MapProxySupport.java:161)
        at com.hazelcast.map.proxy.MapProxyImpl.get(MapProxyImpl.java:53)
        at com.hazelcast.stabilizer.tests.map.MapLongPerformanceTest$Worker.run(MapLongPerformanceTest.java:97)
        at java.lang.Thread.run(Thread.java:745)
        at com.hazelcast.stabilizer.tests.utils.ThreadSpawner$DefaultThread.run(ThreadSpawner.java:64)
        at ------ End remote and begin local stack-trace ------.(Unknown Source)
        at com.hazelcast.spi.impl.BasicInvocation$InvocationFuture.resolveResponse(BasicInvocation.java:862)
        at com.hazelcast.spi.impl.BasicInvocation$InvocationFuture.resolveResponseOrThrowException(BasicInvocation.java:795)
        at com.hazelcast.spi.impl.BasicInvocation$InvocationFuture.get(BasicInvocation.java:698)
        at com.hazelcast.spi.impl.BasicInvocation$InvocationFuture.get(BasicInvocation.java:676)
        at com.hazelcast.map.proxy.MapProxySupport.invokeOperation(MapProxySupport.java:257)
        at com.hazelcast.map.proxy.MapProxySupport.getInternal(MapProxySupport.java:161)
        at com.hazelcast.map.proxy.MapProxyImpl.get(MapProxyImpl.java:53)
        at com.hazelcast.stabilizer.tests.map.MapLongPerformanceTest$Worker.run(MapLongPerformanceTest.java:97)
        at java.lang.Thread.run(Thread.java:745)
        at com.hazelcast.stabilizer.tests.utils.ThreadSpawner$DefaultThread.run(ThreadSpawner.java:64)
:
```
