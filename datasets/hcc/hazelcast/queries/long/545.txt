Hi,

I've an entity User that has a relation @OneToMany with an entity Status.
I've annotated both entities with:

@Cache(usage= CacheConcurrencyStrategy.READ_WRITE)
public class User implements Serializable {
..
    @OneToMany( mappedBy = "chlUserId")
    @Cascade({CascadeType.ALL})
    @Cache(usage= CacheConcurrencyStrategy.READ_WRITE)
    private Collection<Status> statusCollection;
....
}

@Cache(usage= CacheConcurrencyStrategy.READ_WRITE)
public class Status implements Serializable {
....
}

I'm using dropwizard and I've set this options on my hibernate configuration:
  props.put("hibernate.cache.use_second_level_cache", "true"); 
  props.put("hibernate.cache.use_query_cache", "true");
  props.put("hibernate.generate_statistics", "true");
  props.put("hibernate.cache.provider_configuration_file_resource_path", hazelcastConfig);
  props.put("hibernate.cache.region.factory_class", "com.hazelcast.hibernate.HazelcastCacheRegionFactory");

In my app flow, I need to add a status to my user, then I execute this method:

Status status = new Status();
... all my set methods...
   status.setChlUserId(account);
.................
statusFacade.create(status);

***\* breakpoint

The create method is:
public long create(Status object) {
        return persist(object).getId();
}

The object was added correctly to database (I can realize it because I've inspected the table Status), but when I invoke:
   List<Status> statusList = (List) account.getStatusCollection();
This entry not return in list.

If I add these statements to ***\* breakpoint:
    user.getStatusCollection().add(status);
    persist(user);

all works correctly.
If I remove Hazelcast, all works correctly also without the ****\* breakpoint statements.

Why?
