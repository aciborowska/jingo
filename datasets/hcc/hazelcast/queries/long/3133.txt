Using IQueue.take() method user must catch InterruptedException, but can't do it since it is wrapped by HazelcastException.

com.hazelcast.core.HazelcastException: java.lang.InterruptedException
    at com.hazelcast.util.ExceptionUtil.rethrow(ExceptionUtil.java:45)
    at com.hazelcast.client.spi.ClientProxy.invoke(ClientProxy.java:114)
    at com.hazelcast.client.proxy.ClientQueueProxy.invoke(ClientQueueProxy.java:264)
    at com.hazelcast.client.proxy.ClientQueueProxy.poll(ClientQueueProxy.java:118)
    at com.hazelcast.client.proxy.ClientQueueProxy.take(ClientQueueProxy.java:113)
    at com.vodafone.device.message.clients.HazelcastMessageClient$QueueListener.run(HazelcastMessageClient.java:89)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
    at java.lang.Thread.run(Thread.java:744)
Caused by: java.lang.InterruptedException
    at java.lang.Object.wait(Native Method)
    at com.hazelcast.client.spi.impl.ClientCallFuture.get(ClientCallFuture.java:100)
    at com.hazelcast.client.spi.impl.ClientCallFuture.get(ClientCallFuture.java:86)
    at com.hazelcast.client.spi.ClientProxy.invoke(ClientProxy.java:112)
    ... 7 more

ExceptionUtils class wraps all non-runtime exceptions that looks little wired in this case.
