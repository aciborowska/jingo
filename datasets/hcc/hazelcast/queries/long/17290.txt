Here is the function for reading cache

```java
@SuppressWarnings("unchecked")
	private static final void cacheRead(int count) {

		final ClientConfig cfg = new ClientConfig();

		cfg.getNetworkConfig().setSmartRouting(false).setConnectionTimeout(10000);
//		cfg.getNetworkConfig().setSocketOptions(socketOptions);

		cfg.getConnectionStrategyConfig().setAsyncStart(true).setReconnectMode(ReconnectMode.ON);

		cfg.getConnectionStrategyConfig().getConnectionRetryConfig().setClusterConnectTimeoutMillis(10000)
				.setInitialBackoffMillis(1000).setMaxBackoffMillis(60000).setMultiplier(2).setJitter(0.2);

		cfg.getNetworkConfig().addAddress("cluster-1.hazelcast.dc1.domain.internal:5701");

		cfg.setClusterName("cluster");

		final ClientStateListener clientStateListener = new ClientStateListener(cfg);

		final HazelcastInstance instance = HazelcastClient.newHazelcastClient(cfg);

		boolean connected = false;
		try {
			connected = clientStateListener.awaitConnected();
		} catch (InterruptedException e) {
			e.printStackTrace();
			return;
		}

		if (!connected)
			return;

		final List<CompletableFuture<Void>> futures = new ArrayList<CompletableFuture<Void>>();

		try (final CachingProvider provider = new HazelcastClientCachingProvider(instance)) {

			try (final CacheManager cacheManager = provider.getCacheManager()) {

				final String name = Iterables.tryFind(cacheManager.getCacheNames(), new Predicate<String>() {

					@Override
					public boolean apply(@Nullable String input) {
						if (StringUtil.equalsIgnoreCase(input, "cache-test-1"))
							return true;
						return false;
					}

				}).orNull();

				final ICache<Integer, String> cache;
				if (StringUtil.isNullOrEmptyAfterTrim(name)) {

					final CompleteConfiguration<Integer, String> config = new MutableConfiguration<Integer, String>()
							.setTypes(Integer.class, String.class)
							.setReadThrough(true)
							.setStatisticsEnabled(true)
							.setCacheLoaderFactory(FactoryBuilder.factoryOf(new MyCacheLoader()));

					cache = cacheManager.createCache("cache-test-1", config).unwrap(ICache.class);

				} else {

					cache = cacheManager.getCache("cache-test-1", Integer.class, String.class).unwrap(ICache.class);					
				}

				for (int i = 0; i < count; i++) {
					futures.add(cache.getAsync(i).toCompletableFuture().exceptionally(e -> {
						System.out.println(e);
						return null;
					}).thenAccept(v -> {
						if (null != v)
							System.out.println(v);
					}));
				}

				futures.forEach(CompletableFuture::join);
			}
		}

		instance.shutdown();
	}
```

Here is the cache loader class

```java
public final class MyCacheLoader implements CacheLoader<Integer, String>, Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -4894157120044223015L;

	public MyCacheLoader() {
		super();
	}

	@Override
	public String load(Integer key) throws CacheLoaderException {
		return String.format("value\\-%d", key);
	}

	@Override
	public Map<Integer, String> loadAll(Iterable<? extends Integer> keys) throws CacheLoaderException {

		final Map<Integer, String> map = new HashMap<Integer, String>();

		for (Integer key : keys)
			map.put(key, String.format("value\\-%d", key));

		return map;
	}
}
```

Here is the exception we are getting

```java
Exception in thread "main" com.hazelcast.nio.serialization.HazelcastSerializationException: java.lang.ClassNotFoundException: co.debjit.hazelcast.MyCacheLoader
	at com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$JavaSerializer.read(JavaDefaultSerializers.java:87)
	at com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$JavaSerializer.read(JavaDefaultSerializers.java:76)
	at com.hazelcast.internal.serialization.impl.StreamSerializerAdapter.read(StreamSerializerAdapter.java:44)
	at com.hazelcast.internal.serialization.impl.AbstractSerializationService.toObject(AbstractSerializationService.java:203)
	at com.hazelcast.client.impl.protocol.codec.holder.CacheConfigHolder.asCacheConfig(CacheConfigHolder.java:212)
	at com.hazelcast.client.impl.protocol.task.cache.CacheCreateConfigMessageTask.processMessage(CacheCreateConfigMessageTask.java:53)
	at com.hazelcast.client.impl.protocol.task.AbstractMessageTask.initializeAndProcessMessage(AbstractMessageTask.java:152)
	at com.hazelcast.client.impl.protocol.task.AbstractMessageTask.run(AbstractMessageTask.java:115)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)
	at com.hazelcast.internal.util.executor.HazelcastManagedThread.executeRun(HazelcastManagedThread.java:64)
	at com.hazelcast.internal.util.executor.HazelcastManagedThread.run(HazelcastManagedThread.java:80)
Caused by: java.lang.ClassNotFoundException: co.riverlab.hazelcast.MyCacheLoader
	at jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)
	at jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:521)
	at com.hazelcast.internal.nio.ClassLoaderUtil.tryLoadClass(ClassLoaderUtil.java:287)
	at com.hazelcast.internal.nio.ClassLoaderUtil.loadClass(ClassLoaderUtil.java:251)
	at com.hazelcast.internal.nio.IOUtil$ClassLoaderAwareObjectInputStream.resolveClass(IOUtil.java:783)
	at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1886)
	at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1772)
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2060)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1594)
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2355)
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2249)
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2087)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1594)
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:430)
	at com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$JavaSerializer.read(JavaDefaultSerializers.java:83)
	... 12 more
```