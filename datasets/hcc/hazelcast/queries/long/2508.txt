Adding an index to an IMap uses much more memory than I would have expected.

For example, with a simple test object:

```
public class ModelObject implements Portable {
    private String id;
    private long timestamp;
    ...
}
```

**With 1 node:**
Heap dump size after inserting 1,000,000 objects = ~450MB
Heap dump size after adding sorted index to "timestamp" = ~1850MB

**With 4 nodes:**
Heap dump size (per node) after inserting 1,000,000 objects = ~230MB
Heap dump size (per node) adding sorted index to "timestamp" = ~610MB

These numbers are from Hazelcast 3.2.1
