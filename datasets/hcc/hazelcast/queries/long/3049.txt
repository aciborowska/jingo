full story is here : https://groups.google.com/forum/#!topic/hazelcast/5LgM9LE-V_M

Basically the problem is Spring Security does not work well with Hazelcast Session Replication.

Workaround  is to develop a custom LogoutHandler.

public class EventFiringSecurityContextLogoutHandler extends SecurityContextLogoutHandler implements ApplicationContextAware {
    ApplicationContext applicationContext;

```
@Override
public void logout(final HttpServletRequest request, final HttpServletResponse response, final Authentication authentication) {
    if (isInvalidateHttpSession()) {
        applicationContext.publishEvent(new HttpSessionDestroyedEvent(request.getSession()));
    }
    super.logout(request, response, authentication);
}

@Override
public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
}
```

}

And LogoutFilter configuration:

``` xml
<bean id="customLogoutHandler" class="EventFiringSecurityContextLogoutHandler">
</bean>
<bean id="customLogoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
    <constructor-arg index="0" ref="customLogoutSuccessHandler"></constructor-arg>
    <constructor-arg index="1">
        <list>
            <ref bean="customLogoutHandler"/>
        </list>
    </constructor-arg>
    <property name="filterProcessesUrl" value="/logoutProcess"/>
</bean>
<security:http ...>
    <security:custom-filter ref="customLogoutFilter" position="LOGOUT_FILTER"/>
</security:http>
```
