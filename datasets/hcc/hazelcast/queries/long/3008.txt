Starting in 3.3-RC2, we've noticed that calling `IMap#keySet()` triggers deserialization of the values in the map. This did not occur with RC1 (or EA1, EA2 or 3.2.x).

Here's a short program to demonstrate. Note that when we call `IMap#keySet` or `IMap#localKeySet`, we see `TestValue#readResolve` being invoked, indicating deserialization has taken place.

This is obviously a very serious performance problem.

```
public class HazelcastGetKeysTester
{
    public static void main(String[] args) throws Exception
    {
        final Config config = new XmlConfigBuilder().build();
        config.getNetworkConfig().getJoin().getMulticastConfig().setEnabled(false);
        HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance(config);

        final IMap<String, TestValue> map = hazelcastInstance.getMap("mymap");

        System.out.println("Adding value to IMap");
        map.set("key1", new TestValue("value1"));

        System.out.println("Getting value from IMap");
        map.get("key1");

        System.out.println("Getting keys from IMap");
        map.keySet();

        System.out.println("Getting local keys from IMap");
        map.localKeySet();

        Hazelcast.shutdownAll();
    }

    public static class TestValue implements Serializable
    {
        private final String value;

        public TestValue(final String value)
        {
            this.value = value;
        }

        private Object readResolve()
        {
            System.out.println("Deserializing " + value);
            return this;
        }
    }
}
```
