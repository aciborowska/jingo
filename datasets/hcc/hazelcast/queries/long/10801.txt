Deploying a hazelcast app as a docker container as a swarm service on a specific docker overlay network

In my hazelcast config I have :
```
        <interfaces enabled="true">
            <interface>10.0.3.*</interface>        
        </interfaces> 
```

The swarm service address vip is 10.0.3.5

The deployed container's `ifconfig` shows the following:

```
/ # ifconfig -a
eth0      Link encap:Ethernet  HWaddr 02:42:0A:00:03:06
          inet addr:10.0.3.6  Bcast:0.0.0.0  Mask:255.255.255.0
          inet6 addr: fe80::42:aff:fe00:306%32690/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1450  Metric:1
          RX packets:9 errors:0 dropped:0 overruns:0 frame:0
          TX packets:9 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:718 (718.0 B)  TX bytes:718 (718.0 B)

eth1      Link encap:Ethernet  HWaddr 02:42:AC:15:00:05
          inet addr:172.21.0.5  Bcast:0.0.0.0  Mask:255.255.0.0
          inet6 addr: fe80::42:acff:fe15:5%32690/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:35 errors:0 dropped:0 overruns:0 frame:0
          TX packets:46 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:6718 (6.5 KiB)  TX bytes:4378 (4.2 KiB)

gre0      Link encap:UNSPEC  HWaddr 00-00-00-00-35-00-7B-8F-00-00-00-00-00-00-00-00
          NOARP  MTU:1476  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)

gretap0   Link encap:Ethernet  HWaddr 00:00:00:00:00:00
          BROADCAST MULTICAST  MTU:1462  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)

ip6_vti0  Link encap:UNSPEC  HWaddr 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00
          NOARP  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)

ip6gre0   Link encap:UNSPEC  HWaddr 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00
          NOARP  MTU:1448  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)

ip6tnl0   Link encap:UNSPEC  HWaddr 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00
          NOARP  MTU:1452  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)

ip_vti0   Link encap:UNSPEC  HWaddr 00-00-00-00-00-00-7B-8F-00-00-00-00-00-00-00-00
          NOARP  MTU:1332  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)

lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1%32690/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:59 errors:0 dropped:0 overruns:0 frame:0
          TX packets:59 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1
          RX bytes:3642 (3.5 KiB)  TX bytes:3642 (3.5 KiB)

sit0      Link encap:IPv6-in-IPv4
          NOARP  MTU:1480  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)

tunl0     Link encap:UNSPEC  HWaddr 00-00-00-00-00-00-7B-8F-00-00-00-00-00-00-00-00
          NOARP  MTU:1480  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
```

The problem is that when hazelcast is booting up it selects the wrong address to bind to... `10.0.3.5` (it should be selecting `10.0.3.6`....)

https://github.com/hazelcast/hazelcast/blob/210475c806328c6655ea551f6fc59ef8220b601d/hazelcast/src/main/java/com/hazelcast/instance/DefaultAddressPicker.java#L334

The above method relies on `NetworkInterface.getNetworkInterfaces();` to enumerate through all interfaces as detected by Java.

For whatever reason this is returning a set of interfaces as follows....

I have no idea why 10.0.3.5 is in that list on eth0... when ifconfig from within the container shows otherwise. The net result is that hazelcast binds to the wrong address

```
2017-06-21T19:41:42.896874504Z /fe80:0:0:0:42:acff:fe15:5%eth1
2017-06-21T19:41:42.896883193Z /172.21.0.5
2017-06-21T19:41:42.896890685Z /fe80:0:0:0:42:aff:fe00:306%eth0
2017-06-21T19:41:42.896896677Z /10.0.3.5
2017-06-21T19:41:42.896903869Z /10.0.3.6
2017-06-21T19:41:42.896911360Z /0:0:0:0:0:0:0:1%lo
2017-06-21T19:41:42.896917752Z /127.0.0.1
```

```
2017-06-21T19:41:41.995842305Z INFO: [LOCAL] [xx] [3.7.8] Interfaces is enabled, trying to pick one address matching to one of: [10.0.3.*]
2017-06-21T19:41:41.996807855Z Jun 21, 2017 7:41:41 PM com.hazelcast.instance.DefaultAddressPicker
2017-06-21T19:41:41.996825534Z INFO: [LOCAL] [xx] [3.7.8] Prefer IPv4 stack is true.
2017-06-21T19:41:42.015019470Z Jun 21, 2017 7:41:42 PM com.hazelcast.instance.DefaultAddressPicker
2017-06-21T19:41:42.015051132Z INFO: [LOCAL] [xx] [3.7.8] Picked [10.0.3.5]:5701, using socket ServerSocket[addr=/0:0:0:0:0:0:0:0,localport=5701], bind any local is true
2017-06-21T19:41:42.035666984Z Jun 21, 2017 7:41:42 PM com.hazelcast.system
```

Not sure where to point the finger as `NetworkInterface.getNetworkInterfaces();` is java stuff not hazelcast, but if this cannot be fixed it makes hazelcast deployed on docker swarm very very difficult.

Workarounds? Perhaps you guys can add some additional qualifiers for selecting the correct interface? Including exclusion matching rules?