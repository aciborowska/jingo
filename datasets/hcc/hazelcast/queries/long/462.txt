Originally reported to Hazelcast forums however I've now been asked to report this to this issue tracker (so sorry for the cross posting)
https://groups.google.com/forum/?fromgroups=#!topic/hazelcast/5G5zhyBUC2U

I have an issue where following the above exception and the log entries below, the cluster I am working with loses data. Approx procedure is:
1) Bring up two processes (port 51941 and 51946), each with an embedded Hazelcast instance and five threads modifying a shared map.
2) An additional node is brought up to join the cluster, but does not modify the cluster. (port 51951)
3) After approx 15 seconds the new node from step 2 is killed.
4) Steps 2 and 3 are repeated with port number increasing by 5 each time.

Eventually an exception is thrown and the Java code running on the first two nodes notices that the data is inconsistent (an update appears to have been lost).

Would anyone expect the procedure above to lose data?
Could anyone give an explanation of the error message below?

I'm in the process of cleaning up the Java code for this and will post tomorrow assuming you don't tell me this is a know issue! This is on Linux 64 (RHEL5.5)

Thanks,

Jamie

Apr 16, 2013 11:22:16 PM com.hazelcast.impl.ConcurrentMapManager
WARNING: [10.1.2.48]:51941 [testCluster] Target[Address[10.1.2.48]:51966] is dead! Hazelcast will retry CONCURRENT_MAP_REPLACE_IF_SAME
Apr 16, 2013 11:22:16 PM com.hazelcast.impl.ConcurrentMapManager
WARNING: [10.1.2.48]:51941 [testCluster] Store thrown exception for CONCURRENT_MAP_REPLACE_IF_SAME
java.lang.ClassCastException: java.lang.String cannot be cast to com.hazelcast.impl.concurrentmap.MultiData
        at com.hazelcast.impl.ConcurrentMapManager$ReplaceOperationHandler$ReplaceTask.doMapStoreOperation(ConcurrentMapManager.java:2891)
        at com.hazelcast.impl.ConcurrentMapManager$AbstractMapStoreOperation.run(ConcurrentMapManager.java:3860)
        at com.hazelcast.impl.executor.ParallelExecutorService$ParallelExecutorImpl$ExecutionSegment.run(ParallelExecutorService.java:212)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
        at java.lang.Thread.run(Thread.java:662)
        at com.hazelcast.impl.ExecutorThreadFactory$1.run(ExecutorThreadFactory.java:38)
