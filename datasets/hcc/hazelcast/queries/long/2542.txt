If you have an EntryListener on an IMap and someone updates an entry you are subscribed to from within a transaction, the callback will be to "entryAdded" (so no old value available) instead of "entryUpdated". 

For example:

``` java
HazelcastInstance instance = Hazelcast.newHazelcastInstance(config);

IMap<String, String> map = instance.getMap("scratch");
map.addEntryListener(new EntryListener<String, String>() {

    @Override
    public void entryUpdated(EntryEvent<String, String> event) {
        System.out.println("*UPDATED* " + event);
    }

    @Override
    public void entryRemoved(EntryEvent<String, String> event) {
        System.out.println("*REMOVED* " + event);
    }

    @Override
    public void entryEvicted(EntryEvent<String, String> event) {
        System.out.println("*EVICTED* " + event);
    }

    @Override
    public void entryAdded(EntryEvent<String, String> event) {
        System.out.println("*ADDED* " + event);
    }
}, true);

map.put("foo", "one");
map.put("foo", "two");

TransactionContext context = instance.newTransactionContext();
context.beginTransaction();
TransactionalMap<String, String> tmap = context.getMap("scratch");
tmap.put("foo", "three");
context.commitTransaction();
```

Output:

```
INFO: [localhost]:5701 [dev] [3.2.1] Initializing cluster partition table first arrangement...
*ADDED* EntryEvent {scratch} key=foo, oldValue=null, value=one, event=ADDED, by Member [localhost]:5701 this
*UPDATED* EntryEvent {scratch} key=foo, oldValue=one, value=two, event=UPDATED, by Member [localhost]:5701 this
*ADDED* EntryEvent {scratch} key=foo, oldValue=null, value=three, event=ADDED, by Member [localhost]:5701 this
```
