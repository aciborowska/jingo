I'm using a reliable topic to send messages across the two servers in my cluster. When some event happens on one of the servers the other one needs to be notified (and vice versa). Actually I publish a message and both servers receive it and act on it.

This works nicely most of the times, but sometimes a message gets lost one one machine. There is no exception in the logs, nothing. All indicates that the message is either not sent to both servers or not received by one of them. Just one of the two messages is lost not both. Most of the times I get two messages, but sometimes just one.

I was unable to figure out a pattern, looks random. It doesn't seem to mater which server it is either. Sometimes the message is lost on one server, sometimes on the other.

I publish the message like this:

```
hazelcastInstance.getReliableTopic("myTopic");
topic.publish(message);
```

with the Hazelcast instance being configured like this:

```
@Bean(name = "hazelcastInstance", destroyMethod = "shutdown")
public HazelcastInstance buildHazelcastInstance() {

    Config hazelcastConfig = new Config();

    setProperties(hazelcastConfig);
    setNetworkConfigs(hazelcastConfig);
    setReliableTopic(hazelcastConfig);
    setExecutorConfigs(hazelcastConfig);

    return Hazelcast.newHazelcastInstance(hazelcastConfig);
}

.......
.......

private void setReliableTopic(Config hazelcastConfig) {

    EventListener implementation = new MessageListener<String>() {
        @Override
        public void onMessage(Message<String> message) {
            // use message.getMessageObject() here
            // ........
        }
    };
    ListenerConfig listenerConfig = new ListenerConfig(implementation);

    ReliableTopicConfig topicConfig = new ReliableTopicConfig("myTopic")
            .setStatisticsEnabled(false) 
            .setReadBatchSize(10) 
            .setTopicOverloadPolicy(TopicOverloadPolicy.BLOCK) 
            .addMessageListenerConfig(listenerConfig);

    hazelcastConfig.addReliableTopicConfig(topicConfig);
}
```

The message is a plain String, nothing custom that might cause serialization issues.
