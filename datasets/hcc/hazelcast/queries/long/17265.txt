- Cluster size: 5
- Heap Size: 16 GB
- Version of Java: 1.8
- Operating system: Unix
- Hazelcast Version: 3.11

I am using map.get(key) function with 50 concurrent threads. Below is my code
```java
CacheValue method(String cacheName, CacheKey key){
   Date startDate = new Date();
   IMap<CacheKey,CacheValue> map = hazelcastClientInstance.getMap(cacheName);
   System.out.println("Time taken ", (new Date().getTime() - startDate.getTime())); //Here we are getting too much variation
  return map.get(key);
}

class CacheValue implements Serialization{
   private int value;
   // getter and setter methods
}

class CacheKey implements Serialization{
   // We need to have map in the key due to dynamic nature of project.
    private Map<String,String> keyMap;
   // getter setter hascode and equals methods
}
```

I am calling above method with **same input** for 50 threads. Above executions time varies from 4 milliseconds to 25 seconds.

If I call same method with 100 concurrent thread, above execution time varies from 4 milliseconds to 40 second.

It has been noticed for a lesser number of threads (8 threads) also that time increases operation by operation.

This is very strange. It seems that we can not use hazelcast if there are so many user request for the same data.