Following post : https://groups.google.com/forum/#!topic/hazelcast/H2WzYZcpikw. Mehmet Dogan suggest I fill a bug Report.

Context : 

I tried the portable serialization in order to avoid sharing class definition between servers and clients as you suggested but I could not make it works properly. I always have the following exception : 

com.hazelcast.nio.serialization.HazelcastSerializationException: Could not find PortableFactory for factoryId: 1
    at com.hazelcast.nio.serialization.SerializationContextImpl.getPortableContext(SerializationContextImpl.java:90)
    at com.hazelcast.nio.serialization.SerializationContextImpl.lookup(SerializationContextImpl.java:57)
    at com.hazelcast.nio.serialization.Data.readData(Data.java:67)
    at com.hazelcast.map.client.MapPutRequest.readPortable(MapPutRequest.java:121)
    at com.hazelcast.nio.serialization.PortableSerializer.read(PortableSerializer.java:99)
    at com.hazelcast.nio.serialization.PortableSerializer.read(PortableSerializer.java:29)
    at com.hazelcast.nio.serialization.StreamSerializerAdapter.read(StreamSerializerAdapter.java:59)
    at com.hazelcast.nio.serialization.SerializationServiceImpl.toObject(SerializationServiceImpl.java:218)
    at com.hazelcast.client.ClientEngineImpl$ClientPacketProcessor.run(ClientEngineImpl.java:402)
    at com.hazelcast.util.executor.ManagedExecutorService$Worker.run(ManagedExecutorService.java:166)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
    at java.lang.Thread.run(Thread.java:744)
    at com.hazelcast.util.executor.PoolExecutorThreadFactory$ManagedThread.run(PoolExecutorThreadFactory.java:59)

After checking what was going on the source code of Hazelcast server, it seems that Hazelcast should know the the PortableFactory associated to my object.

I manage to make it works by adding the following configuration on server side : 

 <serialization>
        <portable-version>0</portable-version>
        <portable-factories>
                  <portable-factory factory-id="1" >SessionPortableFactory</portable-factory>
        </portable-factories>
</serialization>

But by adding a PortableFactory that has nothing to with my object, it still works. For example, I have added a totally empty portable factoy and everything works (put, get, query) :

 <serialization>
        <portable-version>0</portable-version>
        <portable-factories>
                  <portable-factory factory-id="1" >MyFakePortableFactory</portable-factory>
        </portable-factories>
</serialization>

Since we should be able to NOT share objects between server and client, can you fix this bug ? Is it possible to be fixed for 3.2  ?

Thanks,

Will.
