Reproducer : 

```
    @Test
    public void issue() throws Exception {
        Config config = new Config();
        MapConfig testMapConfig = config.getMapConfig("testMap");
        testMapConfig.setInMemoryFormat(InMemoryFormat.OBJECT);
        testMapConfig.getMapIndexConfigs().add(new MapIndexConfig("lastValue", true));
        HazelcastInstance instance = Hazelcast.newHazelcastInstance(config);
        try {
            IMap<Object, Object> testMap = instance.getMap("testMap");

            testMap.set(1L, new MyData(10));

            testMap.executeOnKey(1L, new MyProcessor(15));

            Predicate betweenPredicate = Predicates.between("lastValue", 0, 11);
            Collection<Object> values = testMap.values(betweenPredicate);
            final Collection<Object> vals = testMap.values();

            Assert.assertEquals(0, values.size());
        } finally {
            instance.shutdown();
        }
    }

    static class MyData implements Serializable {
        private long lastValue;

        public MyData(long lastValue) {
            this.lastValue = lastValue;
        }

        public long getLastValue() {
            return lastValue;
        }

        public void setLastValue(long lastValue) {
            this.lastValue = lastValue;
        }
    }

    static class MyProcessor extends AbstractEntryProcessor<Long, MyData> {
        private long newValue;

        public MyProcessor(long newValue) {
            this.newValue = newValue;
        }

        @Override
        public Object process(Map.Entry<Long, MyData> entry) {
            MyData data = entry.getValue();
            data.setLastValue(newValue);
            entry.setValue(data);
            return null;
        }
    }
```
