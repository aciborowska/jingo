```java
map.getAsync("k")
           .thenApply(v -> {throw new RuntimeException("foo");})
           .toCompletableFuture()
           .get();
```

**Expected behavior**
I expect the `get` call in the above code to throw the `foo` exception, wrapped in `java.util.concurrent.ExecutionException`. In other words, it should be equivalent to standard `CompletableFuture`:

```java
        CompletableFuture.completedFuture("bar")
                .thenApply(v -> { throw new RuntimeException("foo"); })
                .get();
```