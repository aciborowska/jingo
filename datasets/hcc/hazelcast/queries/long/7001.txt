Calling `IMap.addEntryListener` with null values results in behavior inconsistent with API as well as different behavior between members and clients and between Hazelcast versions 3.5.4 and 3.6-EA2.

Below is the code I used to test this. The full testing was done on Windows 8.1 with Java 8, but similar behavior was observed on Windows 7 and CentOS 6.6, both running Java 8

``` java
HazelcastInstance instance = [new member or client instance]
IMap<String, String> map = instance.getMap("test_map");
MapListener listener = null;
Predicate<String, String> predicate = null;
String key = null;
// one of the following
map.addEntryListner(listener, false);
map.addEntryListner(listener, key, false);
map.addEntryListner(listener, predicate, false);
map.addEntryListner(listener, predicate, key, false);
```

Below are inconsistencies that I've found between the documentation and behavior on members on either version 3.5.4 or 3.6-EA2.
- The API states that `IMap.addEntryListener(MapListener, K, boolean)` will throw a `NullPointerException` if the key is null, but no exception is thrown when `key` is null (and other arguments are not null).
- No other `addEntryListener` methods document `NullPointerException`s that may be thrown. However, if `listener` or `predicate` are null, then a `NullPointerException` will be thrown.

Below are behaviors of clients on version 3.5.4 which differ from members.
- Using a null `listener` will result in an `IllegalArgumentException`.
- Using either a null `listener` or `key` results in no exception being thrown.

Below are behaviors of clients on version 3.6-EA2 which differ from members.
- Using a null `listener` will result in an `IllegalArgumentException`.
- Using either a null `listener` or `key` results in a `HazelcastException` being thrown.
