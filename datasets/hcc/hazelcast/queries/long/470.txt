Hi,

We are using distributed executor service to process a lot of tasks which look like:

@SpringAware
public abstract class PlayerTaskBase implements PartitionAware<Long>, Serializable {
    @Resource(name = "playerService")
    private transient PlayerService playerService;
    // a lot more spring beans injected here
}

and it leads to memory leak by adding cacheKey) to nonAdvisedBeans set in class AbstractAutoProxyCreator, which are not removed after that.
Example of cacheKey string:
"com.playtech...task.IncreaseBalanceTask_com.playtech...task.IncreaseBalanceTask#11932"

That is invoked from SpringManagedContext class.
    private Object initializeIfSpringAwareIsPresent(Object obj) {
        Class clazz = obj.getClass();
        if (clazz.isAnnotationPresent(SpringAware.class)) {
            final String name = clazz.getName() + "#" + idGen.incrementAndGet();
            beanFactory.autowireBean(obj);
            obj = beanFactory.initializeBean(obj, name);
        }
        return obj;
    }

At this moment I see only one way - do not use injecting beans by using spring and to handle it manually.
Could you suggest other solution how to avoid this leak or how to deal with it?

Found in hazelcast-spring:2.5
