Also at forum post https://groups.google.com/forum/#!topic/hazelcast/HCLJ1U0OBNE

When an index is added to a map under Hazelcast 3, the index is not cleared when the map is cleared.  This means that searches will appear to locate entries which are no longer present in the map following a map clear.  This is demonstrated by the following test program.

public class GettingStarted {
    public static class Customer implements Serializable {
        private final UUID uuid;
        private final String name;
        public Customer(UUID uuid, String name) {
            super();
            this.uuid = uuid;
            this.name = name;
        } 

```
    public UUID getUuid() {
        return uuid;
    }

    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return "Customer [uuid=" + uuid + ", name=" + name + "]";
    }
}

public static void main(String[] args) {
    Config config = new Config();
    HazelcastInstance instance = Hazelcast.newHazelcastInstance(config);
    Map<UUID, Customer> mapCustomers = instance.getMap("customers");
    ((IMap) mapCustomers).addIndex("uuid", false);
    Customer joe = new Customer(UUID.randomUUID(), "Joe");
    mapCustomers.put(joe.getUuid(), joe);

    /*
     * Before map clear.
     */
    System.out.println("customer Joe: " + mapCustomers.get(joe.getUuid()));
    System.out.println("map size = " + mapCustomers.size());

    {
        final EntryObject entryObject = new PredicateBuilder().getEntryObject();
        @SuppressWarnings("unchecked")
        final Predicate<UUID, Customer> predicate = entryObject.get("uuid").equal(joe.getUuid());
        Collection<Customer> values = ((IMap<UUID, Customer>) mapCustomers).values(predicate);
        for (Customer customer : values) {
            System.out.println("search for customer (correctly) returned -> " + customer);
        }
    }

    /*
    * After map clear
    */

    mapCustomers.clear();
    System.out.println("customer Joe: " + mapCustomers.get(joe.getUuid()));
    System.out.println("map size = " + mapCustomers.size());

    {
        final EntryObject entryObject = new PredicateBuilder().getEntryObject();
        @SuppressWarnings("unchecked")
        final Predicate<UUID, Customer> predicate = entryObject.get("uuid").equal(joe.getUuid());
        Collection<Customer> values = ((IMap<UUID, Customer>) mapCustomers).values(predicate);
        for (Customer customer : values) {
            System.out.println("search for customer (incorrectly) returned -> " + customer);
        }
    }

    System.exit(0);
}
```

}
