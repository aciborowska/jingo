Contract of `scheduleAtFixedRate` says: 

```
     * If any execution of this task
     * takes longer than its period, then subsequent executions
     * may start late, but **will not concurrently execute**.
```

However the `ScheduledExecutorServiceDelegate` wraps tasks in `ScheduledTaskRunner` which delegates to a different executor. As a consequence a task can be executed concurrently thus a contract of `ScheduledExecutorService` is violated. 

This leads to surprises. this was seen in a testing environment: 

``` java
Exception in thread "cached4" java.lang.IllegalArgumentException: Comparison method violates its general contract!
    at java.util.TimSort.mergeHi(TimSort.java:895)
    at java.util.TimSort.mergeAt(TimSort.java:512)
    at java.util.TimSort.mergeCollapse(TimSort.java:437)
    at java.util.TimSort.sort(TimSort.java:241)
    at java.util.Arrays.sort(Arrays.java:1512)
    at java.util.ArrayList.sort(ArrayList.java:1454)
    at java.util.Collections.sort(Collections.java:175)
    at com.hazelcast.map.impl.eviction.ExpirationManager$ClearExpiredRecordsTask.sortPartitionContainers(ExpirationManager.java:127)
    at com.hazelcast.map.impl.eviction.ExpirationManager$ClearExpiredRecordsTask.run(ExpirationManager.java:121)
    at com.hazelcast.util.executor.CachedExecutorServiceDelegate$Worker.run(CachedExecutorServiceDelegate.java:212)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    at java.lang.Thread.run(Thread.java:745)
    at com.hazelcast.util.executor.HazelcastManagedThread.executeRun(HazelcastManagedThread.java:76)
    at com.hazelcast.util.executor.HazelcastManagedThread.run(HazelcastManagedThread.java:92)
```
