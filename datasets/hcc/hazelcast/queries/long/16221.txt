If CP Subsystem is initialized in the same system multiple times with a different set of Hazelcast members, it should generate different CP group ids so that operations sent to a CP group in one CP Subsystem instance should not be committed on a CP group with the same name in the other CP Subsystem instance.

In short, the following test should pass:

```
        int cpMemberCount = 3;
        HazelcastInstance[] instances = newInstances(cpMemberCount);
        waitUntilCPDiscoveryCompleted(instances);

        RaftGroupId groupId1 = getRaftInvocationManager(instances[0]).createRaftGroup(DEFAULT_GROUP_NAME).joinInternal();

        instances[0].getLifecycleService().terminate();
        instances[1].getLifecycleService().terminate();
        instances[2].getLifecycleService().terminate();

        HazelcastInstance[] newInstances = new HazelcastInstance[cpMemberCount];
        newInstances[0] = factory.newHazelcastInstance(createConfig(cpMemberCount, cpMemberCount));
        newInstances[1] = factory.newHazelcastInstance(createConfig(cpMemberCount, cpMemberCount));
        newInstances[2] = factory.newHazelcastInstance(createConfig(cpMemberCount, cpMemberCount));

        waitUntilCPDiscoveryCompleted(newInstances);

        RaftGroupId groupId2 = getRaftInvocationManager(newInstances[0]).createRaftGroup(DEFAULT_GROUP_NAME).joinInternal();

        assertNotEquals(groupId1, groupId2);
```