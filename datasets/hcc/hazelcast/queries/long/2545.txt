If you want to query a Portable object based on a field in a nested Portable object, the whole outer object will be deserialized and the query is done by reflection.

For example:

``` java
public class OuterObject implements Portable {

    private NestedObject nested;

    public NestedObject getNested() {
        return nested;
    }

    @Override
    public void writePortable(PortableWriter writer) throws IOException {
        writer.writePortable("nested", nested);
    }

    ...

}

public class NestedObject implements Portable {

    private long timestamp;

    public long getTimestamp() {
        return timestamp;
    }

    @Override
    public void writePortable(PortableWriter writer) throws IOException {
        writer.writeLong("timestamp", timestamp);
    }

    ...

}
```

For an IMap containing OuterObject values, a query / index on "nested.timestamp" will deserialize the OuterObject and use reflection, instead of deserializing just the timestamp field.
