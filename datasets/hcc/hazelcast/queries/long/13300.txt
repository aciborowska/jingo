It's not uncommon from Java 8 onwards for Java models with Nullable fields to adopt `Optional<T>` as the getter return type where the underlying field is type `T`.

This becomes a problem when attempting to index against a nullable field, as the underlying implementation finds the Optional getter method first rather than the value of the underlying field. A workaround _we_ use is to use a value extractor to extract the value from the optional as a map attribute and index against that.

The suggestion would be to add quality of life improvements to the ReflectionHelper to recognise an Optional getter method and fall through to resolving against the field value directly instead.