Scenario: Putting an entry into a map with an explicit TTL and subsequently, before the TTL has expired, putting an entry without an explicit TTL

Expected: the original TTL is invalidated and the latest inserted entry does not get evicted
Actual: the latest value inserted without a TTL is evicted

Here's a failing test that demonstrates this behaviour:

```java
public void shouldNotExpireEntriesThatAreSetWithTTLThenOverwrittenWithoutTTL() throws InterruptedException {

    final HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance();
    final IMap<String, String> map = hazelcastInstance.getMap(MAP_NAME);

    assertNull(map.get(KEY));

    map.put(KEY, VALUE_ONE, 1L, TimeUnit.SECONDS);

    assertEquals(VALUE_ONE, map.get(KEY));

    map.put(KEY, VALUE_TWO);

    Thread.sleep(1000L);

    assertEquals(VALUE_TWO, map.get(KEY)); // Assertion failure, value is null
}
```

