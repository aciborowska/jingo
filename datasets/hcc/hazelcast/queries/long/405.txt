According to blog message http://goo.gl/5me85, locked entries in a map shouldn't be subject to eviction. 
And this is true when you try to access the locked entry using `map.get()`. Issues seem to arise with `map.containsKey()` and `map.tryLockAndGet()` methods where the locked entry seems to be anyway evicted.

I used HZ version 2.5, the simple test-case snippets below are able to reproduce the encountered anomalies 

```
@Test
public void testContainsKeyOnExpiredLockedEntry() throws InterruptedException, TimeoutException {
    final String value = "XXXXXX";
    getMap().put(KEY1, value);
    getMap().lock(KEY1);

    Thread.sleep(2 * ENTRY_TTL_SECS * 1000);
    final String value1 = getMap().get(KEY1);
    final boolean containsKey = getMap().containsKey(KEY1);

    getMap().unlock(KEY1);

    assertNotNull(value1);
    assertEquals(value, value1);
    assertTrue(containsKey);    // This fails!
}


@Test
public void testTryLockAndGetOnExpiredLockedEntry() throws InterruptedException, TimeoutException {
    final String value = "XXXXXX";
    getMap().put(KEY1, value);
    getMap().lock(KEY1);

    Thread.sleep(2 * ENTRY_TTL_SECS * 1000);

    final String value1 = getMap().get(KEY1);
    final String value2 = getMap().tryLockAndGet(KEY1, 1, TimeUnit.SECONDS);

    getMap().unlock(KEY1);
    getMap().unlock(KEY1);

    assertNotNull(value1);
    assertEquals(value, value1);
    assertNotNull(value2);          // This fails!
    assertEquals(value, value2);
}
```

A couple of words here: 
- `ENTRY_TTL_SECS` is the parameter used to configure the map entries TTL: `config.getMapConfig(MAP_NAME).setTimeToLiveSeconds(ENTRY_TTL_SECS);`
- `getMap()` simply return an `IMap<String, String>`
- Both the tests pass removing the sleep.

Thanks,
Mauri
