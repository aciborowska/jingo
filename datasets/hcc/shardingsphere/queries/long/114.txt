```
private void initDBConnection(){        
    try {
        conn.setAutoCommit(false);          
        StringBuffer sb = new StringBuffer();
        sb.append(" insert into t_mv_owner_x(videoid,kugouid,userid,deleteTime,deleteStatus,selfdirect,");
        sb.append(" relation)");                
        sb.append(" values(?,?,?,?,?,?,?)");
        pres = conn.prepareStatement(sb.toString());            
    } catch (SQLException e1) {
        log.error("init 3006 DB exception:",e1);
    }
}


private void batchInsert(List<MvOwner> Owners) throws SQLException{
    for (MvOwner vo : Owners) {
        pres.setLong(1, vo.getVideoid());
        pres.setLong(2, vo.getKugouid());
        pres.setLong(3, vo.getUserid());
        pres.setInt(4, vo.getDeleteTime());
        pres.setInt(5, vo.getDeleteStatus());
        pres.setInt(6, vo.getSelfdirect());
        pres.setInt(7, vo.getSelfdirect());
        pres.addBatch();
    }
    pres.executeBatch();
    conn.commit();
    pres.clearBatch();
    Owners.clear();
}



    TableRule ownerRule = TableRule.builder("t_mv_owner_x").actualTables(Arrays.asList("t_mv_owner_0", "t_mv_owner_1")).dataSourceRule(dataSourceRule).build();
    ShardingRule shardingRule = ShardingRule.builder().dataSourceRule(dataSourceRule).tableRules(Arrays.asList(ownerRule))
            .bindingTableRules(Collections.singletonList(new BindingTableRule(Arrays.asList(ownerRule))))
            .tableShardingStrategy(new TableShardingStrategy("videoid", new SingleKeyModuloTableShardingAlgorithm())).build();
    return new ShardingDataSource(shardingRule);
```
