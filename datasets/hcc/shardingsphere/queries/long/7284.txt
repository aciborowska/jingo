## Bug Report

```
java.sql.SQLException: Column 'DBNAME' not found.
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:965)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:898)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:887)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:861)
	at com.mysql.jdbc.ResultSetImpl.findColumn(ResultSetImpl.java:1078)
	at com.zaxxer.hikari.pool.HikariProxyResultSet.findColumn(HikariProxyResultSet.java)
	at org.apache.shardingsphere.sql.parser.binder.metadata.column.ColumnMetaDataLoader.load(ColumnMetaDataLoader.java:78)
	at org.apache.shardingsphere.sql.parser.binder.metadata.table.TableMetaDataLoader.load(TableMetaDataLoader.java:46)
	at org.apache.shardingsphere.core.metadata.ShardingMetaDataLoader.load(ShardingMetaDataLoader.java:83)
	at org.apache.shardingsphere.core.metadata.ShardingMetaDataLoader.loadShardingSchemaMetaData(ShardingMetaDataLoader.java:134)
	at org.apache.shardingsphere.core.metadata.ShardingMetaDataLoader.load(ShardingMetaDataLoader.java:125)
	at org.apache.shardingsphere.shardingproxy.backend.schema.impl.ShardingSchema.loadSchemaMetaData(ShardingSchema.java:179)
	at org.apache.shardingsphere.shardingproxy.backend.schema.impl.ShardingSchema.createMetaData(ShardingSchema.java:88)
	at org.apache.shardingsphere.shardingproxy.backend.schema.impl.ShardingSchema.<init>(ShardingSchema.java:79)
	at org.apache.shardingsphere.shardingproxy.backend.schema.LogicSchemaFactory.newInstance(LogicSchemaFactory.java:56)
	at org.apache.shardingsphere.shardingproxy.backend.schema.LogicSchemas.initSchemas(LogicSchemas.java:102)
	at org.apache.shardingsphere.shardingproxy.backend.schema.LogicSchemas.init(LogicSchemas.java:91)
	at org.apache.shardingsphere.shardingproxy.Bootstrap.startWithRegistryCenter(Bootstrap.java:138)
	at org.apache.shardingsphere.shardingproxy.Bootstrap.main(Bootstrap.java:87)
```
### Which version of ShardingSphere did you use?
4.1.1
### Which project did you use? ShardingSphere-JDBC or ShardingSphere-Proxy?
ShardingSphere-Proxy
### Expected behavior

### Actual behavior

### Reason analyze (If you can)
ColumnMetaDataLoader load error because JDBC API `DatabaseMetaData getTables`   consider `_` as a wildcard symbol and will find all tables match the table pattern.
we have two tables like this `a_b_d` and `a_bcd`. 
when load 1st table's column, it also loads the second table's column, then throw `column xxx not found`.

### Steps to reproduce the behavior, such as: SQL to execute, sharding rule configuration, when exception occur etc.
just create two tables match the pattern above and they should have a different columns. Then bootstrap the sharding-proxy
### Example codes for reproduce this issue (such as a github link).
