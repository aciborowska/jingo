## Bug Report

When query columns of sharding table by `getColumns` method of JDBC, sharding-proxy will throw exception:
```
Exception in thread "main" java.sql.SQLException: 2Unknown exception: [Cannot find table rule and default data source with logic table: '%']
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:1086)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:4237)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:4169)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2617)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2778)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2828)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2777)
	at com.mysql.jdbc.StatementImpl.executeQuery(StatementImpl.java:1651)
	at com.mysql.jdbc.DatabaseMetaData$2.forEach(DatabaseMetaData.java:2711)
	at com.mysql.jdbc.DatabaseMetaData$2.forEach(DatabaseMetaData.java:2598)
	at com.mysql.jdbc.IterateBlock.doForAll(IterateBlock.java:50)
	at com.mysql.jdbc.DatabaseMetaData.getColumns(DatabaseMetaData.java:2597)
	at jdbc.JDBCUtil.main(JDBCUtil.java:38)
```

But I used sharding-proxy 4.0.0-RC2, It can work well.

### Which version of ShardingSphere did you use?

4.0.0

### Which project did you use? Sharding-JDBC or Sharding-Proxy?

Sharding-Proxy

### Expected behavior

get Column info from Result Set.

### Actual behavior

Throw exception.

### Reason analyze (If you can)

the method `getColumn` should map to SQL `SHOW FULL COLUMNS ...`

So I think there are some error in `parse` or `extractor`.

### Steps to reproduce the behavior, such as: SQL to execute, sharding rule configuration, when exception occur etc.

```yaml
schemaName: sharding_db

dataSources:
 ds_0:
   url: jdbc:mysql://127.0.0.1:3306/demo_ds_0?serverTimezone=UTC&useSSL=false
   username: root
   password:
   connectionTimeoutMilliseconds: 30000
   idleTimeoutMilliseconds: 60000
   maxLifetimeMilliseconds: 1800000
   maxPoolSize: 50
 ds_1:
   url: jdbc:mysql://127.0.0.1:3306/demo_ds_1?serverTimezone=UTC&useSSL=false
   username: root
   password:
   connectionTimeoutMilliseconds: 30000
   idleTimeoutMilliseconds: 60000
   maxLifetimeMilliseconds: 1800000
   maxPoolSize: 50

shardingRule:
 tables:
   t_order:
     actualDataNodes: ds_${0..1}.t_order_${0..1}
     tableStrategy:
       inline:
         shardingColumn: order_id
         algorithmExpression: t_order_${order_id % 2}
     keyGenerator:
       type: SNOWFLAKE
       column: order_id
   t_order_item:
     actualDataNodes: ds_${0..1}.t_order_item_${0..1}
     tableStrategy:
       inline:
         shardingColumn: order_id
         algorithmExpression: t_order_item_${order_id % 2}
     keyGenerator:
       type: SNOWFLAKE
       column: order_item_id
 bindingTables:
   - t_order,t_order_item
 defaultDatabaseStrategy:
   inline:
     shardingColumn: user_id
     algorithmExpression: ds_${user_id % 2}
 defaultTableStrategy:
   none:

```

### Example codes for reproduce this issue (such as a github link).

```java
        Class.forName("com.mysql.jdbc.Driver");
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3307/sharding_db", "root", "root");
            Statement statement = connection.createStatement()) {
            ResultSet rs = metaData.getColumns("sharding_db", null, "t_order", "%");
       }
```
