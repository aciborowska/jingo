For English only, other languages we will close it directly.

Please answer these questions before submitting your issue. Thanks!

### Which version of Sharding-Sphere do you using?
2.0.3

### Expected behavior
resolve placeholder

### Actual behavior
treat placeholder as raw string

### Steps to reproduce the behavior
+ use placeholder in configuration yaml

```
sharding:
  jdbc:
    datasource:
      names: ds
      ds: 
        url: ${KEY_IN_OS_ENV}
```
+ start application
+ get "malfrom url" exception because jdbc get "${KEY_IN_OS_ENV}" for url connection

### Reason analyze
Sharding JDBC get configuration from spring boot yaml files by `io.shardingjdbc.spring.boot.SpringBootConfiguration`. The code to get datasource configuration is blow

```
private void setDataSourceMap(final Environment environment) {
        RelaxedPropertyResolver propertyResolver = new RelaxedPropertyResolver(environment, "sharding.jdbc.datasource.");
        String dataSources = propertyResolver.getProperty("names");
        for (String each : dataSources.split(",")) {
            try {
                Map<String, Object> dataSourceProps = propertyResolver.getSubProperties(each + ".");
                Preconditions.checkState(!dataSourceProps.isEmpty(), "Wrong datasource properties!");
                DataSource dataSource = DataSourceUtil.getDataSource(dataSourceProps.get("type").toString(), dataSourceProps);
                dataSourceMap.put(each, dataSource);
            } catch (final ReflectiveOperationException ex) {
                throw new ShardingJdbcException("Can't find datasource type!", ex);
            }
        }
    }
```

`getProperty(String)` can recognize placeholder and parse it. But `RelaxedPropertyResolver.getSubProperties(String)` can't. So all the placeholder has been resolved as raw string and pass to Sharding JDBC framework.

