Please answer these questions before submitting your issue. Thanks!
开源不易，我们希望将精力放在完成新功能和解决有价值的问题上，为了让大家的配合更具有效率，请填写以下列出的全部问题

### Which version of Sharding-Sphere do you using?（您使用的Sharding-Sphere版本为？）
version : 3.0.0.M1 , branch : master
### Expected behavior （您预期的结果是）
Get the right numeric value of length encoded integer
### Actual behavior （实际运行的结果是）
## 1、Bad comparision

According to the doc https://dev.mysql.com/doc/internals/en/integer.html#packet-Protocol::LengthEncodedInteger
the first byte maybe an unsigned value , so we should use byteBuf.readByte() & 0xFF instead

<img width="564" alt="image" src="https://user-images.githubusercontent.com/6971152/40461066-2aae96a6-5f3c-11e8-91fd-fde497c91a08.png">

## 2、Unnecessary comparison
MySQLPacketPayload#writeIntLenenc , line 199
The "value >= 251" is checked by "value < 251"
<img width="624" alt="image" src="https://user-images.githubusercontent.com/6971152/40461237-e589e304-5f3c-11e8-909b-019bd535917d.png">

## by the way
RuleRegistry , line 77
Using  map.entrySet() could be more efficiency and readable
and the dataSourceMap's size could be adjust to dataSourceParameters.size()
<img width="871" alt="image" src="https://user-images.githubusercontent.com/6971152/40461269-19c9f0be-5f3d-11e8-8d9d-312da9151df3.png">


### Steps to reproduce the behavior （可重现问题的操作步骤）

### Please provide the reproduce example codes (such as github link)，otherwise we will label the issue as Invalid and close it.（为了节省复现问题的时间，请务必提供可重现的代码，否则我们会将issue直接标记为invalid并关闭）

package io.shardingsphere.proxy;

import static org.junit.Assert.*;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.PooledByteBufAllocator;
import io.shardingsphere.proxy.transport.mysql.packet.MySQLPacketPayload;
import org.junit.Test;

/**
 * @author lzj
 * @date 2018/5/23
 */
public class MySqlPacketPayloadTest {

    @Test
    public void test0xfb() throws Exception {
        ByteBuf byteBuf = PooledByteBufAllocator.DEFAULT.buffer();
        //0xFB, 251
        byteBuf.writeByte(0xFB);
        MySQLPacketPayload packetPayload = new MySQLPacketPayload(byteBuf);
        long result = packetPayload.readIntLenenc();
        assertEquals(0xFB, result);

    }

    @Test
    public void test0xfc() throws Exception {
        ByteBuf byteBuf = PooledByteBufAllocator.DEFAULT.buffer();
        //0xFC,252
        byteBuf.writeByte(0xFC);
        byteBuf.writeShortLE(0xFC);
        MySQLPacketPayload packetPayload = new MySQLPacketPayload(byteBuf);
        long result = packetPayload.readIntLenenc();
        assertEquals(0xFC, result);

    }

    @Test
    public void test0xfd() throws Exception {
        ByteBuf byteBuf = PooledByteBufAllocator.DEFAULT.buffer();
        //0xfd,253
        byteBuf.writeByte(0xFD);
        byteBuf.writeMediumLE(0xFD);
        MySQLPacketPayload packetPayload = new MySQLPacketPayload(byteBuf);
        long result = packetPayload.readIntLenenc();
        assertEquals(0xFD, result);

    }

    @Test
    public void test0xff() throws Exception {
        ByteBuf byteBuf = PooledByteBufAllocator.DEFAULT.buffer();
        //0xFF,255
        byteBuf.writeByte(0xFF);
        byteBuf.writeLongLE(0xFF);
        MySQLPacketPayload packetPayload = new MySQLPacketPayload(byteBuf);
        long result = packetPayload.readIntLenenc();
        assertEquals(0xFF, result);
    }



}



Code should based on https://github.com/sharding-sphere/sharding-sphere-example
（代码请基于 https://github.com/sharding-sphere/sharding-sphere-example）
