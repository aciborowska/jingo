This bug has been found during development of OPENDJ-6091.

OPENDJ-6091 works great except one thing: when using subtree delete request control, the thread ends up in a self deadlock in JE.
 This is all due to the way the children are referencing the parent.

 

Details on internal implementation:

	Entries are stored into JE by stamping an internal ID on each of them. The parents always have an internal ID which is higher than their children.
	In order to delete an entry, we need to load it, so we can remove all references to it from the various existing indexes .



 

While doing the subtree delete, the parent and its descendants are deleted by increasing order of internal IDs (See EntryContaineer.deleteEntry()).
During the subtree delete, the target entry is deleted without problem.
Then when deleting the first child, it gets loaded from id2entry, which rebuilds the collective attributes. Remember that we have one collective attribute which references the parent. The code tries to load the parent, which has been removed in the previous iteration. Since the read is performed in a new transaction with READ_COMMITED, the thread as no choice but to wait after itself. The thread is now self-deadlocked!!!

 

Note: this problem is probably not new. It should be possible to use collective attributes today in order to trigger this same situation. It just happens that the current use case is making it very apparent.