
	The DS<->RS failover mechanism requires a failed heartbeat, a timed out connection request or a closed/rejected existing connection to initiate.
	Replication heartbeats are only published when there are no other replication messages to be published.



During a non responsive established connection at the RS, a DS will continue to send updates to an RS in this state as the TCP socket is still "open", as defined by the Linux TCP socket and TCP packet retry properties. This scenario can introduce a substantial delay for a DS to failover to an alternative RS. It will also delay any write operations at the DS until they timeout, or they can be written to the changelog.

 

The current implementation of the replication heartbeat does not send heartbeats when there are replication updates:

From the javadoc:


/**
 * This message is sent at regular intervals by the replication server when it is sending no other messages. It allows
 * the directory server to detect a problem sooner when a synchronization server has crashed or has been isolated from
 * the network.
 */
public class HeartbeatMsg extends ReplicationMsg {


 

For an already established DS to RS connection that is not responding to incoming messages (i.e. because of network delay, "halted" RS, VM pause, etc.), there is no failover until the TCP socket times out or the TCP retry policy is exhausted.

Given the Linux default value of

tcp_retries2=15


Set to 15, this means that it takes 804.6 seconds (13.4 mins) before a broken network link is notified to the application (DS), the connection is only detected as broken when the 15th retry expires.

 

Continuing the replication heartbeats regardless of replication updates should mitigate this scenario.

 

Tuning tcp_retries2 will also work, but this affects all network connections. Care should be taken to be too aggressive as this could prematurely close network connections.