OpenIDM has the notion of a conditional role, which is automatically assigned to a user who matches the condition. The condition can be defined as a queryFilter.

 

The OpenIDM UI creates conditions that look like:

"/mail co \"example\"" --note the escaped double-quotes

These assignments are never made, despite users which match the condition.

 

The functional tests create conditions which look like:

"/mail co 'example'"

These are assigned as expected. 

 

To-be-assigned roles with conditions are obtained via a queryFilter=/condition pr

This query will not return roles with conditions which have escaped double-quotes.

 

Ldap and query results follow:

$ bin/ldapsearch -D "cn=Directory Manager" -w password -b "ou=role,ou=managed,dc=openidm,dc=forgerock,dc=com" -p 61389 -h localhost "(objectclass=*)"

dn: ou=role,ou=managed,dc=openidm,dc=forgerock,dc=com
objectClass: top
objectClass: organizationalUnit
ou: role

dn: uid=mail-example-role-double,ou=role,ou=managed,dc=openidm,dc=forgerock,dc=com
objectClass: uidObject
objectClass: top
objectClass: fr-idm-managed-role
fr-idm-managed-role-json: \{"name":"mail-example-role-double","description":"mail contains example","condition":"/mail co \"example\""}
uid: mail-example-role-double 

dn: uid=mail-example-role,ou=role,ou=managed,dc=openidm,dc=forgerock,dc=com
objectClass: uidObject
objectClass: top
objectClass: fr-idm-managed-role
fr-idm-managed-role-json: \{"name":"mail-example-role","description":"mail contains example","condition":"/mail co 'example'"}
uid: mail-example-role



$ curl http://localhost:8080/openidm/repo/managed/role?_queryFilter=true

{
 "result": [
 {
 "_id": "mail-example-role-double",
 "_rev": "00000000edef73b3",
 "name": "mail-example-role-double",
 "description": "mail contains example",
 "condition": "/mail co \"example\""
 },
 {
 "_id": "mail-example-role",
 "_rev": "0000000083116ec1",
 "name": "mail-example-role",
 "description": "mail contains example",
 "condition": "/mail co 'example'"
 }
 ],
 "resultCount": 2,
 "pagedResultsCookie": null,
 "totalPagedResultsPolicy": "NONE",
 "totalPagedResults": -1,
 "remainingPagedResults": -1
 }



$ curl http://localhost:8080/openidm/repo/managed/role?_queryFilter=/condition pr

{
 "result": [
 {
 "_id": "mail-example-role",
 "_rev": "0000000083116ec1",
 "name": "mail-example-role",
 "description": "mail contains example",
 "condition": "/mail co 'example'"
 }
 ],
 "resultCount": 1,
 "pagedResultsCookie": null,
 "totalPagedResultsPolicy": "NONE",
 "totalPagedResults": -1,
 "remainingPagedResults": -1
 }


 

Strangely enough, the presence of an escaped double quote in the json blob seems to prevent any query against fields in the json blob:

$ curl http://localhost:8080/openidm/repo/managed/role?_queryFilter=/name pr

{
 "result": [
 {
 "_id": "mail-example-role",
 "_rev": "0000000083116ec1",
 "name": "mail-example-role",
 "description": "mail contains example",
 "condition": "/mail co 'example'"
 }
 ],
 "resultCount": 1,
 "pagedResultsCookie": null,
 "totalPagedResultsPolicy": "NONE",
 "totalPagedResults": -1,
 "remainingPagedResults": -1
 }


 

A query against a field not in the json blob works as expected:

	curl http://localhost:8080/openidm/repo/managed/role?_queryFilter=/_id pr
	curl http://localhost:8080/openidm/repo/managed/role?_queryFilter=/_rev pr



both return:

{
 "result": [
 {
 "_id": "mail-example-role-double",
 "_rev": "00000000edef73b3",
 "name": "mail-example-role-double",
 "description": "mail contains example",
 "condition": "/mail co \"example\""
 },
 {
 "_id": "mail-example-role",
 "_rev": "0000000083116ec1",
 "name": "mail-example-role",
 "description": "mail contains example",
 "condition": "/mail co 'example'"
 }
 ],
 "resultCount": 2,
 "pagedResultsCookie": null,
 "totalPagedResultsPolicy": "NONE",
 "totalPagedResults": -1,
 "remainingPagedResults": -1
 }



The corresponding IDM bug is OPENIDM-9177