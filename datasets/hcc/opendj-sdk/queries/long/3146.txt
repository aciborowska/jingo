The native memory allocated by DirectByteBuffer (off-heap memory) is freed by the Cleaner mechanism of the JVM. This Cleaner mechanism is run really late after the DirectByteBuffer has been unreferenced (phantom-reference) leading to massive memory consumption of the process (importer is allocating gigabytes of direct memory per import).

After multiple import execution, lot of memory remains unfreed which can wake up the linux kernel OOM Killer and kill the process (http://linux-mm.org/OOM_Killer)

Possible solutions are:

	Do not use DirectByteBuffers.
	Limit the usage of direct memory through the usage of -XX:MaxDirectMemorySize directive.
	Call System.gc() to try to force a garbage collection.
	Call the DirectByteBuffer's cleaner directly

