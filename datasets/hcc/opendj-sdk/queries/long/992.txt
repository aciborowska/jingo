After upgrading from 2.4.6 to OpenDJ 2.6.0 I got the following error:


[16/Jun/2013:12:00:58 +0200] category=CONFIG severity=SEVERE_ERROR msgID=3407988 msg=An error occurred while trying to initialize a backend loaded from class org.opends.server.backends.jeb.BackendImpl with the information in configuration entry ds-cfg-backend-id=userRoot,cn=Backends,cn=config:  The database environment could not be opened: (JE 5.0.73) Environment must be closed, caused by: com.sleepycat.je.EnvironmentFailureException: Environment invalid because of previous exception: (JE 5.0.73) /home/matt/opendj/m2/opendj/db/userRoot fetchTarget of 0xf/0x550788 parent IN=342908 IN class=com.sleepycat.je.tree.IN lastFullVersion=0x11/0x4d0e35 lastLoggedVersion=0x11/0x4d0e35 parent.getDirty()=false state=0 LOG_FILE_NOT_FOUND: Log file missing, log is likely invalid. Environment is invalid and must be closed. (BackendImpl.java:1754 BackendImpl.java:319 BackendConfigManager.java:1298 BackendConfigManager.java:279 DirectoryServer.java:2210 DirectoryServer.java:1397 DirectoryServer.java:9651).  This backend will be disabled



The JE database contained 2000 entries which had been subjected to a sustained modrate, and is unusable afterward the upgrade. I had thought that this was due to OPENDJ-752 (FS write barriers) but I am now pretty certain that it is not. Note as well that sometimes the error does not occur immediately on startup, but occur later on: I managed to reproduce it a second time by running modrate on the "upgraded" database.

The reason why I don't think that this has anything to do with OPENDJ-752 is that I am able to perform multiple cycles of start, modrate, stop, start... against OpenDJ 2.4 or 2.6 without encountering any problems: the issue only occurs after transitioning from 2.4 to 2.6.

I also tried to run the JE DB pre-upgrade tool on a backend once I had hit the issue, but this failed to help. I need to check whether running the JE pre-upgrade tool prevents the problem from occurring.

In my opinion, this issue is a 2.6 blocker, although I have marked it only as critical since there is often a workaround such as reinitialization.