The on disk merge import code directly references Unsafe which could potentially lead to a runtime failure in JVMs where this class is unavailable.

A pattern for doing this sort of thing is as follows:



class PlatfomDependentClientCode {
    // Detect whether Unsafe is available.
    static final boolean SUPPORTS_UNSAFE;
    static {
        boolean isUnsafeSupported = false;
        try {
            isUnsafeSupported = Class.forName("sun.misc.Unsafe") != null;
        } catch (Throwable e) {
            // Unsupported.
        }
        SUPPORTS_UNSAFE = isUnsafeSupported;
    }

    // Factory method creates platform specific instance.
    Xxx newXxx() {
        return SUPPORTS_UNSAFE ? new XxxUsingUnsafe() : new XxxNotUsingUnsafe();
    }

    private interface Xxx {
        ...
    }

    // This class will only be loaded if we are certain that Unsafe is available.
    private static class XxxUsingUnsafe implements Xxx {
        private static final Unsafe UNSAFE = Unsafe.getUnsafe();
        private static final long BYTE_ARRAY_OFFSET = UNSAFE.arrayBaseOffset(byte[].class);

        ...
    }

    // Fall-back for when Unsafe is not available.
    private static class XxxNotUsingUnsafe implements Xxx {
        ...
    }
}

