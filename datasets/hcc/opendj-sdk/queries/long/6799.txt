Found with rev ForgeRock Directory Services 7.0.0-SNAPSHOT (build 20191118235055, revision number 18eb40e312b76c8f26aace7a509f34dee2c1c58c)

We are seeing a stack trace in server.out when trying to stop the 3rd replicated server of a 3 DSRS replication topology.
This only happens when enabling confidentiality and running on a docker vm:


WARNING:  The following threads were still active after waiting up to 60 seconds for them to stop:
Thread Name:  Multifile Text Writer for cn=File-Based Error Logger,cn=Loggers,cn=config
Stack Trace:
              java.lang.Thread.sleep(Thread.java:native method)

              org.opends.server.loggers.MultifileTextWriter$RotaterThread.run(MultifileTextWriter.java:359)

Thread Name:  Multifile Text Writer for cn=Replication Repair Logger,cn=Loggers,cn=config
Stack Trace:
              java.lang.Thread.sleep(Thread.java:native method)

              org.opends.server.loggers.MultifileTextWriter$RotaterThread.run(MultifileTextWriter.java:359)

Thread Name:  Task Scheduler Thread
Stack Trace:
              java.lang.Throwable.fillInStackTrace(Throwable.java:native method)

              java.lang.Throwable.fillInStackTrace(Throwable.java:784)

              java.lang.Throwable.<init>(Throwable.java:266)

              java.lang.Exception.<init>(Exception.java:66)

              java.lang.InterruptedException.<init>(InterruptedException.java:67)

              java.lang.Thread.sleep(Thread.java:native method)

              org.opends.server.backends.task.TaskScheduler.run(TaskScheduler.java:727)

Thread Name:  Change number indexer
Stack Trace:
              java.lang.Throwable.fillInStackTrace(Throwable.java:native method)

              java.lang.Throwable.fillInStackTrace(Throwable.java:784)

              java.lang.Throwable.<init>(Throwable.java:251)

              java.lang.Exception.<init>(Exception.java:54)

              java.lang.InterruptedException.<init>(InterruptedException.java:57)

              java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2151)

              org.opends.server.replication.server.changelog.file.ChangeNumberIndexer.lambda$new$0(ChangeNumberIndexer.java:472)

              org.opends.server.replication.server.changelog.file.ChangeNumberIndexer$$Lambda$360/19578363.accept(null:-1)

              org.opends.server.replication.server.changelog.file.ChangeNumberIndexer.waitForNextRecord(ChangeNumberIndexer.java:637)

              org.opends.server.replication.server.changelog.file.ChangeNumberIndexer.run(ChangeNumberIndexer.java:595)

Thread Name:  Changelog DB purger
Stack Trace:
              java.io.RandomAccessFile.open0(RandomAccessFile.java:native method)

              java.io.RandomAccessFile.open(RandomAccessFile.java:316)

              java.io.RandomAccessFile.<init>(RandomAccessFile.java:243)

              org.opends.server.replication.server.changelog.file.LogFile.getReader(LogFile.java:477)

              org.opends.server.replication.server.changelog.file.LogFile.access$200(LogFile.java:59)

              org.opends.server.replication.server.changelog.file.LogFile$LogFileCursor.<init>(LogFile.java:532)

              org.opends.server.replication.server.changelog.file.LogFile$LogFileCursor.<init>(LogFile.java:506)

              org.opends.server.replication.server.changelog.file.LogFile.getCursor(LogFile.java:380)

              org.opends.server.replication.server.changelog.file.LogFile.getOldestRecord(LogFile.java:391)

              org.opends.server.replication.server.changelog.file.Log.findBoundaryKeyFromRecord(Log.java:880)

              org.opends.server.replication.server.changelog.file.FileChangeNumberIndexDB.purgeUpTo(FileChangeNumberIndexDB.java:191)

              org.opends.server.replication.server.changelog.file.FileChangelogDB$ChangelogDBPurger.run(FileChangelogDB.java:726)

Thread Name:  Thread for RS session(local=dj3, remote=peer RS dj2/cn=schema)
Stack Trace:
              java.lang.Object.wait(Object.java:native method)

              java.lang.Thread.join(Thread.java:1252)

              java.lang.Thread.join(Thread.java:1326)

              org.opends.server.replication.protocol.RsSession.close(RsSession.java:175)

              org.opends.server.replication.protocol.RsSession.sendReplicationMsgs(RsSession.java:152)

              org.opends.server.replication.protocol.RsSession$$Lambda$386/762376283.run(null:-1)

              java.lang.Thread.run(Thread.java:748)

Thread Name:  RS(dj3) reading from peer RS dj2/cn=schema
Stack Trace:
              java.net.SocketInputStream.socketRead0(SocketInputStream.java:native method)

              java.net.SocketInputStream.socketRead(SocketInputStream.java:116)

              java.net.SocketInputStream.read(SocketInputStream.java:171)

              java.net.SocketInputStream.read(SocketInputStream.java:141)

              sun.security.ssl.InputRecord.readFully(InputRecord.java:465)

              sun.security.ssl.InputRecord.read(InputRecord.java:503)

              sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:975)

              sun.security.ssl.SSLSocketImpl.readDataRecord(SSLSocketImpl.java:933)

              sun.security.ssl.AppInputStream.read(AppInputStream.java:105)

              java.io.BufferedInputStream.fill(BufferedInputStream.java:246)

              java.io.BufferedInputStream.read1(BufferedInputStream.java:286)

              java.io.BufferedInputStream.read(BufferedInputStream.java:345)

              org.opends.server.replication.protocol.AbstractSession.read(AbstractSession.java:286)

              org.opends.server.replication.protocol.AbstractSession.receive(AbstractSession.java:257)

              org.opends.server.replication.server.PeerServerReader.run(PeerServerReader.java:86)



This happens in with this config:

[Default]
java_home = /usr/java/jdk1.8
...

[OpenDJ]
...
database_encrypted = True
indexes_encrypted =True
changelog_encrypted = True




Running the tests like this:

docker pull docker-internal.forgerock.io/forgerock/pyforge-ready:latest

I am mapping my local pyforge directory to /root/wks/pyforge on docker container:
docker run -it -v /var/run/docker.sock:/var/run/docker.sock -v ~/.ssh:/root/.ssh -v ~/wks/pyforge:/root/wks/pyforge docker-internal.forgerock.io/forgerock/pyforge-ready /bin/bash

[root@ec64d8977454 usr]# cd /root/wks/pyforge/
[root@ec64d8977454 usr]# ./configure.py
root@ec64d8977454 pyforge]# ./run-pybot.py -vs replication_group1.Encryption opendj

