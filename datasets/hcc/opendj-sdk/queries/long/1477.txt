During testing it was noticed that the DN matching rule normalizes DNs using the following code:


try {
    DN dn = DN.valueOf(value.toString(), schema.asNonStrictSchema());
    return ByteString.valueOf(dn.toNormalizedString());
} catch (final LocalizedIllegalArgumentException e) {
    throw DecodeException.error(e.getMessageObject());
}



The call to schema.asNonStrictSchema() causes a new Schema object to be allocated every time. However, DN.valueOf() method caches parent DNs in a per schema cache. In other words, frequent calls to schema.asXXXSchema() prevent the cache from working properly and cause excessive amounts of GC young-old copying.

The fix is to ensure that schema.asXXXSchema() always return the same schema instances, rather than allocating new ones each time. Testing has shown that this reduces per young-GC copying from 12MB to 120KB for a 1G heap, and improves performance significantly.