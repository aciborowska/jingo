JvmKeyManagerProvider configuration object is a key manager provider which can be used to secure administration connector or any other configuration handlers which use SSL or StartTLS.
Unfortunately, when we created it we were wrongly relying on the following javadoc:
SSLContext.java

    /**
     * Initializes this context. Either of the first two parameters
     * may be null in which case the installed security providers will
     * be searched for the highest priority implementation of the
     * appropriate factory. Likewise, the secure random parameter may
     * be null in which case the default implementation will be used.
     * <P>
     * Only the first instance of a particular key and/or trust manager
     * implementation type in the array is used.  (For example, only
     * the first javax.net.ssl.X509KeyManager in the array will be used.)
     *
     * @param km the sources of authentication keys or null
     * @param tm the sources of peer authentication trust decisions or null
     * @param random the source of randomness for this generator or null
     * @throws KeyManagementException if this operation fails
     */
    public final void init(KeyManager[] km, TrustManager[] tm, SecureRandom random)



The JSSE Reference Guide  specifies that:



 A newly created SSLContext should be initialized by calling the init method:
    public void init(KeyManager[] km, TrustManager[] tm, SecureRandom random);
 If the KeyManager[] parameter is null, then an empty KeyManager will be defined for this context.



Looking at the source code of the SSLContextImpl#engineInit(KeyManager[] km, TrustManager[] tm, SecureRandom sr) method confirms that the JSSE specification is correct.

We should fix our JVM Key Manager Provider configuration object implementation to read system properties used for customizing the JSSE  as this was done for client side in OPENDJ-2923