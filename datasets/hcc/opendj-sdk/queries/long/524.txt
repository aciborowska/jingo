While testing fix for OPENDJ-520:


 ./bin/searchrate -h localhost -p 1389 -w password -D cn=directory\ manager -b "cn=20k group,ou=groups,dc=example,dc=com" -c 8 -t 3  -F "(objectclass=*)"
-------------------------------------------------------------------------------
     Throughput                            Response Time                       
   (ops/second)                           (milliseconds)                       
recent  average  recent  average  99.9%  99.99%  99.999%  err/sec  Entries/Srch
-------------------------------------------------------------------------------
Error occurred on one or more connections: Result(resultCode=Decoding Error,
matchedDN=, diagnosticMessage=Cannot decode the ASN.1 element because an
unexpected end of file was reached while reading the first length byte,
referrals=[], controls=[])
  41.6     41.7  373.483  373.483  3285.476  3285.476  3285.476     40.2           1.0



Stack trace:


 [15/Jun/2012:17:19:12 +0200] 0 caught error thread={Worker Thread 4(59)} threadDetail={parentThread=main(1) isDaemon=false clientConnection=LDAP client connection from 127.0.0.1:39843 to 127.0.0.1:1389 operation=SearchOperation(connID=20, opID=2, baseDN=cn=20k group,ou=groups,dc=example,dc=com, scope=wholeSubtree, filter=(objectClass=*)) } method={sendLDAPMessage(LDAPClientConnection.java:958)} caught={java.util.ConcurrentModificationException}
Stack Trace:
  at java.util.HashMap$HashIterator.remove(HashMap.java:824)
  at org.opends.server.protocols.ldap.LDAPClientConnection$TimeoutWriteByteChannel.write(LDAPClientConnection.java:251)
  at org.opends.server.extensions.RedirectingByteChannel.write(RedirectingByteChannel.java:163)
  at org.opends.server.extensions.RedirectingByteChannel.write(RedirectingByteChannel.java:163)
  at org.opends.server.types.ByteStringBuilder.copyTo(ByteStringBuilder.java:990)
  at org.opends.server.protocols.ldap.LDAPClientConnection.sendLDAPMessage(LDAPClientConnection.java:939)
  at org.opends.server.protocols.ldap.LDAPClientConnection.sendSearchEntry(LDAPClientConnection.java:849)
  at org.opends.server.core.SearchOperationBasis.sendSearchEntry(SearchOperationBasis.java:1306)
  at org.opends.server.core.SearchOperationBasis.returnEntry(SearchOperationBasis.java:836)
  at org.opends.server.core.SearchOperationBasis.returnEntry(SearchOperationBasis.java:588)
  at org.opends.server.core.SearchOperationWrapper.returnEntry(SearchOperationWrapper.java:66)
  at org.opends.server.backends.jeb.EntryContainer.searchIndexed(EntryContainer.java:1683)
  at org.opends.server.backends.jeb.EntryContainer.search(EntryContainer.java:1169)
  at org.opends.server.backends.jeb.BackendImpl.search(BackendImpl.java:973)
  at org.opends.server.workflowelement.localbackend.LocalBackendSearchOperation.processLocalSearch(LocalBackendSearchOperation.java:266)
  at org.opends.server.workflowelement.localbackend.LocalBackendWorkflowElement.execute(LocalBackendWorkflowElement.java:591)
  at org.opends.server.core.WorkflowImpl.execute(WorkflowImpl.java:197)
  at org.opends.server.core.WorkflowTopologyNode.execute(WorkflowTopologyNode.java:100)
  at org.opends.server.core.SearchOperationBasis.run(SearchOperationBasis.java:1400)
  at org.opends.server.extensions.TraditionalWorkerThread.run(TraditionalWorkerThread.java:163)



Fix is simple: use a write lock to prevent multiple threads from racing post initial timeout.