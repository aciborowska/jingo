Let's take a very simple example, you have user.0 and user.1 in the directory. In the Java code you have something like this:

    ConnectionFactory cf = new LDAPConnectionFactory("localhost", 1389, new LDAPOptions());
    ConnectionPool cp = Connections.newFixedConnectionPool(cf, 1);
    Connection conn = cp.getConnection();
    BindRequest br = Requests.newSimpleBindRequest("uid=user.0,ou=people,dc=example,dc=com", "changeit".toCharArray());
    BindResult result = conn.bind(br);
    System.out.println(result.isSuccess());
    conn.close();
    Scanner sc = new Scanner(System.in);
    sc.nextLine();
    conn = cp.getConnection();
    br = Requests.newSimpleBindRequest("uid=user.1,ou=people,dc=example,dc=com", "changeit".toCharArray());
    result = conn.bind(br);
    System.out.println(result.isSuccess());


When executing this snippet, when the console waits for an Enter, execute the following command:

$ bin/ldapdelete -h localhost -p 1389 -D "cn=Directory Manager" -w secret12 uid=user.0,ou=people,dc=example,dc=com


Then press the Enter, and voil√†:

Exception in thread "main" org.forgerock.opendj.ldap.ConnectionException: Server Connection Closed: Connection closed by server
	at org.forgerock.opendj.ldap.ErrorResultException.newErrorResult(ErrorResultException.java:200)
	at com.forgerock.opendj.ldap.AbstractLDAPFutureResultImpl.setResultOrError(AbstractLDAPFutureResultImpl.java:160)
	at com.forgerock.opendj.ldap.AbstractLDAPFutureResultImpl.adaptErrorResult(AbstractLDAPFutureResultImpl.java:139)
	at com.forgerock.opendj.ldap.LDAPConnection.bindAsync(LDAPConnection.java:286)
	at org.forgerock.opendj.ldap.AbstractAsynchronousConnection.bind(AbstractAsynchronousConnection.java:86)
	at org.forgerock.opendj.ldap.FixedConnectionPool$PooledConnection.bind(FixedConnectionPool.java:214)


The ConnectionPool implementation should always make sure that the given connection is not closed).