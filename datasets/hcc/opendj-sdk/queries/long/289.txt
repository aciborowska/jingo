When the client detects a disconnect notification it should not fail/cancel any pending requests using the result code contained in the notification since it may confuse the client. Here are three examples:

1) A long lived connection is closed by the server after its idle timeout is reached. The server sends the client a disconnect notification with a timeLimitExceeded result code. At the same time the client issues a search request with a time limit.

2) A client opens a connection and performs a search. The server closes the connection by sending a disconnect notification containing an adminLimitExceeded result code because there are too many open connections.

3) An application uses a connection for authenticating users (i.e. only bind requests). It authenticates user A and then authenticates user B. Before it authenticates user B, user A's entry is deleted on the server. The server then disconnects any connections belonging to user A since their authentication state is no longer valid. The result code contained in the disconnect is invalidCredentials.

In each case it is misleading to re-use the disconnect result code in order to cancel any pending requests. For example, the client in (3) will misinterpret the invalidCredentials as meaning that user B provided the wrong username/password.

Solution: pending requests should be cancelled with a result code which clearly indicates that the server has disconnected. The most appropriate error code is probably CLIENT_SIDE_SERVER_DOWN (81) which is already used when EOF is detected. The client application can still detect the disconnect notification via the ConnectionEventListener interface.
