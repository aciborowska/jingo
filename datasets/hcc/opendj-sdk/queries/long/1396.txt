HeartBeatConnectionFactory.java
    private static final int DEFAULT_TIMEOUT_IN_SECONDS = 3;
[...]
    public static ConnectionFactory newHeartBeatConnectionFactory(final ConnectionFactory factory,
            final long interval, final TimeUnit unit) {
        return new HeartBeatConnectionFactory(factory, interval, DEFAULT_TIMEOUT_IN_SECONDS, unit, null, null);
    }
[...]
    HeartBeatConnectionFactory(final ConnectionFactory factory, final long interval,
            final long timeout, final TimeUnit unit, final SearchRequest heartBeat,
            final ScheduledExecutorService scheduler) {
        Validator.ensureNotNull(factory, unit);
        Validator.ensureTrue(interval >= 0, "negative interval");
        Validator.ensureTrue(timeout >= 0, "negative timeout");

        this.heartBeatRequest = heartBeat != null ? heartBeat : DEFAULT_SEARCH;
        this.interval = interval;
        this.intervalUnit = unit;
        this.factory = factory;
        this.scheduler = DEFAULT_SCHEDULER.acquireIfNull(scheduler);
        this.timeoutMS = unit.toMillis(timeout);
        this.minDelayMS = unit.toMillis(interval) / 2;
    }



The constructor always uses the caller's unit. If the caller passes in a unit value of anything except TimeUnit.SECONDS, the HeartBeatConnectionFactory will be created with the wrong timeout.

The factory method needs to convert the default value before passing it to the constructor, e.g.


unit.convert(DEFAULT_TIMEOUT_IN_SECONDS, TimeUnit.SECONDS)

