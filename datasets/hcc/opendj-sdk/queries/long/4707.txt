The ds-sync-hist attribute is encoded and decoded as a UTF-8 string. This means that attribute values whose bytes are not valid UTF-8 will become corrupted during encoding because the UTF-8 decoder will replace unrecognized octet sequences with the Unicode replacement sequence "FFFD".

Methods of interest are:


	org.opends.server.replication.plugin.EntryHistorical#encode(..., ByteString value)
	org.opends.server.replication.plugin.HistoricalAttributeValue#HistoricalAttributeValue(String s)
	org.opends.server.replication.plugin.HistoricalAttributeValue#toString()



I don't think the toString() method is used in production code.

Suggested fix:

Change these methods to always encode/decode using ByteStrings. The same representation can be used, except that the final attribute value element is appended as raw bytes. For example, the EntryHistorical encode() method could be changed from:



    private String encode(HistAttrModificationKey modKey, AttributeDescription attrDesc, CSN changeTime,
            ByteString value) {
        return attrDesc + ":" + changeTime + ":" + modKey + ":" + value;
    }



To something like this:



    private ByteString encode(HistAttrModificationKey modKey, AttributeDescription attrDesc, CSN changeTime,
                          ByteString value) {
        return new ByteStringBuilder()
                .appendUtf8(attrDesc.toString())
                .appendUtf8(":")
                .appendUtf8(changeTime.toString())
                .appendUtf8(":")
                .appendUtf8(modKey.toString())
                .appendUtf8(":")
                .appendBytes(value)
                .toByteString();
    }



The fix must include unit tests which exercise the full encode/decode cycle.