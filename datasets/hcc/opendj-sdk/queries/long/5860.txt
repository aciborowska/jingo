Currently, when reading the changelog with a "greater than key" positioning strategy, there is no check of the existence of the provided start key in the changelog.

1) This can be a problem when the key is supposed to be in the changelog, because it will fail to detect a problem. 
For example, server handlers are reading replica changelogs based on a server state, and the CSN(s) provided by the server state must correspond to record(s) in the changelog. If a record is not present, then it means some changes are missed, and it should be signaled by an error message. 

2) On the contrary, when the key is used only as a common starting point for multiple logs, the existence of the start key should not be enforced because it would lead systematically to an error.
For example, when positioning to a record greater than the MCP for all replicas in the ChangeNumberIndexer (c.f. GloballyOrderedChangesCursor), it is expected that the start key is not present in all but one of the replicas.  

As a consequence, we need to split the GREATER_THAN_KEY positioning strategy in two:

	GREATER_THAN_KEY can be kept as is with its current behavior (no enforcement of the presence of the start key in the log)
	GREATER_THAN_KEY_ENFORCE_KEY_PRESENCE must be used for the server handlers and should behave like GREATER_THAN_KEY with an additional constraint: check that the start key is present in log, otherwise fail


