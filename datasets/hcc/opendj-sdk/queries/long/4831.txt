A PR build failed with the following error while building the opendj-grizzly module:



Tests run: 1070, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 11.007 sec <<< FAILURE! - in TestSuite
15:03:23 testSynchronousConnection(org.forgerock.opendj.grizzly.LdapClientTestCase)  Time elapsed: 0.011 sec  <<< FAILURE!
15:03:23 java.lang.RuntimeException: Protocol Error: Unknown response-type 99
15:03:23 	at io.reactivex.internal.util.ExceptionHelper.wrapOrThrow(ExceptionHelper.java:45)
15:03:23 	at io.reactivex.internal.subscribers.BlockingBaseSubscriber.blockingGet(BlockingBaseSubscriber.java:78)
15:03:23 	at io.reactivex.Flowable.blockingFirst(Flowable.java:5427)
15:03:23 	at org.forgerock.opendj.grizzly.LdapClientTestCase.testSynchronousConnection(LdapClientTestCase.java:235)
15:03:23 Caused by: org.forgerock.opendj.ldap.LdapException: Protocol Error: Unknown response-type 99
15:03:23 	at org.forgerock.opendj.ldap.LdapException.newLdapException(LdapException.java:231)
15:03:23 	at org.forgerock.opendj.ldap.LdapException.newLdapException(LdapException.java:144)
15:03:23 	at org.forgerock.opendj.ldap.LdapException.newLdapException(LdapException.java:113)
15:03:23 	at org.forgerock.opendj.ldap.LdapException.newLdapException(LdapException.java:90)
15:03:23 	at org.forgerock.opendj.ldap.LdapException.newLdapException(LdapException.java:165)
15:03:23 	at org.forgerock.opendj.ldap.LdapClientImpl$LdapClientSocketImpl.handleConnectionError(LdapClientImpl.java:363)
15:03:23 	at io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.onError(FlowableOnErrorNext.java:95)
15:03:23 	at io.reactivex.internal.subscribers.BasicFuseableSubscriber.onError(BasicFuseableSubscriber.java:101)
15:03:23 	at io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber.onError(FlowableDoOnEach.java:266)
15:03:23 	at org.forgerock.opendj.grizzly.GrizzlyLdapSocketFilter$GrizzlyReader.executePendingOperations(GrizzlyLdapSocketFilter.java:256)
15:03:23 	at org.forgerock.opendj.grizzly.GrizzlyLdapSocketFilter$GrizzlyReader.access$200(GrizzlyLdapSocketFilter.java:182)
15:03:23 	at org.forgerock.opendj.grizzly.GrizzlyLdapSocketFilter.handleClose(GrizzlyLdapSocketFilter.java:120)
15:03:23 	at org.glassfish.grizzly.filterchain.ExecutorResolver$4.execute(ExecutorResolver.java:76)
15:03:23 	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:284)
15:03:23 	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:201)
15:03:23 	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:133)
15:03:23 	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:112)
15:03:23 	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
15:03:23 	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:539)
15:03:23 	at org.glassfish.grizzly.nio.NIOConnection.preClose(NIOConnection.java:879)
15:03:23 	at org.glassfish.grizzly.nio.transport.TCPNIOConnection.preClose(TCPNIOConnection.java:97)
15:03:23 	at org.glassfish.grizzly.nio.NIOConnection.terminate0(NIOConnection.java:603)
15:03:23 	at org.glassfish.grizzly.nio.transport.TCPNIOConnection.terminate0(TCPNIOConnection.java:291)
15:03:23 	at org.glassfish.grizzly.nio.NIOConnection$4.completed(NIOConnection.java:567)
15:03:23 	at org.glassfish.grizzly.nio.NIOConnection$4.completed(NIOConnection.java:563)
15:03:23 	at org.glassfish.grizzly.asyncqueue.AsyncWriteQueueRecord.notifyCompleteAndRecycle(AsyncWriteQueueRecord.java:173)
15:03:23 	at org.glassfish.grizzly.nio.AbstractNIOAsyncQueueWriter.write(AbstractNIOAsyncQueueWriter.java:279)
15:03:23 	at org.glassfish.grizzly.nio.AbstractNIOAsyncQueueWriter.write(AbstractNIOAsyncQueueWriter.java:169)
15:03:23 	at org.glassfish.grizzly.nio.AbstractNIOAsyncQueueWriter.write(AbstractNIOAsyncQueueWriter.java:71)
15:03:23 	at org.glassfish.grizzly.AbstractWriter.write(AbstractWriter.java:76)
15:03:23 	at org.glassfish.grizzly.nio.NIOConnection.closeGracefully0(NIOConnection.java:562)
15:03:23 	at org.glassfish.grizzly.nio.NIOConnection.closeWithReason(NIOConnection.java:513)
15:03:23 	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:160)
15:03:23 	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:112)
15:03:23 	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
15:03:23 	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:539)
15:03:23 	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
15:03:23 	at org.glassfish.grizzly.strategies.SameThreadIOStrategy.executeIoEvent(SameThreadIOStrategy.java:103)
15:03:23 	at org.glassfish.grizzly.strategies.AbstractIOStrategy.executeIoEvent(AbstractIOStrategy.java:89)
15:03:23 	at org.glassfish.grizzly.nio.SelectorRunner.iterateKeyEvents(SelectorRunner.java:415)
15:03:23 	at org.glassfish.grizzly.nio.SelectorRunner.iterateKeys(SelectorRunner.java:384)
15:03:23 	at org.glassfish.grizzly.nio.SelectorRunner.doSelect(SelectorRunner.java:348)
15:03:23 	at org.glassfish.grizzly.nio.SelectorRunner.run(SelectorRunner.java:279)
15:03:23 	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:593)
15:03:23 	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:573)
15:03:23 	at java.lang.Thread.run(Thread.java:748)
15:03:23 Caused by: org.forgerock.opendj.ldap.DecodeException: Unknown response-type 99
15:03:23 	at org.forgerock.opendj.ldap.DecodeException.error(DecodeException.java:40)
15:03:23 	at org.forgerock.opendj.io.LdapReader.readResponseProtocolOp(LdapReader.java:225)
15:03:23 	at org.forgerock.opendj.io.LdapReader.readLdapResponseMessage(LdapReader.java:197)
15:03:23 	at org.forgerock.opendj.grizzly.Codecs$ClientCodec.decode(Codecs.java:189)
15:03:23 	at org.forgerock.opendj.grizzly.Codecs$AbstractCodec.handleRead(Codecs.java:327)
15:03:23 	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
15:03:24 	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:284)
15:03:24 	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:201)
15:03:24 	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:133)
15:03:24 	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:112)
15:03:24 	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
15:03:24 	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:539)
15:03:24 	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
15:03:24 	at org.glassfish.grizzly.strategies.SameThreadIOStrategy.executeIoEvent(SameThreadIOStrategy.java:103)
15:03:24 	at org.glassfish.grizzly.strategies.AbstractIOStrategy.executeIoEvent(AbstractIOStrategy.java:89)
15:03:24 	at org.glassfish.grizzly.nio.SelectorRunner.iterateKeyEvents(SelectorRunner.java:415)
15:03:24 	at org.glassfish.grizzly.nio.SelectorRunner.iterateKeys(SelectorRunner.java:384)
15:03:24 	at org.glassfish.grizzly.nio.SelectorRunner.doSelect(SelectorRunner.java:348)
15:03:24 	at org.glassfish.grizzly.nio.SelectorRunner.run(SelectorRunner.java:279)
15:03:24 	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:593)
15:03:24 	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:573)
15:03:24 	at java.lang.Thread.run(Thread.java:748)



The message type 99 represents an LDAP search request. Here are some possibilities:


	the server sent a response message with the wrong message type
	bug in server IO buffer management causing an input buffer containing a request to be accidentally reused for sending responses
	as above but on the client side.



I have not been able to reproduce the problem since. I'm going to mark this issue as critical because rare random IO bugs could impact all users and will be very hard to investigate.