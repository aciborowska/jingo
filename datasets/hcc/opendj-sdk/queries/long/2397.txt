The time based matching rules are encoding values as longs whose value represents the time since the epoch (1970). This means that dates before 1970 will yield a negative value which will encode as a byte array which sorts after dates later than the epoch.

I think we should revert the behavior back to the 2.6 algorithm which was to simply normalize the generalized time string (effectively remove the time zone part). We can go better though: a normalized time string can usually be encoded as 7 bytes, or 9 if there is a fractional ms part.

A simple way to normalized a time stamp is as follows:



GeneralizedTime time = GeneralizedTime.valueOf(input);
GeneralizedTime normalized = GeneralizedTime.valueOf(time.getTimeInMillis());
return normalized.toString();

