We need someway to cleanly release any resources owned by a ConnectionFactory. For example, a connection pool will have a  bunch of connections open which the application must be able to close down somehow. Currently there is now way to do this.

The big question is should the close/shutdown method be a core part of the ConnectionFactory API? In other words, should all ConnectionFactory implementations expose a close/shutdown method (although close is probably not a great name, it allows applications to benefit from Automatic Resource Management in JDK7)?

There are two issues here:

1) Decorators: many ConnectionFactory implementations are implemented as decorators (e.g. load balancer, connection pool, heart beat, authenticated). Who has the responsibility of closing down a connection factory? If I have a chain of connection factories, A->B->C, where A decorates B and B decorates C, should closing A also close B, and B close C?

If the close method is not part of the common API then A will have no way of knowing that it should close B when it itself is closed.

However, if it is the responsibility of the application which constructs the A->B->C chain to also destroy the chain then there is no problem since the application knows which factories make up the chain and which ones need to be closed.

2) Users of ConnectionFactories: having a common close/shutdown method means that users of ConnectionFactories will have the ability to close down the ConnectionFactory it is using. This is almost definitely bad. Typically, the user of a factory like this does not "own" the factory and should therefore not be able to control the life-cycle of the factory (similarly it should not be able to configure the factory).

This is more obvious when you think in terms of a J2EE environment where the "owner" of the factory will be the J2EE container (e.g. app server), and the "user" will be a servlet.

To summarize, I think that we must have a way to release the connections associated with a connection pool, but this should not be part of the generic user facing ConnectionFactory API.