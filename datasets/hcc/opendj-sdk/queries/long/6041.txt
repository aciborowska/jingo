ChangelogBackendTestCase.searchInChangeNumberModeAskingForChangelogCookieAttributeValue() fails in continuous integration with the following stacktrace:


Other: An unexpected error was encountered while processing a search in one of the Directory Server backends: NullPointerException(ChangelogBackend.java:944)
	at org.forgerock.opendj.ldap.LdapException.newLdapException(LdapException.java:253)
	at org.opends.server.protocols.ReactiveHandlersUtils.emitResult(ReactiveHandlersUtils.java:390)
	at org.opends.server.api.ClientConnection.sendResponse(ClientConnection.java:301)
	at org.opends.server.core.SearchOperation.sendSearchResultDone(SearchOperation.java:634)
	at org.opends.server.core.SearchOperation.run(SearchOperation.java:777)
	at org.opends.server.protocols.internal.AbstractInternalClientConnection.handleRequest(AbstractInternalClientConnection.java:365)
	at org.opends.server.protocols.internal.AbstractInternalClientConnection.lambda$handle$0(AbstractInternalClientConnection.java:348)
	at io.reactivex.internal.operators.flowable.FlowableCreate.subscribeActual(FlowableCreate.java:72)
	at io.reactivex.Flowable.subscribe(Flowable.java:13234)
	at io.reactivex.Flowable.subscribe(Flowable.java:13180)
	at io.reactivex.internal.operators.flowable.FlowableLift.subscribeActual(FlowableLift.java:49)
	at io.reactivex.Flowable.subscribe(Flowable.java:13234)
	at io.reactivex.internal.operators.flowable.FlowableDoOnEach.subscribeActual(FlowableDoOnEach.java:50)
	at io.reactivex.Flowable.subscribe(Flowable.java:13234)
	at io.reactivex.internal.operators.flowable.FlowableDoFinally.subscribeActual(FlowableDoFinally.java:47)
	at io.reactivex.Flowable.subscribe(Flowable.java:13234)
	at io.reactivex.internal.operators.flowable.FlowableMap.subscribeActual(FlowableMap.java:38)
	at io.reactivex.Flowable.subscribe(Flowable.java:13234)
	at io.reactivex.internal.operators.flowable.FlowableDoOnEach.subscribeActual(FlowableDoOnEach.java:50)
	at io.reactivex.Flowable.subscribe(Flowable.java:13234)
	at io.reactivex.internal.operators.flowable.FlowableOnErrorNext.subscribeActual(FlowableOnErrorNext.java:39)
	at io.reactivex.Flowable.subscribe(Flowable.java:13234)
	at io.reactivex.internal.operators.flowable.FlowablePublish.connect(FlowablePublish.java:130)
	at io.reactivex.flowables.ConnectableFlowable.connect(ConnectableFlowable.java:64)
	at org.opends.server.protocols.internal.AbstractInternalClientConnection$InternalConnection.search(AbstractInternalClientConnection.java:146)
	at org.forgerock.opendj.ldap.AbstractConnection.search(AbstractConnection.java:341)
	at org.forgerock.opendj.ldap.AbstractConnection.search(AbstractConnection.java:317)
	at org.opends.server.backends.ChangelogBackendTestCase.lambda$search$7(ChangelogBackendTestCase.java:1126)
	at org.opends.server.util.TestTimer$SteppingTimer.repeatUntilSuccess(TestTimer.java:278)
	at org.opends.server.util.TestTimer$SteppingTimer.repeatUntilSuccess(TestTimer.java:269)
	at org.opends.server.backends.ChangelogBackendTestCase.search(ChangelogBackendTestCase.java:1124)
	at org.opends.server.backends.ChangelogBackendTestCase.assertChangeNumberSearchReturnEntryWithExpectedCookie(ChangelogBackendTestCase.java:696)
	at org.opends.server.backends.ChangelogBackendTestCase.searchInChangeNumberModeAskingForChangelogCookieAttributeValue(ChangelogBackendTestCase.java:664)

 

I added traces to this test, which showed the problem. Here is one of these traces for a search on cn=changelog:

10:01:15 Search with filter=(changeNumber>=1)
10:01:15 Next cnIndexRecord: changeNumber=1, CSN=010401693dd9b5f3000000011201 (sid=1201,tsd=Sat Mar 02 10:01:11 UTC 2019,ts=1551520871923,seqnum=1)
10:01:15 Initializing from cnIndexRecord: changeNumber=1, CSN=010401693dd9b5f3000000011201 (sid=1201,tsd=Sat Mar 02 10:01:11 UTC 2019,ts=1551520871923,seqnum=1)
10:01:15 Next replica update message: CSN=010401693dd9b5f3000000011201 (sid=1201,tsd=Sat Mar 02 10:01:11 UTC 2019,ts=1551520871923,seqnum=1)
10:01:15 Next replica update message: CSN=010401693dd9b5f3000000021201 (sid=1201,tsd=Sat Mar 02 10:01:11 UTC 2019,ts=1551520871923,seqnum=2)
10:01:15 Next cnIndexRecord: changeNumber=2, CSN=010401693dd9b5f3000000021201 (sid=1201,tsd=Sat Mar 02 10:01:11 UTC 2019,ts=1551520871923,seqnum=2)
10:01:15 Next replica update message: CSN=010401693dd9b5f3000000031202 (sid=1202,tsd=Sat Mar 02 10:01:11 UTC 2019,ts=1551520871923,seqnum=3)
10:01:15 Next cnIndexRecord: changeNumber=3, CSN=010401693dd9b5f3000000051201 (sid=1201,tsd=Sat Mar 02 10:01:11 UTC 2019,ts=1551520871923,seqnum=5)
10:01:15 Next replica update message: CSN=010401693dd9b5f3000000041202 (sid=1202,tsd=Sat Mar 02 10:01:11 UTC 2019,ts=1551520871923,seqnum=4)
10:01:15 Next replica update message: CSN=010401693dd9b5f3000000051201 (sid=1201,tsd=Sat Mar 02 10:01:11 UTC 2019,ts=1551520871923,seqnum=5)
10:01:15 Next replica update message: CSN=010401693dd9b5f3000000061202 (sid=1202,tsd=Sat Mar 02 10:01:11 UTC 2019,ts=1551520871923,seqnum=6)
10:01:15 Next cnIndexRecord: changeNumber=4, CSN=010401693dd9b5f3000000031202 (sid=1202,tsd=Sat Mar 02 10:01:11 UTC 2019,ts=1551520871923,seqnum=3)
10:01:15 No more replica update messages
10:01:15 Next cnIndexRecord: changeNumber=5, CSN=010401693dd9b5f3000000041202 (sid=1202,tsd=Sat Mar 02 10:01:11 UTC 2019,ts=1551520871923,seqnum=4)


However the updates were inserted in this order (note that only the seqnum changes):

CSN=010401693dd9b5f3000000011201 (sid=1201,tsd=Sat Mar 02 10:01:11 UTC 2019,ts=1551520871923,seqnum=1)
CSN=010401693dd9b5f3000000021201 (sid=1201,tsd=Sat Mar 02 10:01:11 UTC 2019,ts=1551520871923,seqnum=2)
CSN=010401693dd9b5f3000000031202 (sid=1202,tsd=Sat Mar 02 10:01:11 UTC 2019,ts=1551520871923,seqnum=3)
CSN=010401693dd9b5f3000000041202 (sid=1202,tsd=Sat Mar 02 10:01:11 UTC 2019,ts=1551520871923,seqnum=4)
CSN=010401693dd9b5f3000000051201 (sid=1201,tsd=Sat Mar 02 10:01:11 UTC 2019,ts=1551520871923,seqnum=5)
CSN=010401693dd9b5f3000000061202 (sid=1202,tsd=Sat Mar 02 10:01:11 UTC 2019,ts=1551520871923,seqnum=6)


This shows that the indexer has indexed the CSN with seqnum=5 as changeNumber=3 while it should have been the CSN with seqnum=3.