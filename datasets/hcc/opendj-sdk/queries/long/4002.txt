It is possible to configure the ReferentialIntegrity plugin with an attribute filter containing a NameAndOptionalUID on the left-hand side, e.g.


uniqueMember:(objectclass=myPerson)



(uniqueMember is only used here for convenience, you'd likely be using custom schema.)

However, when the code processes an attribute value containing the optional UID, nothing quite works correctly. e.g.


uid=user.0,ou=people,dc=example,dc=com#'10'B



This is parsed by Dn.valueOf(), and then passed down into DirectoryServer.getEntry(), which fails to locate a backend for the entry.

The failure to locate a backend is because the DN is iterated over parent-by-parent to find a matching backend, and the code ends up checking:


	uid=user.0,ou=people,dc=example,dc=com#'10'B
	ou=people,dc=example,dc=com#'10'B
	dc=example,dc=com#'10'B
	dc=com#'10'B



If I'm reading RFC 4517 correctly, this is wrong. The optional UID is associated with the whole DN, (i.e. the entry?). We seem to be treating it as part of the final RDN.


3.3.21.  Name and Optional UID

   A value of the Name and Optional UID syntax is the distinguished name
   [RFC4512] of an entity optionally accompanied by a unique identifier
   that serves to differentiate the entity from others with an identical
   distinguished name.