While migrating the server SearchFilter class to the SDK Filter class (OPENDJ-4388), I noticed that there are a number of places where the core server processing protects against potential stackoverflows due to heavily nested search filters. For example, both the IsMemberOfVirtualAttributeProvider and EntryDNVirtualAttributeProvider enforce a maximum filter depth of 100.

Unfortunately, this checking is almost certainly too late. In particular, the act of decoding an LDAP search filter is itself recursive, so any problems are likely to be encountered immediately when the search request (or assertion control, etc) are received.

It would be better if filter depth was checked once only upon receipt of the search request. This will also have the benefit of simplying downstream processing which will no longer have to be so defensive.

Suggested fix:


	add an additional parameter "maxDepth" parameter to org.forgerock.opendj.io.Ldap#readFilter() and enforce it during decoding
	add an additional readFilter() method with a sensible default (100) and use this in existing client code (I don't think it needs to be customizable)
	(nice to have) enforce the maximum depth in Filter.valueOf(). Note that this method is rarely (never?) accessed directly by end-users
	if not already supported, add similar support to Rest2Ldap's CREST QueryFilter processing.

