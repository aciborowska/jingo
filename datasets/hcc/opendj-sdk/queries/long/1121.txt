An example code I've been using:

public static void main(String[] args) throws Exception {
        ConnectionFactory cf = new LDAPConnectionFactory("localhost", 50389);
        cf = Connections.newAuthenticatedConnectionFactory(cf, Requests.newSimpleBindRequest("cn=Directory Manager", "amadmin1".toCharArray()));
        cf = Connections.newFixedConnectionPool(cf, 10);
        cf = Connections.newHeartBeatConnectionFactory(cf);
        ConnectionFactory lb = Connections.newLoadBalancer(new FailoverLoadBalancingAlgorithm(Arrays.asList(cf)));
        Connection conn = null;
        try {
            conn = lb.getConnection();
            SearchResultEntry entry = conn.readEntry("dc=openam,dc=forgerock,dc=org");
            System.out.println(entry.getAllAttributes());
            lb.close();
        } finally {
            if (conn != null) {
                conn.close();
            }
        }
    }



And an example stacktrace would be:

	at com.forgerock.opendj.util.ReferenceCountedObject$Reference.get(ReferenceCountedObject.java:61)
	at com.forgerock.opendj.ldap.LDAPConnectionFactoryImpl.getTimeoutChecker(LDAPConnectionFactoryImpl.java:270)
	at com.forgerock.opendj.ldap.LDAPConnection.close(LDAPConnection.java:643)
	at com.forgerock.opendj.ldap.LDAPConnection.close(LDAPConnection.java:299)
	at org.forgerock.opendj.ldap.AbstractConnection.close(AbstractConnection.java:343)
	at org.forgerock.opendj.ldap.AbstractConnectionWrapper.close(AbstractConnectionWrapper.java:202)
	at org.forgerock.opendj.ldap.FixedConnectionPool.closeConnection(FixedConnectionPool.java:705)
	at org.forgerock.opendj.ldap.FixedConnectionPool.publishConnection(FixedConnectionPool.java:744)
	at org.forgerock.opendj.ldap.FixedConnectionPool.access$400(FixedConnectionPool.java:71)
	at org.forgerock.opendj.ldap.FixedConnectionPool$PooledConnection.close(FixedConnectionPool.java:245)
	at org.forgerock.opendj.ldap.AbstractConnectionWrapper.close(AbstractConnectionWrapper.java:202)


Seems to be reproducible with 2.6.0/2.6.1-SNAPSHOT/2.7.0-SNAPSHOT. 