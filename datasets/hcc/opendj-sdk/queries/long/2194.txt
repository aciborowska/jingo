We consider range searches all evaluations of filters like
&(attr>=g)(attr<=m)
whose results are entries having attribute values in the interval [g, m].
On the other hand, RFC 4511 specifies the behaviour for an AND filter as:

A filter of the "and" choice is TRUE if all the filters in the SET OF
   evaluate to TRUE, FALSE if at least one filter is FALSE, and
   Undefined otherwise.
Meaning that &(attr>=g)(attr<=m) should evaluate to true for an entry if both conditions evaluate to true.
If attr is single valued, the only values for which both conditions are true are those values between the two AVAs; if it is multiple valued, there may be entries whose values would have the filter evaluate to true for both conditions but with different attribute values.
For example, if filter is &(cn>=greg)(cn<=maureen) and entry uid=user.1,ou=People,dc=example,dc=com contains 


cn: alex
cn: zoe


evaluating cn>=greg would yield true because of value zoe and evaluating cn<=maureen would yield true because of value alex, having &(cn>=greg)(cn<=maureen) evaluate to true, ultimately having to return the entry in the search result, even though there is not a single cn value that would have both conditions evaluate to true by itself.
Hence index range read optimization, if any, can only be correctly applied to single valued attributes.