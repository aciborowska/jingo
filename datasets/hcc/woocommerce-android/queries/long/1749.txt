Testing the changes in #1748 required rotating orientation a bunch while working across all the various screens to make sure no crashes happen and no state is lost. During these tests I found LeakCanary complaining about a bunch of leaks. Looking through the leak traces, they all seem to stem from `MyStoreStatsView`. So even though I have a whole list of pretty much every fragment used by `MainActivity` popping up as leaking, the appearance of `MyStoreStatsView` in every trace makes me think it's likely an easy fix. 

### To reproduce the leaks:
1. Enable "Don't keep activites" in Developer Settings. 
2. Navigate around inside the app, changing orientation with every new screen.

<details>
  <summary><b>Leak Trace</b></summary>
  
Here is one of the leak traces:

LeakingInstance(referenceKey=3c59a2ad-00c9-4dd0-bd6e-503b912c2ee7, referenceName=, instanceClassName=com.woocommerce.android.ui.main.MainActivity, watchDurationMillis=5188, retainedDurationMillis=187, exclusionStatus=WEAKLY_REACHABLE, leakTrace=
┬
├─ android.os.MessageQueue
│    Leaking: NO (it's a GC root and MessageQueue#mQuitting is false)
│    ↓ MessageQueue.mMessages
│                   ~~~~~~~~~
├─ android.os.Message
│    Leaking: UNKNOWN
│    Matches exclusion field android.os.Message#next
│    ↓ Message.next
│              ~~~~
├─ android.os.Message
│    Leaking: UNKNOWN
│    Matches exclusion field android.os.Message#next
│    ↓ Message.next
│              ~~~~
├─ android.os.Message
│    Leaking: UNKNOWN
│    Matches exclusion field android.os.Message#next
│    ↓ Message.next
│              ~~~~
├─ android.os.Message
│    Leaking: UNKNOWN
│    ↓ Message.callback
│              ~~~~~~~~
├─ com.woocommerce.android.ui.mystore.MyStoreStatsView$initView$1
│    Leaking: UNKNOWN
│    Anonymous class implementing java.lang.Runnable
│    ↓ MyStoreStatsView$initView$1.this$0
│                                  ~~~~~~
├─ com.woocommerce.android.ui.mystore.MyStoreStatsView
│    Leaking: YES (View detached and has parent)
│    View#mParent is set
│    View#mAttachInfo is null (view detached)
│    View.mWindowAttachCount=1
│    ↓ MyStoreStatsView.mResources
├─ android.content.res.Resources
│    Leaking: YES (MyStoreStatsView↑ is leaking)
│    ↓ Resources.mResourcesImpl
├─ android.content.res.ResourcesImpl
│    Leaking: YES (Resources↑ is leaking)
│    ↓ ResourcesImpl.mDrawableCache
├─ android.content.res.DrawableCache
│    Leaking: YES (ResourcesImpl↑ is leaking)
│    ↓ DrawableCache.mThemedEntries
├─ android.util.ArrayMap
│    Leaking: YES (DrawableCache↑ is leaking)
│    ↓ ArrayMap.mArray
├─ java.lang.Object[]
│    Leaking: YES (ArrayMap↑ is leaking)
│    ↓ array Object[].[1]
├─ android.util.LongSparseArray
│    Leaking: YES (Object[]↑ is leaking)
│    ↓ LongSparseArray.mValues
├─ java.lang.Object[]
│    Leaking: YES (LongSparseArray↑ is leaking)
│    ↓ array Object[].[1]
├─ java.lang.ref.WeakReference
│    Leaking: YES (Object[]↑ is leaking)
│    Matches exclusion field java.lang.ref.WeakReference#referent
│    ↓ WeakReference.referent
├─ android.graphics.drawable.RippleDrawable$RippleState
│    Leaking: YES (WeakReference↑ is leaking)
│    ↓ RippleDrawable$RippleState.mChildren
├─ android.graphics.drawable.LayerDrawable$ChildDrawable[]
│    Leaking: YES (RippleDrawable$RippleState↑ is leaking)
│    ↓ array LayerDrawable$ChildDrawable[].[0]
├─ android.graphics.drawable.LayerDrawable$ChildDrawable
│    Leaking: YES (LayerDrawable$ChildDrawable[]↑ is leaking)
│    ↓ LayerDrawable$ChildDrawable.mDrawable
├─ android.graphics.drawable.InsetDrawable
│    Leaking: YES (LayerDrawable$ChildDrawable↑ is leaking)
│    ↓ InsetDrawable.mCallback
├─ java.lang.ref.WeakReference
│    Leaking: YES (InsetDrawable↑ is leaking)
│    Matches exclusion field java.lang.ref.WeakReference#referent
│    ↓ WeakReference.referent
├─ android.graphics.drawable.RippleDrawable
│    Leaking: YES (WeakReference↑ is leaking)
│    ↓ RippleDrawable.mCallback
├─ java.lang.ref.WeakReference
│    Leaking: YES (RippleDrawable↑ is leaking)
│    Matches exclusion field java.lang.ref.WeakReference#referent
│    ↓ WeakReference.referent
├─ androidx.appcompat.widget.AppCompatButton
│    Leaking: YES (WeakReference↑ is leaking and View detached and has parent)
│    View#mParent is set
│    View#mAttachInfo is null (view detached)
│    View.mWindowAttachCount=1
│    ↓ AppCompatButton.mContext
╰→ com.woocommerce.android.ui.main.MainActivity
​     Leaking: YES (RefWatcher was watching this and Activity#mDestroyed is true)
, retainedHeapSize=null) 
</details>