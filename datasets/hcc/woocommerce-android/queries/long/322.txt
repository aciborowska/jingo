I merged PR #321 and shorty after I remembered that non-static anonymous class instantiations will keep a reference to their hosting view. 
<img src="https://user-images.githubusercontent.com/5810477/44614866-d9097500-a7f2-11e8-9f95-a6568c4d9590.gif" width="45"/> 
With Kotin, the anonymous class instance will be declared static, but a bunch of accessors are added if the code accesses anything in the hosting class. This code snippet:

```
fun initView(...) {
	/* .... */
	
	lastUpdatedHandler = Handler()
	lastUpdatedRunnable = Runnable {
	    updateRecencyMessage()
	    lastUpdatedHandler.postDelayed(lastUpdatedRunnable, UPDATE_DELAY_TIME_MS)
	}
}
```

Currently this is not too big of a deal because the top-level fragments are never destroyed, just hidden. If this code was in one of the child fragment views, like `OrderDetailOrderStatusView`, then the hosting fragment and all of it's views would not be garbage collected, and everytime a new order detail was opened, a new instance would be created, and so on. The objects would continue to live in memory until the delayed runnable ran to completion. Since this runnable resubmits itself, all instances would live in memory until the process is destroyed. 

Also, this loop continues to run even when the dashboard is no longer the active view. 

Both issues could be fixed by telling the view it should cancel this handler callback, or `DashboardFragment` could host the handler and runnable and tell the custom view when to update it's "last updated" field and then flush when it's hidden. 

cc: @nbradbury 

