The second OutputSelector of two successive split and select are actually not rely on the first one. They are in the same array of OutputSelector in DirectedOutput.

For example.

outputSelector1 => {“name1” or ”name2“}

outputSelector2 => {”name3“ or “name4”}

resultStream = dataStream.split(outputSelector1).select("name2").split(outputSelector2).select("name3")

expectedResult for input {StreamRecord1}:

outputSelector1 => {”name1“}

outputSelector2 => {”name3“}

resultStream => {}

actualResult:

resultStream => {StreamRecord1}