I configured the following flink job in my environment:

Pattern<Event, ?> patternCommandStarted = Pattern.<Event> begin("event-accepted").subtype(Event.class)
.where(e -> {event accepted where statement}).next("second-event-started").subtype(Event.class)
.where(e -> {event started where statement}))
.within(Time.seconds(30));

DataStream<Either<Event, Event>> events = CEP
  .pattern(eventsStream.keyBy(e -> e.getEventProperties().get("deviceCode")), patternCommandStarted)
  .select(eventSelector, eventSelector);

static class EventSelector implements PatternSelectFunction<Event, Event>, PatternTimeoutFunction<Event, Event> {}



The problem that I have is related to timeout handling. I observed that: 

if: first event appears, second event not appear in the stream  
and no new events appear in a stream, timeout handler is not executed.

Expected result: timeout handler should be executed in case if there are no new events in a stream