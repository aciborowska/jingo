With the Flip-6 changes and the support for queued scheduling, the ExecutionGraph must be able to handle cancellation calls when it is not yet fully scheduled. This is for example the case when waiting for new containers.

A cancellation will cancel all Executions. As a result, available slots can get assigned to other Executions (already canceled). Since the slot cannot be assigned to this slot because it's already canceled, this can fail the overall eager scheduling operation. The scheduling result callback will then trigger a global fail operation. This can happen before all Executions have been released and, thus, when the ExecutionGraph is still in the state CANCELLING. The result is that the ExecutionGraph goes into the state FAILING and then FAILED.

In order to solve this problem, I propose to keep track of the scheduling operation and cancelling the result future when a concurrent suspend, cancel or fail call happens.