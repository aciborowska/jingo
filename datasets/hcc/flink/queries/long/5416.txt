The `CheckpointedFunction` interface was introduced to provide user functions with a context for partitioned state storage.   This works for user functions that are provided directly to the operator (assuming it extends from `AbstractUdfStreamOperator`).   However, I see that some operators wrap the user function in an internal function (e.g. `WrappingFunction`,  `InternalWindowFunction`).   This defeats the callbacks on `CheckpointedFunction` because those wrappers donâ€™t implement `CheckpointedFunction`. 

For example, the user function passed to `WindowedStream::apply` will get callbacks for `RichFunction` but not for `CheckpointedFunction`.
