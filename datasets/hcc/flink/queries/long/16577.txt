Consider the following SQL

 


// a: INT, c: LONG
SELECT 
    c, SUM(a) 
FROM T 
WHERE a > 0.1 AND a < 1 
GROUP BY c

 

Here the sql type of 0.1 is Decimal and 1 is Integer, and they are both in NUMERIC type family, and do not trigger type coercion, so the plan is:


FlinkLogicalAggregate(group=[{0}], EXPR$1=[SUM($1)])
+- FlinkLogicalCalc(select=[c, a], where=[AND(>(a, 0.1:DECIMAL(2, 1)), <(a, 1))])
   +- FlinkLogicalTableSourceScan(table=[[...]], fields=[a, b, c])


When we calculate the filtered column interval of calc, it'll lead to validation exception of `FiniteValueInterval`:

