When computing scheduling preferences for an execution task, the JobManager looks at the assigned instances of all its input execution tasks and returns a preference only if not more than 8 instances have been found (if the input of a tasks is distributed across more than 8 tasks, local scheduling won't help a lot in any case).

However, the JobManager treats all input execution tasks the same and does not distinguish between different logical input. The effect is that a join tasks with one broadcasted and one locally forwarded task is not locally assigned towards its locally forwarded input.

This can have a significant impact on the performance of tasks that have more than one input and which rely on local forwarding and co-located task scheduling.