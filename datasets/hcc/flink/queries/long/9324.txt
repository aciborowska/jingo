The SingleLogicalSlot#releaseSlot method returns a future which is completed once the slot has been returned to the SlotOwner. Unfortunately, we don't wait for the SlotOwner's response to complete the future but complete it directly after the call has been made. This causes that the ExecutionGraph can get restarted in case of a recovery before all of its slots have been returned to the SlotPool. As a consequence, the allocation of the new tasks might require more than the max parallelism because of collisions with old tasks (in case of slot sharing).