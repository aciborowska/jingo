The current implementation of queryable state on `HeapKeyedStateBackend` attempts to handle concurrency by using `ConcurrentHashMap`s as datastructure.

However, the implementation has at least two issues:

1) Concurrent modifications of state objects: state can be modified concurrently to a query, e.g. an element being removed from a list. This can result in exceptions or incorrect results.

2) StateDescriptor is indicating whether a `ConcurrentHashMap` is required because queryable state is active. On restore, this information is unknown at first and the implementation always uses plain hash maps. When the state is then finally registered, all previously existing maps are not thread-safe.