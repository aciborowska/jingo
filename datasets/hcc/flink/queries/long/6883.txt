In the Scala API, serializers are generated using Scala macros (via the org.apache.flink.streaming.api.scala.createTypeInformation(..) util).
The generated serializers are inner anonymous classes, therefore classnames will differ depending on when / order that the serializers are generated.

From 1.1 / 1.2 to Flink 1.3, the generated classnames for a serializer for a collections of case classes (e.g. List[SomeUserCaseClass]) will be different. In other words, the exact same user code written in the Scala API, compiling it with 1.1 / 1.2 and with 1.3 will result in different classnames.

This is problematic for restoring older savepoints that have Scala case class collections in their state, because the old serializer cannot be recovered (due to the generated classname change).

For now, I've managed to identify that the root cause for this is that in 1.3 the TypeSerializer base class additionally extends the TypeDeserializer interface. Removing this extending resolves the problem. The actual reason for why this affects the generated classname is still being investigated.