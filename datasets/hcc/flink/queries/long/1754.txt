I have encountered a reproducible deadlock in the execution of one of my jobs. The part of the plan, where this happens, is the following:

    /** Performs the reduction via creating transitive INDs and removing them from the original IND set. */
    private DataSet<Tuple2<Integer, int[]>> calculateTransitiveReduction1(DataSet<Tuple2<Integer, int[]>> inclusionDependencies) {
        // Concatenate INDs (only one hop).
        DataSet<Tuple2<Integer, int[]>> transitiveInds = inclusionDependencies
                .flatMap(new SplitInds())
                .joinWithTiny(inclusionDependencies)
                .where(1).equalTo(0)
                .with(new ConcatenateInds());

        // Remove the concatenated INDs to come up with a transitive reduction of the INDs.
        return inclusionDependencies
                .coGroup(transitiveInds)
                .where(0).equalTo(0)
                .with(new RemoveTransitiveInds());
    }


Seemingly, the flatmap operator waits infinitely for a free buffer to write on.