Using a unioned data set as broadcast variable such as this:


DataSet d1 = [...]
DataSet d2 = [...]
DataSet d3 = [...]

d1
  .map(new MyMapper())
  .withBroadcastSet(d2.union(d3), "myBroadcast");



throws an exception at runtime:


java.lang.Exception: Call to registerInputOutput() of invokable failed
	at org.apache.flink.runtime.taskmanager.Task.run(Task.java:504)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Initializing the input streams failed in Task MapPartition (MapPartition at translatHashJoinAsMap(FlinkFlowStep.java:755)): Illegal input group size in task configuration: -1
	at org.apache.flink.runtime.operators.RegularPactTask.registerInputOutput(RegularPactTask.java:246)
	at org.apache.flink.runtime.taskmanager.Task.run(Task.java:501)
	... 1 more
Caused by: java.lang.Exception: Illegal input group size in task configuration: -1
	at org.apache.flink.runtime.operators.RegularPactTask.initBroadcastInputReaders(RegularPactTask.java:783)
	at org.apache.flink.runtime.operators.RegularPactTask.registerInputOutput(RegularPactTask.java:243)
	... 2 more



A simple workaround is to apply an identity mapper on the unioned data set.