

class MySource<T> implements SourceFunction<T>, ResultTypeQueryable<T> {
 TypeInformation getProducedType() {
   return TypeExtractor.createTypeInfo(SourceFunction.class, this.getClass(), 0, null, null);
 } 
}

DataStream ds = tEnv.addSource(new MySource(), Types.ROW(Types.STRING))



The returned TypeInformation of MySource is GenericTypeInfo, not the user given RowTypeInfo.


It seems that StreamExecutionEnvironment#getTypeInfo doesn't use the user given typeInfo in the highest priority. 