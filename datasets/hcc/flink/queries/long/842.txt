When trying to use a ```DummyFlatMapFunction``` that extends ```FlatMapFunction``` with generics I get a type extractor error.

To replicate this consider a mapper with the following signature:

```
public class DummyFlatMapFunction<A,B,C,D> extends FlatMapFunction<Tuple2<A,B>, Tuple2<C,D>> implements Serializable
```

and then try using in the following way:

```
DataSet<Tuple2<Text, LongWritable>> words = text.flatMap(new DummyFlatMapFunction<LongWritable, Text, Text, LongWritable>());
```

This outputs the following stack of exceptions when executed:


```
sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl cannot be cast to java.lang.reflect.TypeVariable
java.lang.ClassCastException: sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl cannot be cast to java.lang.reflect.TypeVariable
    at eu.stratosphere.api.java.typeutils.TypeExtractor.createTypeInfoWithTypeHierarchy(TypeExtractor.java:415)
    at eu.stratosphere.api.java.typeutils.TypeExtractor.createTypeInfo(TypeExtractor.java:117)
    at eu.stratosphere.api.java.typeutils.TypeExtractor.getFlatMapReturnTypes(TypeExtractor.java:48)
    at eu.stratosphere.api.java.operators.FlatMapOperator.<init>(FlatMapOperator.java:34)
    at eu.stratosphere.api.java.DataSet.flatMap(DataSet.java:141)
```

The way I understand it is that the ```TypeExtractor``` does not support this with generics. In the examples of the new Java API all extended ```FlatMapFunction``` are with concrete types and not generics. However,  in ```ConnectedComponents``` the mapper that extends the MapFunction (not ```FlatMapFunction```) is with generics and apparently works.

Is this behaviour expected and generics are not allowed with ```FlatMapFunction``` or am I missing something? Thanks.


---------------- Imported from GitHub ----------------
Url: https://github.com/stratosphere/stratosphere/issues/842
Created by: atsikiridis
Labels: bug, java api, question, 
Assignee: twalthr
Created at: Wed May 21 11:24:14 CEST 2014
State: closed