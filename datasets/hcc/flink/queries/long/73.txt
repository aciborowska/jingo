Hi Everyone,
I'm opening this pull request to start a discussion on this new feature. I changed the whole stratosphere stack to use objects instead of classes to pass usercode (i.e. Stubs) around. This means that one now uses
MapContract mapper = MapContract.builder(new TokenizeLine())
			.input(source)
			.name("Tokenize Lines")
			.build();
instead of
MapContract mapper = MapContract.builder(TokenizeLine.class)
			.input(source)
			.name("Tokenize Lines")
			.build();

The initial motivation for this is that I require it for the scala-frontend. I cannot generate classes that would be instantiable by the stratosphere runtime so I need to pass objects to the PACTs. I noticed though that this could also make regular java usercode more concise. The Configuration would not be necessary any more because one can just store the configuration in the stub object and for example have a stub with a constructor where you pass in stuff, i.e.:
MapContract mapper = MapContract.builder(new TokenizeLine("<some-line-ending>"))
			.input(source)
			.name("Tokenize Lines")
			.build();
The line ending would then be stored in the stub, the runtime serializes everything and then when the job is run the runtime deserializes the job and the information is available in every instance of the stub.

On thing that is affected by the change is that all usercode stubs now must be serializable. For this I made base class Stub "Serializable" and also other things such as Value and the derived classes.

Now, discuss away... 

Aljoscha

P.S. We could then also have
        FileDataSource source = new FileDataSource(new TextInputFormat("ASCII"), dataInput, "Input Lines");
instead of
	FileDataSource source = new FileDataSource(TextInputFormat.class, dataInput, "Input Lines");
	source.setParameter(TextInputFormat.CHARSET_NAME, "ASCII");


---------------- Imported from GitHub ----------------
Url: https://github.com/stratosphere/stratosphere/pull/73
Created by: aljoscha
Labels: 
Milestone: Release 0.4
Created at: Tue Sep 03 13:54:22 CEST 2013
State: closed