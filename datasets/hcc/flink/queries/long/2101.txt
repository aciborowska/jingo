Calling addSink(new KafkaSink<Tuple5<String, String, String, Long, Double>>(
						"localhost:9092",
						"webtrends.ec1601",
						new Utils.TypeInformationSerializationSchema<Tuple5<String, String, String, Long, Double>>(
								new Tuple5<String, String, String, Long, Double>(),
								env.getConfig())));

gives me an Exception stating, that the generic type infos are not given.

Exception in thread "main" org.apache.flink.api.common.functions.InvalidTypesException: Tuple needs to be parameterized by using generics.
	at org.apache.flink.api.java.typeutils.TypeExtractor.createTypeInfoWithTypeHierarchy(TypeExtractor.java:396)
	at org.apache.flink.api.java.typeutils.TypeExtractor.privateCreateTypeInfo(TypeExtractor.java:339)
	at org.apache.flink.api.java.typeutils.TypeExtractor.createTypeInfo(TypeExtractor.java:318)
	at org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo.<init>(ObjectArrayTypeInfo.java:45)
	at org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo.getInfoFor(ObjectArrayTypeInfo.java:167)
	at org.apache.flink.api.java.typeutils.TypeExtractor.privateGetForClass(TypeExtractor.java:1150)
	at org.apache.flink.api.java.typeutils.TypeExtractor.privateGetForClass(TypeExtractor.java:1122)
	at org.apache.flink.api.java.typeutils.TypeExtractor.privateGetForObject(TypeExtractor.java:1476)
	at org.apache.flink.api.java.typeutils.TypeExtractor.getForObject(TypeExtractor.java:1446)
	at org.apache.flink.streaming.connectors.kafka.Utils$TypeInformationSerializationSchema.<init>(Utils.java:37)
	at de.otto.streamexample.WCExample.main(WCExample.java:132)
