Currently the taskRestore field of an Execution is reset to null in task deployment stage.

The purpose of it is "allows the JobManagerTaskRestore instance to be garbage collected. Furthermore, it won't be archived along with the Execution in the ExecutionVertex in case of a restart. This is especially important when setting state.backend.fs.memory-threshold to larger values because every state below this threshold will be stored in the meta state files and, thus, also the JobManagerTaskRestore instances." (From FLINK-9693)

 

However, if a task fails before it comes to the deployment stage(e.g. fails due to slot allocation timeout), the taskRestore field will remain non-null and will be archived in prior executions. 

This may result in large JM heap cost in certain cases and lead to continuous JM full GCs.

 

I’d propose to set the taskRestore field to be null before moving an Execution to prior executions.

We may keep the logic which sets the taskRestore field to be null after task deployment which allows it to be GC'ed earlier in normal cases.