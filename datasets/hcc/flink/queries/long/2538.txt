In ClassLoaderUtil#getUserCodeClassLoaderInfo() around line 76:

              else {
                try {
                  new JarFile(filePath);
                  bld.append(" (valid JAR)");
                }
                catch (Exception e) {
                  bld.append(" (invalid JAR: ").append(e.getMessage()).append(')');
                }
              }


The JarFile isn't closed before returning, leading to potential resource leak.