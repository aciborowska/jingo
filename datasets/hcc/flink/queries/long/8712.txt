Currently, it is not possible to run a job with multiple slot sharing groups on the LocalExecutor. The problem is that we determine the number of required slots simply by looking for the max parallelism of the job but do not consider slot sharing groups.

Â 


// set up the streaming execution environment
final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();

env.setParallelism(1);

final DataStreamSource<Integer> input = env.addSource(new InfinitySource());

final SingleOutputStreamOperator<Integer> different = input.map(new MapFunction<Integer, Integer>() {
   @Override
   public Integer map(Integer integer) throws Exception {
      return integer;
   }
}).slotSharingGroup("Different");

different.print();

// execute program
env.execute("Flink Streaming Java API Skeleton");
