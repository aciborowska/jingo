Currently, We have a java doc in AppendingState#add


<p> If null is passed in, the state value will remain unchanged.

but currently, the implementation did not respect this, take HeapReducingState as an example, we'll clear the state if the passed parameter is null


@Override	
public void add(V value) throws IOException {
    if (value == null) {			
        clear();			
        return;		
    }
    try {			
        stateTable.transform(currentNamespace, value, reduceTransformation);		            } catch (Exception e) {			
        throw new IOException("Exception while applying ReduceFunction in reducing state", e);		
    }	
}


But in RocksDBReducingStateÂ  we would not clear the state, and put the null value into state if serializer can serialize null.


@Override
public void add(V value) throws Exception {
   byte[] key = getKeyBytes();
   V oldValue = getInternal(key);
   V newValue = oldValue == null ? value : reduceFunction.reduce(oldValue, value);
   updateInternal(key, newValue);
}


this issue wants to make all Appending}}State respect the javadoc of {{AppendingState, and return directly if the passed in parameter is null.