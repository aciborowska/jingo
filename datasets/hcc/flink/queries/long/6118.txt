For operators that read from the network we have checks in place that verify that the input watermark only moves forwards. If an operator is directly chained to an operator then any Output.emitWatermark() of the first operator directly invoke processWatermark() on the chained operator, meaning that there are no verification steps in-between.

This only becomes visible when a non-keyed, chained operator (with, for example a ProcessFunction) is checking the  current watermark. Only keyed operators can have timers and for those the watermark always comes form the network, i.e. it behaves correctly.