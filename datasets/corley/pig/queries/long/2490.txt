Nested function/UDF calls can make for very convoluted data transformations.

For example, give the following sample data:

business1     9:00 AM - 4:00 PM



Transforming it with Pig UDFs might look like the following to normalize hours to "9:00a-4:00p"

B = foreach A generate
    REGEXREPLACE(REGEXREPLACE(REGEXREPLACE(hours,' AM','a'), ' PM', 'p'), ' *- *', '-')
        as hours_normalized.



Yes, you could recast this as but it's still rather convoluted.


B = foreach A {
    hours1 = REGEXREPLACE(hours,' AM\\b','a');
    hours2 = REGEXREPLACE(hours1,' PM\\b','p');
    hours3 = REGEXREPLACE(hours2,' *- *','-');
    generate
    hours3 as hours_normalized;
    };



I suggest an "object-style" function chaining enhancement to the grammar a la Java, JavaScript, etc.


B = foreach A generate
    REGEXREPLACE(hours,' AM\\b','a').REGEXREPLACE(' PM\\b','p').REGEXREPLACE(' *- *','-')
        as hours_normalized;



This chaining notation makes it much clearer as to the sequence of actions without the convoluted nesting.

In the case of the "object-method" style dot (.) notation, the result of the prior expression is just used as the first value in the tuple passed to the function call.

In other words, the following two expressions would be equivalent:


f(a,b)
a.f(b)



As such, I don't think there are any requirements to modify existing UDFs.

I think this is just a syntactic "sugar" enhancement that should be fairly trivial to implement, yet would make coding complex data transformations with Pig UDFs "cleaner".