Currently, the optimizer works on the following mechanism:

1. Specify the pattern to be searched
2. For each occurrence of the pattern, check and then apply a transformation

With this approach, the search for a pattern is localized. An example will illustrate the problem.

If the pattern to be searched for is foreach (with flatten) connected to any operator and if the graph has more than one foreach (with flatten) connected to an operator (cross, join, union, etc), then each instance of foreach connected to the operator is returned as a match. While this is fine for a localized view (per match), at a global view the pattern to be searched for is any number of foreach connected to an operator.

The implication of not having a globalized view is more rules. There will be one rule for one foreach connected to an opeator, one rule for two foreachs connected to an operators, etc.