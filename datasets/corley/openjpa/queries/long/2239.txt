I have an Order entity that has two separate lists of OrderLine entities:

...
	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)
	private List<OrderLine> plannedOrderLines = new ArrayList<OrderLine>();

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)
	private List<OrderLine> actualOrderLines = new ArrayList<OrderLine>();
...

I remove a single element from actualOrderLines, then merge the entity and close the entity manager. When I find the entity again with a different entity manager, the plannedOrderLines list is empty.

OpenJPA generates one join table that contains entries for both lists. I used this configuration for a long time and it seems to work fine except for this bug. I verified in the database that the entries for planned order lines are all removed from the join table.

Workaround: use @JoinTable or @JoinColumn annotation so that both lists do not map to the same join table.