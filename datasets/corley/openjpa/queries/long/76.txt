Patrick Linskey found the problem and posted to the dev mailing list. Here's the original post :

Hi,

I get the following stack trace when running 'mvn package'. It looks
like I don't have some required IBM classes in my classpath.
Surprisingly, this exception does not cause the build to fail, but
presumably, the output bytes are not the same as if this had run
successfully.

Does anyone have any suggestions for either getting the classes into the
classpath or moving the exception to runtime, so that there aren't
build-time dependency issues resulting in different jars from the same
sources?

Thanks,

-Patrick


Partial stack trace:

[INFO] [antrun:run 
{execution: add-was-interfaces}
]
[INFO] Executing tasks
    [java] java.lang.IllegalArgumentException:
java.lang.NoClassDefFoundError:
com/ibm/websphere/jtaextensions/SynchronizationCallback
    [java]     at
org.apache.tools.ant.taskdefs.ExecuteJava.execute(ExecuteJava.java:180)
    [java]     at org.apache.tools.ant.taskdefs.Java.run(Java.java:710)
    [java]     at
org.apache.tools.ant.taskdefs.Java.executeJava(Java.java:178)

    [java]     at
org.apache.tools.ant.taskdefs.Java.execute(Java.java:84)
    [java]     at
org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:275)
    [java]     at org.apache.tools.ant.Task.perform(Task.java:364)
    [java]     at org.apache.tools.ant.Target.execute(Target.java:341)
    [java]     at
org.apache.maven.plugin.antrun.AbstractAntMojo.executeTasks(AbstractAntM
ojo.java:108)
    [java]     at
org.apache.maven.plugin.antrun.AntRunMojo.execute(AntRunMojo.java:83)
    [java]     at
org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginMa
nager.java:412)
    [java]     at
org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(Default
LifecycleExecutor.java:534)
    .....

    [java] Caused by: java.lang.IllegalArgumentException:
java.lang.NoClassDefFoundError:
com/ibm/websphere/jtaextensions/SynchronizationCallback
    [java]     at serp.util.Strings.toClass(Strings.java:211)
    [java]     at serp.util.Strings.toClass(Strings.java:140)
    [java]     at serp.bytecode.BCClass.getType(BCClass.java:565)
    [java]     at serp.bytecode.BCClass.write(BCClass.java:202)
    [java]     at
org.apache.openjpa.ee.WASManagedRuntime.main(WASManagedRuntime.java:412)
    [java]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native
Method)


Upon further examination the problem occurs if the WASSynchronization class is modified a second time (ie you don't run mvn clean before running mvn package). 
