Plug-in values are identified or stored in the configuration using a key that consists of a prefix followed by a moniker that is available via Value.getProperty() method. This feature will support multiple equivalent moniker for the same value. This is needed because JPA 2.0 Specification defines certain pre-defined property key in javax.persistence.*  namespace that has pre-existing openjpa.* equivalents. To support a configuration that uses new property key e.g. "javax.persistence.jdbc.driver" and retain backward compatibility with a configuration that uses equivalent 'openjpa.ConnectionDriverName', a seamless solution should be provided that can add equivalent property names to a Value. The configuration processing and finding a Value in a Map should be upgraded to account for the fact that a Value can have more than one names. 
The implementation must follow the following guidelines 
a) The 'primary name' of the Value will have the exact same semantics of existing Value.getProperty() method 
b) configuration processing layer should mutate any Value that is specified with a new equivalent javax.persistence.* key to its openjpa.* equivalent. This will ensure that post-configuration processing layers are not impacted (or burdened) by this extra feature of a Value having equivalent name.