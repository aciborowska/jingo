Problem:
I was trying to use the extended schema (openjpa-orm.xsd) to provide a mapper to transform data coming out of the DB from a char(1) to a boolean value in my class.

Person class has a field:

	private Boolean isActive



DB.Person table has column:

	IsInactiveFLAG - char(1)



In orm.xml (using the extended schema):
<entity name="Person" class="...entity.Person">
.........
<basic name="isActive">
<orm:column name="IsInactiveFLAG" column-definition="char(1)"/>
</basic>
 <openjpa:attributes>
 <openjpa:persistent name="isActive"
       externalizer="InvertedYesNoMapper.toDbValue"
       factory="InvertedYesNoMapper.toValue"/>
  </openjpa:attributes>
...................
</entity>

I get the following error at runtime:

 ...Person.isActive" declares column "isActive", but this column does not
 exist in table "dbo.PERSON"
 at
 org.apache.openjpa.jdbc.meta.MappingInfo.mergeColumn(MappingInfo.java:692)
                 at
 org.apache.openjpa.jdbc.meta.MappingInfo.createColumns(MappingInfo.java:593)
                 at
 org.apache.openjpa.jdbc.meta.ValueMappingInfo.getColumns(ValueMappingInfo.java:178)
                 at
 org.apache.openjpa.jdbc.meta.strats.StringFieldStrategy.map(StringFieldStrategy.java:84)
                 at
 org.apache.openjpa.jdbc.meta.FieldMapping.setStrategy(FieldMapping.java:146)
                 at
 org.apache.openjpa.jdbc.meta.RuntimeStrategyInstaller.installStrategy(RuntimeStrategyInstaller.java:82)
                 at
 org.apache.openjpa.jdbc.meta.FieldMapping.resolveMapping(FieldMapping.java:496)
                 at
 org.apache.openjpa.jdbc.meta.FieldMapping.resolve(FieldMapping.java:461)
                 at
 org.apache.openjpa.jdbc.meta.ClassMapping.resolveNonRelationMappings(ClassMapping.java:895)
                 at
 org.apache.openjpa.jdbc.meta.MappingRepository.prepareMapping(MappingRepository.java:416)
                 at
 org.apache.openjpa.meta.MetaDataRepository.preMapping(MetaDataRepository.java:768)
                 at
 org.apache.openjpa.meta.MetaDataRepository.resolve(MetaDataRepository.java:657)
                 at
 org.apache.openjpa.meta.MetaDataRepository.getMetaDataInternal(MetaDataRepository.java:417)
                 at
 org.apache.openjpa.meta.MetaDataRepository.getMetaData(MetaDataRepository.java:388)
                 at
 org.apache.openjpa.persistence.meta.MetamodelImpl.<init>(MetamodelImpl.java:85)
                 at
 org.apache.openjpa.persistence.EntityManagerFactoryImpl.getMetamodel(EntityManagerFactoryImpl.java:346)
                 at
 org.apache.openjpa.persistence.EntityManagerFactoryImpl.getMetamodel(EntityManagerFactoryImpl.java:60)

When I use the attributes in the class, this all works fine.

I turned on trace logging and saw that with the mappings above, the mapping strategy was not showing as being resolved.

What I did to get past the error:
I found that specifying metadata-complete="true" on my entity element made the error go away and my factory/externalizer get called as expected.

