I suggest the following edits to the to the EnhancingWithMaven page at http://openjpa.apache.org/enhancingwithmaven.html :

1) Add failonerror="true" to <java>
2) Use dir="${basedir}/target/classes" instead of dir="target/classes" because of problems with relative directories when using multi-project (POM with <modules> etc.) structure

Explain/remind that the maven-antrun-plugin is very problematic... I ran into WEIRED issues with it because I had other instances of the maven-antrun-plugin in ANOTHER project than the one I was putting this into, and adding the maven-antrun-plugin with OpenJPA enhancement to a project caused class no longer found issues in another POM that also used the maven-antrun-plugin but worked before.

If using the maven-antrun-plugin, could also taskdef to use the PCEnhancerTask/openjpac ant task.  I found this to be more suitable as I can easily use <fileset><include><exclude> to e.g. exclude some classes that are in a JAR . Until I ran into the problem above and switched to the OpenJPA Maven Plugin, which works well actually.

But point out that the OpenJPA Maven Plugin at http://mojo.codehaus.org/openjpa-maven-plugin comes with it's own fixed version of OpenJPA (currently a very outdated and no longer found 0.9.6 apparently!), which makes it a lot less useful... unless there is a way to work around this (force the version of a dependency of a plugin to another version?!). See http://jira.codehaus.org/browse/MOJO-1132 (but http://jira.codehaus.org/browse/MOJO-1133).

Lastly, the Enhancer could probably also be integrated into Maven using http://mojo.codehaus.org/exec-maven-plugin/java-mojo.html or http://maven.apache.org/guides/plugin/guide-ant-plugin-development.html; haven't tried this, but may be worth pointing out?

PPS: Why don't you integrate the openjpa-maven-plugin with OpenJPA directly and test and distribute it?